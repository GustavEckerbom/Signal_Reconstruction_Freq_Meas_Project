
Frequency_Measurement_Project_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dfa0  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800e24c  0800e24c  0000f24c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e2cc  0800e2cc  0000f2cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e2d4  0800e2d4  0000f2d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800e2d8  0800e2d8  0000f2d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000104  24000000  0800e2dc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001e18  24000104  0800e3e0  00010104  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24001f1c  0800e3e0  00010f1c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00010104  2**0
                  CONTENTS, READONLY
 10 .debug_info   000211d9  00000000  00000000  00010132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004422  00000000  00000000  0003130b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001838  00000000  00000000  00035730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001288  00000000  00000000  00036f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003533b  00000000  00000000  000381f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00022cda  00000000  00000000  0006d52b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014f540  00000000  00000000  00090205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001df745  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006718  00000000  00000000  001df788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000096  00000000  00000000  001e5ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000104 	.word	0x24000104
 80002c8:	00000000 	.word	0x00000000
 80002cc:	0800e234 	.word	0x0800e234

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000108 	.word	0x24000108
 80002e8:	0800e234 	.word	0x0800e234

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96a 	b.w	80005d8 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	460c      	mov	r4, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14e      	bne.n	80003c6 <__udivmoddi4+0xaa>
 8000328:	4694      	mov	ip, r2
 800032a:	458c      	cmp	ip, r1
 800032c:	4686      	mov	lr, r0
 800032e:	fab2 f282 	clz	r2, r2
 8000332:	d962      	bls.n	80003fa <__udivmoddi4+0xde>
 8000334:	b14a      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000336:	f1c2 0320 	rsb	r3, r2, #32
 800033a:	4091      	lsls	r1, r2
 800033c:	fa20 f303 	lsr.w	r3, r0, r3
 8000340:	fa0c fc02 	lsl.w	ip, ip, r2
 8000344:	4319      	orrs	r1, r3
 8000346:	fa00 fe02 	lsl.w	lr, r0, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f f68c 	uxth.w	r6, ip
 8000352:	fbb1 f4f7 	udiv	r4, r1, r7
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb07 1114 	mls	r1, r7, r4, r1
 800035e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000362:	fb04 f106 	mul.w	r1, r4, r6
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000372:	f080 8112 	bcs.w	800059a <__udivmoddi4+0x27e>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 810f 	bls.w	800059a <__udivmoddi4+0x27e>
 800037c:	3c02      	subs	r4, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a59      	subs	r1, r3, r1
 8000382:	fa1f f38e 	uxth.w	r3, lr
 8000386:	fbb1 f0f7 	udiv	r0, r1, r7
 800038a:	fb07 1110 	mls	r1, r7, r0, r1
 800038e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000392:	fb00 f606 	mul.w	r6, r0, r6
 8000396:	429e      	cmp	r6, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x94>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a2:	f080 80fc 	bcs.w	800059e <__udivmoddi4+0x282>
 80003a6:	429e      	cmp	r6, r3
 80003a8:	f240 80f9 	bls.w	800059e <__udivmoddi4+0x282>
 80003ac:	4463      	add	r3, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	1b9b      	subs	r3, r3, r6
 80003b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa6>
 80003ba:	40d3      	lsrs	r3, r2
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xba>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb4>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x150>
 80003de:	42a3      	cmp	r3, r4
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xcc>
 80003e2:	4290      	cmp	r0, r2
 80003e4:	f0c0 80f0 	bcc.w	80005c8 <__udivmoddi4+0x2ac>
 80003e8:	1a86      	subs	r6, r0, r2
 80003ea:	eb64 0303 	sbc.w	r3, r4, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d0e6      	beq.n	80003c2 <__udivmoddi4+0xa6>
 80003f4:	e9c5 6300 	strd	r6, r3, [r5]
 80003f8:	e7e3      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x204>
 8000400:	eba1 040c 	sub.w	r4, r1, ip
 8000404:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000408:	fa1f f78c 	uxth.w	r7, ip
 800040c:	2101      	movs	r1, #1
 800040e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000412:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000416:	fb08 4416 	mls	r4, r8, r6, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb07 f006 	mul.w	r0, r7, r6
 8000422:	4298      	cmp	r0, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x11c>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f106 34ff 	add.w	r4, r6, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x11a>
 8000430:	4298      	cmp	r0, r3
 8000432:	f200 80cd 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 8000436:	4626      	mov	r6, r4
 8000438:	1a1c      	subs	r4, r3, r0
 800043a:	fa1f f38e 	uxth.w	r3, lr
 800043e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000442:	fb08 4410 	mls	r4, r8, r0, r4
 8000446:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044a:	fb00 f707 	mul.w	r7, r0, r7
 800044e:	429f      	cmp	r7, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x148>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 34ff 	add.w	r4, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x146>
 800045c:	429f      	cmp	r7, r3
 800045e:	f200 80b0 	bhi.w	80005c2 <__udivmoddi4+0x2a6>
 8000462:	4620      	mov	r0, r4
 8000464:	1bdb      	subs	r3, r3, r7
 8000466:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x9c>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa20 fc06 	lsr.w	ip, r0, r6
 800047c:	fa04 f301 	lsl.w	r3, r4, r1
 8000480:	ea43 030c 	orr.w	r3, r3, ip
 8000484:	40f4      	lsrs	r4, r6
 8000486:	fa00 f801 	lsl.w	r8, r0, r1
 800048a:	0c38      	lsrs	r0, r7, #16
 800048c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000490:	fbb4 fef0 	udiv	lr, r4, r0
 8000494:	fa1f fc87 	uxth.w	ip, r7
 8000498:	fb00 441e 	mls	r4, r0, lr, r4
 800049c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a0:	fb0e f90c 	mul.w	r9, lr, ip
 80004a4:	45a1      	cmp	r9, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d90a      	bls.n	80004c2 <__udivmoddi4+0x1a6>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b2:	f080 8084 	bcs.w	80005be <__udivmoddi4+0x2a2>
 80004b6:	45a1      	cmp	r9, r4
 80004b8:	f240 8081 	bls.w	80005be <__udivmoddi4+0x2a2>
 80004bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	eba4 0409 	sub.w	r4, r4, r9
 80004c6:	fa1f f983 	uxth.w	r9, r3
 80004ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ce:	fb00 4413 	mls	r4, r0, r3, r4
 80004d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1d2>
 80004de:	193c      	adds	r4, r7, r4
 80004e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e4:	d267      	bcs.n	80005b6 <__udivmoddi4+0x29a>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d965      	bls.n	80005b6 <__udivmoddi4+0x29a>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f2:	fba0 9302 	umull	r9, r3, r0, r2
 80004f6:	eba4 040c 	sub.w	r4, r4, ip
 80004fa:	429c      	cmp	r4, r3
 80004fc:	46ce      	mov	lr, r9
 80004fe:	469c      	mov	ip, r3
 8000500:	d351      	bcc.n	80005a6 <__udivmoddi4+0x28a>
 8000502:	d04e      	beq.n	80005a2 <__udivmoddi4+0x286>
 8000504:	b155      	cbz	r5, 800051c <__udivmoddi4+0x200>
 8000506:	ebb8 030e 	subs.w	r3, r8, lr
 800050a:	eb64 040c 	sbc.w	r4, r4, ip
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	40cb      	lsrs	r3, r1
 8000514:	431e      	orrs	r6, r3
 8000516:	40cc      	lsrs	r4, r1
 8000518:	e9c5 6400 	strd	r6, r4, [r5]
 800051c:	2100      	movs	r1, #0
 800051e:	e750      	b.n	80003c2 <__udivmoddi4+0xa6>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f103 	lsr.w	r1, r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa24 f303 	lsr.w	r3, r4, r3
 8000530:	4094      	lsls	r4, r2
 8000532:	430c      	orrs	r4, r1
 8000534:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000538:	fa00 fe02 	lsl.w	lr, r0, r2
 800053c:	fa1f f78c 	uxth.w	r7, ip
 8000540:	fbb3 f0f8 	udiv	r0, r3, r8
 8000544:	fb08 3110 	mls	r1, r8, r0, r3
 8000548:	0c23      	lsrs	r3, r4, #16
 800054a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054e:	fb00 f107 	mul.w	r1, r0, r7
 8000552:	4299      	cmp	r1, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x24c>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 36ff 	add.w	r6, r0, #4294967295
 800055e:	d22c      	bcs.n	80005ba <__udivmoddi4+0x29e>
 8000560:	4299      	cmp	r1, r3
 8000562:	d92a      	bls.n	80005ba <__udivmoddi4+0x29e>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1a5b      	subs	r3, r3, r1
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000570:	fb08 3311 	mls	r3, r8, r1, r3
 8000574:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000578:	fb01 f307 	mul.w	r3, r1, r7
 800057c:	42a3      	cmp	r3, r4
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x276>
 8000580:	eb1c 0404 	adds.w	r4, ip, r4
 8000584:	f101 36ff 	add.w	r6, r1, #4294967295
 8000588:	d213      	bcs.n	80005b2 <__udivmoddi4+0x296>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d911      	bls.n	80005b2 <__udivmoddi4+0x296>
 800058e:	3902      	subs	r1, #2
 8000590:	4464      	add	r4, ip
 8000592:	1ae4      	subs	r4, r4, r3
 8000594:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000598:	e739      	b.n	800040e <__udivmoddi4+0xf2>
 800059a:	4604      	mov	r4, r0
 800059c:	e6f0      	b.n	8000380 <__udivmoddi4+0x64>
 800059e:	4608      	mov	r0, r1
 80005a0:	e706      	b.n	80003b0 <__udivmoddi4+0x94>
 80005a2:	45c8      	cmp	r8, r9
 80005a4:	d2ae      	bcs.n	8000504 <__udivmoddi4+0x1e8>
 80005a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ae:	3801      	subs	r0, #1
 80005b0:	e7a8      	b.n	8000504 <__udivmoddi4+0x1e8>
 80005b2:	4631      	mov	r1, r6
 80005b4:	e7ed      	b.n	8000592 <__udivmoddi4+0x276>
 80005b6:	4603      	mov	r3, r0
 80005b8:	e799      	b.n	80004ee <__udivmoddi4+0x1d2>
 80005ba:	4630      	mov	r0, r6
 80005bc:	e7d4      	b.n	8000568 <__udivmoddi4+0x24c>
 80005be:	46d6      	mov	lr, sl
 80005c0:	e77f      	b.n	80004c2 <__udivmoddi4+0x1a6>
 80005c2:	4463      	add	r3, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e74d      	b.n	8000464 <__udivmoddi4+0x148>
 80005c8:	4606      	mov	r6, r0
 80005ca:	4623      	mov	r3, r4
 80005cc:	4608      	mov	r0, r1
 80005ce:	e70f      	b.n	80003f0 <__udivmoddi4+0xd4>
 80005d0:	3e02      	subs	r6, #2
 80005d2:	4463      	add	r3, ip
 80005d4:	e730      	b.n	8000438 <__udivmoddi4+0x11c>
 80005d6:	bf00      	nop

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005e0:	f000 fa90 	bl	8000b04 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f000 fde0 	bl	80011a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f818 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ec:	f000 f9f4 	bl	80009d8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005f0:	f000 f890 	bl	8000714 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80005f4:	f000 f958 	bl	80008a8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005f8:	f000 f9a2 	bl	8000940 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80005fc:	f00d f8c4 	bl	800d788 <MX_USB_DEVICE_Init>
  MX_SPI3_Init();
 8000600:	f000 f902 	bl	8000808 <MX_SPI3_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000604:	2140      	movs	r1, #64	@ 0x40
 8000606:	4804      	ldr	r0, [pc, #16]	@ (8000618 <main+0x3c>)
 8000608:	f002 fee5 	bl	80033d6 <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 800060c:	20fa      	movs	r0, #250	@ 0xfa
 800060e:	f000 fe5d 	bl	80012cc <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000612:	bf00      	nop
 8000614:	e7f6      	b.n	8000604 <main+0x28>
 8000616:	bf00      	nop
 8000618:	58020800 	.word	0x58020800

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b09c      	sub	sp, #112	@ 0x70
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000626:	224c      	movs	r2, #76	@ 0x4c
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f00d fdd6 	bl	800e1dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	2220      	movs	r2, #32
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f00d fdd0 	bl	800e1dc <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800063c:	4b33      	ldr	r3, [pc, #204]	@ (800070c <SystemClock_Config+0xf0>)
 800063e:	f04f 32ff 	mov.w	r2, #4294967295
 8000642:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000646:	2002      	movs	r0, #2
 8000648:	f004 f97e 	bl	8004948 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800064c:	2300      	movs	r3, #0
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	4b2f      	ldr	r3, [pc, #188]	@ (8000710 <SystemClock_Config+0xf4>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	4a2e      	ldr	r2, [pc, #184]	@ (8000710 <SystemClock_Config+0xf4>)
 8000656:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800065a:	6193      	str	r3, [r2, #24]
 800065c:	4b2c      	ldr	r3, [pc, #176]	@ (8000710 <SystemClock_Config+0xf4>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000668:	bf00      	nop
 800066a:	4b29      	ldr	r3, [pc, #164]	@ (8000710 <SystemClock_Config+0xf4>)
 800066c:	699b      	ldr	r3, [r3, #24]
 800066e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000672:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000676:	d1f8      	bne.n	800066a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000678:	2301      	movs	r3, #1
 800067a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800067c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000680:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000682:	2302      	movs	r3, #2
 8000684:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000686:	2302      	movs	r3, #2
 8000688:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800068a:	2301      	movs	r3, #1
 800068c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 800068e:	2323      	movs	r3, #35	@ 0x23
 8000690:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000692:	2302      	movs	r3, #2
 8000694:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8000696:	230c      	movs	r3, #12
 8000698:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800069a:	2302      	movs	r3, #2
 800069c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800069e:	230c      	movs	r3, #12
 80006a0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006a2:	2300      	movs	r3, #0
 80006a4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ae:	4618      	mov	r0, r3
 80006b0:	f004 f994 	bl	80049dc <HAL_RCC_OscConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006ba:	f000 fa4f 	bl	8000b5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006be:	233f      	movs	r3, #63	@ 0x3f
 80006c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c2:	2303      	movs	r3, #3
 80006c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006ce:	2340      	movs	r3, #64	@ 0x40
 80006d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006d2:	2340      	movs	r3, #64	@ 0x40
 80006d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006da:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006dc:	2340      	movs	r3, #64	@ 0x40
 80006de:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	2106      	movs	r1, #6
 80006e4:	4618      	mov	r0, r3
 80006e6:	f004 fdab 	bl	8005240 <HAL_RCC_ClockConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80006f0:	f000 fa34 	bl	8000b5c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 80006f4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80006f8:	f44f 0100 	mov.w	r1, #8388608	@ 0x800000
 80006fc:	2000      	movs	r0, #0
 80006fe:	f004 ff55 	bl	80055ac <HAL_RCC_MCOConfig>
}
 8000702:	bf00      	nop
 8000704:	3770      	adds	r7, #112	@ 0x70
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	58024400 	.word	0x58024400
 8000710:	58024800 	.word	0x58024800

08000714 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	@ 0x28
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800071a:	f107 031c 	add.w	r3, r7, #28
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000726:	463b      	mov	r3, r7
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]
 8000734:	615a      	str	r2, [r3, #20]
 8000736:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000738:	4b2f      	ldr	r3, [pc, #188]	@ (80007f8 <MX_ADC1_Init+0xe4>)
 800073a:	4a30      	ldr	r2, [pc, #192]	@ (80007fc <MX_ADC1_Init+0xe8>)
 800073c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800073e:	4b2e      	ldr	r3, [pc, #184]	@ (80007f8 <MX_ADC1_Init+0xe4>)
 8000740:	2200      	movs	r2, #0
 8000742:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000744:	4b2c      	ldr	r3, [pc, #176]	@ (80007f8 <MX_ADC1_Init+0xe4>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800074a:	4b2b      	ldr	r3, [pc, #172]	@ (80007f8 <MX_ADC1_Init+0xe4>)
 800074c:	2200      	movs	r2, #0
 800074e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000750:	4b29      	ldr	r3, [pc, #164]	@ (80007f8 <MX_ADC1_Init+0xe4>)
 8000752:	2204      	movs	r2, #4
 8000754:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000756:	4b28      	ldr	r3, [pc, #160]	@ (80007f8 <MX_ADC1_Init+0xe4>)
 8000758:	2200      	movs	r2, #0
 800075a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800075c:	4b26      	ldr	r3, [pc, #152]	@ (80007f8 <MX_ADC1_Init+0xe4>)
 800075e:	2200      	movs	r2, #0
 8000760:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000762:	4b25      	ldr	r3, [pc, #148]	@ (80007f8 <MX_ADC1_Init+0xe4>)
 8000764:	2201      	movs	r2, #1
 8000766:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000768:	4b23      	ldr	r3, [pc, #140]	@ (80007f8 <MX_ADC1_Init+0xe4>)
 800076a:	2200      	movs	r2, #0
 800076c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800076e:	4b22      	ldr	r3, [pc, #136]	@ (80007f8 <MX_ADC1_Init+0xe4>)
 8000770:	2200      	movs	r2, #0
 8000772:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000774:	4b20      	ldr	r3, [pc, #128]	@ (80007f8 <MX_ADC1_Init+0xe4>)
 8000776:	2200      	movs	r2, #0
 8000778:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800077a:	4b1f      	ldr	r3, [pc, #124]	@ (80007f8 <MX_ADC1_Init+0xe4>)
 800077c:	2200      	movs	r2, #0
 800077e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000780:	4b1d      	ldr	r3, [pc, #116]	@ (80007f8 <MX_ADC1_Init+0xe4>)
 8000782:	2200      	movs	r2, #0
 8000784:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000786:	4b1c      	ldr	r3, [pc, #112]	@ (80007f8 <MX_ADC1_Init+0xe4>)
 8000788:	2200      	movs	r2, #0
 800078a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800078c:	4b1a      	ldr	r3, [pc, #104]	@ (80007f8 <MX_ADC1_Init+0xe4>)
 800078e:	2200      	movs	r2, #0
 8000790:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000794:	4818      	ldr	r0, [pc, #96]	@ (80007f8 <MX_ADC1_Init+0xe4>)
 8000796:	f000 ff95 	bl	80016c4 <HAL_ADC_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007a0:	f000 f9dc 	bl	8000b5c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007a8:	f107 031c 	add.w	r3, r7, #28
 80007ac:	4619      	mov	r1, r3
 80007ae:	4812      	ldr	r0, [pc, #72]	@ (80007f8 <MX_ADC1_Init+0xe4>)
 80007b0:	f001 fcc0 	bl	8002134 <HAL_ADCEx_MultiModeConfigChannel>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80007ba:	f000 f9cf 	bl	8000b5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80007be:	4b10      	ldr	r3, [pc, #64]	@ (8000800 <MX_ADC1_Init+0xec>)
 80007c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007c2:	2306      	movs	r3, #6
 80007c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <MX_ADC1_Init+0xf0>)
 80007cc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007ce:	2304      	movs	r3, #4
 80007d0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007da:	463b      	mov	r3, r7
 80007dc:	4619      	mov	r1, r3
 80007de:	4806      	ldr	r0, [pc, #24]	@ (80007f8 <MX_ADC1_Init+0xe4>)
 80007e0:	f001 f8ca 	bl	8001978 <HAL_ADC_ConfigChannel>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80007ea:	f000 f9b7 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	3728      	adds	r7, #40	@ 0x28
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	24000120 	.word	0x24000120
 80007fc:	40022000 	.word	0x40022000
 8000800:	14f00020 	.word	0x14f00020
 8000804:	47ff0000 	.word	0x47ff0000

08000808 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800080c:	4b24      	ldr	r3, [pc, #144]	@ (80008a0 <MX_SPI3_Init+0x98>)
 800080e:	4a25      	ldr	r2, [pc, #148]	@ (80008a4 <MX_SPI3_Init+0x9c>)
 8000810:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000812:	4b23      	ldr	r3, [pc, #140]	@ (80008a0 <MX_SPI3_Init+0x98>)
 8000814:	2200      	movs	r2, #0
 8000816:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000818:	4b21      	ldr	r3, [pc, #132]	@ (80008a0 <MX_SPI3_Init+0x98>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800081e:	4b20      	ldr	r3, [pc, #128]	@ (80008a0 <MX_SPI3_Init+0x98>)
 8000820:	2203      	movs	r2, #3
 8000822:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000824:	4b1e      	ldr	r3, [pc, #120]	@ (80008a0 <MX_SPI3_Init+0x98>)
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800082a:	4b1d      	ldr	r3, [pc, #116]	@ (80008a0 <MX_SPI3_Init+0x98>)
 800082c:	2200      	movs	r2, #0
 800082e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8000830:	4b1b      	ldr	r3, [pc, #108]	@ (80008a0 <MX_SPI3_Init+0x98>)
 8000832:	2200      	movs	r2, #0
 8000834:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000836:	4b1a      	ldr	r3, [pc, #104]	@ (80008a0 <MX_SPI3_Init+0x98>)
 8000838:	2200      	movs	r2, #0
 800083a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800083c:	4b18      	ldr	r3, [pc, #96]	@ (80008a0 <MX_SPI3_Init+0x98>)
 800083e:	2200      	movs	r2, #0
 8000840:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000842:	4b17      	ldr	r3, [pc, #92]	@ (80008a0 <MX_SPI3_Init+0x98>)
 8000844:	2200      	movs	r2, #0
 8000846:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000848:	4b15      	ldr	r3, [pc, #84]	@ (80008a0 <MX_SPI3_Init+0x98>)
 800084a:	2200      	movs	r2, #0
 800084c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800084e:	4b14      	ldr	r3, [pc, #80]	@ (80008a0 <MX_SPI3_Init+0x98>)
 8000850:	2200      	movs	r2, #0
 8000852:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000854:	4b12      	ldr	r3, [pc, #72]	@ (80008a0 <MX_SPI3_Init+0x98>)
 8000856:	2200      	movs	r2, #0
 8000858:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800085a:	4b11      	ldr	r3, [pc, #68]	@ (80008a0 <MX_SPI3_Init+0x98>)
 800085c:	2200      	movs	r2, #0
 800085e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000860:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <MX_SPI3_Init+0x98>)
 8000862:	2200      	movs	r2, #0
 8000864:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000866:	4b0e      	ldr	r3, [pc, #56]	@ (80008a0 <MX_SPI3_Init+0x98>)
 8000868:	2200      	movs	r2, #0
 800086a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800086c:	4b0c      	ldr	r3, [pc, #48]	@ (80008a0 <MX_SPI3_Init+0x98>)
 800086e:	2200      	movs	r2, #0
 8000870:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000872:	4b0b      	ldr	r3, [pc, #44]	@ (80008a0 <MX_SPI3_Init+0x98>)
 8000874:	2200      	movs	r2, #0
 8000876:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000878:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <MX_SPI3_Init+0x98>)
 800087a:	2200      	movs	r2, #0
 800087c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800087e:	4b08      	ldr	r3, [pc, #32]	@ (80008a0 <MX_SPI3_Init+0x98>)
 8000880:	2200      	movs	r2, #0
 8000882:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000884:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <MX_SPI3_Init+0x98>)
 8000886:	2200      	movs	r2, #0
 8000888:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800088a:	4805      	ldr	r0, [pc, #20]	@ (80008a0 <MX_SPI3_Init+0x98>)
 800088c:	f007 fcd8 	bl	8008240 <HAL_SPI_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_SPI3_Init+0x92>
  {
    Error_Handler();
 8000896:	f000 f961 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	24000184 	.word	0x24000184
 80008a4:	40003c00 	.word	0x40003c00

080008a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008ac:	4b22      	ldr	r3, [pc, #136]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008ae:	4a23      	ldr	r2, [pc, #140]	@ (800093c <MX_USART1_UART_Init+0x94>)
 80008b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008b2:	4b21      	ldr	r3, [pc, #132]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008ce:	220c      	movs	r2, #12
 80008d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d2:	4b19      	ldr	r3, [pc, #100]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d8:	4b17      	ldr	r3, [pc, #92]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008de:	4b16      	ldr	r3, [pc, #88]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008e4:	4b14      	ldr	r3, [pc, #80]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ea:	4b13      	ldr	r3, [pc, #76]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008f0:	4811      	ldr	r0, [pc, #68]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008f2:	f007 fde4 	bl	80084be <HAL_UART_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008fc:	f000 f92e 	bl	8000b5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000900:	2100      	movs	r1, #0
 8000902:	480d      	ldr	r0, [pc, #52]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 8000904:	f009 fb65 	bl	8009fd2 <HAL_UARTEx_SetTxFifoThreshold>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800090e:	f000 f925 	bl	8000b5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000912:	2100      	movs	r1, #0
 8000914:	4808      	ldr	r0, [pc, #32]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 8000916:	f009 fb9a 	bl	800a04e <HAL_UARTEx_SetRxFifoThreshold>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000920:	f000 f91c 	bl	8000b5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000924:	4804      	ldr	r0, [pc, #16]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 8000926:	f009 fb1b 	bl	8009f60 <HAL_UARTEx_DisableFifoMode>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000930:	f000 f914 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	2400020c 	.word	0x2400020c
 800093c:	40011000 	.word	0x40011000

08000940 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000944:	4b22      	ldr	r3, [pc, #136]	@ (80009d0 <MX_USART2_UART_Init+0x90>)
 8000946:	4a23      	ldr	r2, [pc, #140]	@ (80009d4 <MX_USART2_UART_Init+0x94>)
 8000948:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800094a:	4b21      	ldr	r3, [pc, #132]	@ (80009d0 <MX_USART2_UART_Init+0x90>)
 800094c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000950:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000952:	4b1f      	ldr	r3, [pc, #124]	@ (80009d0 <MX_USART2_UART_Init+0x90>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000958:	4b1d      	ldr	r3, [pc, #116]	@ (80009d0 <MX_USART2_UART_Init+0x90>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800095e:	4b1c      	ldr	r3, [pc, #112]	@ (80009d0 <MX_USART2_UART_Init+0x90>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000964:	4b1a      	ldr	r3, [pc, #104]	@ (80009d0 <MX_USART2_UART_Init+0x90>)
 8000966:	220c      	movs	r2, #12
 8000968:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096a:	4b19      	ldr	r3, [pc, #100]	@ (80009d0 <MX_USART2_UART_Init+0x90>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000970:	4b17      	ldr	r3, [pc, #92]	@ (80009d0 <MX_USART2_UART_Init+0x90>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000976:	4b16      	ldr	r3, [pc, #88]	@ (80009d0 <MX_USART2_UART_Init+0x90>)
 8000978:	2200      	movs	r2, #0
 800097a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800097c:	4b14      	ldr	r3, [pc, #80]	@ (80009d0 <MX_USART2_UART_Init+0x90>)
 800097e:	2200      	movs	r2, #0
 8000980:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000982:	4b13      	ldr	r3, [pc, #76]	@ (80009d0 <MX_USART2_UART_Init+0x90>)
 8000984:	2200      	movs	r2, #0
 8000986:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000988:	4811      	ldr	r0, [pc, #68]	@ (80009d0 <MX_USART2_UART_Init+0x90>)
 800098a:	f007 fd98 	bl	80084be <HAL_UART_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000994:	f000 f8e2 	bl	8000b5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000998:	2100      	movs	r1, #0
 800099a:	480d      	ldr	r0, [pc, #52]	@ (80009d0 <MX_USART2_UART_Init+0x90>)
 800099c:	f009 fb19 	bl	8009fd2 <HAL_UARTEx_SetTxFifoThreshold>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009a6:	f000 f8d9 	bl	8000b5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009aa:	2100      	movs	r1, #0
 80009ac:	4808      	ldr	r0, [pc, #32]	@ (80009d0 <MX_USART2_UART_Init+0x90>)
 80009ae:	f009 fb4e 	bl	800a04e <HAL_UARTEx_SetRxFifoThreshold>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009b8:	f000 f8d0 	bl	8000b5c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 80009bc:	4804      	ldr	r0, [pc, #16]	@ (80009d0 <MX_USART2_UART_Init+0x90>)
 80009be:	f009 fa94 	bl	8009eea <HAL_UARTEx_EnableFifoMode>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80009c8:	f000 f8c8 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	240002a0 	.word	0x240002a0
 80009d4:	40004400 	.word	0x40004400

080009d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	@ 0x28
 80009dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
 80009ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ee:	4b42      	ldr	r3, [pc, #264]	@ (8000af8 <MX_GPIO_Init+0x120>)
 80009f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009f4:	4a40      	ldr	r2, [pc, #256]	@ (8000af8 <MX_GPIO_Init+0x120>)
 80009f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009fa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80009fe:	4b3e      	ldr	r3, [pc, #248]	@ (8000af8 <MX_GPIO_Init+0x120>)
 8000a00:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0c:	4b3a      	ldr	r3, [pc, #232]	@ (8000af8 <MX_GPIO_Init+0x120>)
 8000a0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a12:	4a39      	ldr	r2, [pc, #228]	@ (8000af8 <MX_GPIO_Init+0x120>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a1c:	4b36      	ldr	r3, [pc, #216]	@ (8000af8 <MX_GPIO_Init+0x120>)
 8000a1e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2a:	4b33      	ldr	r3, [pc, #204]	@ (8000af8 <MX_GPIO_Init+0x120>)
 8000a2c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a30:	4a31      	ldr	r2, [pc, #196]	@ (8000af8 <MX_GPIO_Init+0x120>)
 8000a32:	f043 0302 	orr.w	r3, r3, #2
 8000a36:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a3a:	4b2f      	ldr	r3, [pc, #188]	@ (8000af8 <MX_GPIO_Init+0x120>)
 8000a3c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a40:	f003 0302 	and.w	r3, r3, #2
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a48:	4b2b      	ldr	r3, [pc, #172]	@ (8000af8 <MX_GPIO_Init+0x120>)
 8000a4a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a4e:	4a2a      	ldr	r2, [pc, #168]	@ (8000af8 <MX_GPIO_Init+0x120>)
 8000a50:	f043 0304 	orr.w	r3, r3, #4
 8000a54:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a58:	4b27      	ldr	r3, [pc, #156]	@ (8000af8 <MX_GPIO_Init+0x120>)
 8000a5a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a5e:	f003 0304 	and.w	r3, r3, #4
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2140      	movs	r1, #64	@ 0x40
 8000a6a:	4824      	ldr	r0, [pc, #144]	@ (8000afc <MX_GPIO_Init+0x124>)
 8000a6c:	f002 fc9a 	bl	80033a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_GPIO_Port, PIN_Pin, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a76:	4822      	ldr	r0, [pc, #136]	@ (8000b00 <MX_GPIO_Init+0x128>)
 8000a78:	f002 fc94 	bl	80033a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000a7c:	2340      	movs	r3, #64	@ 0x40
 8000a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	481a      	ldr	r0, [pc, #104]	@ (8000afc <MX_GPIO_Init+0x124>)
 8000a94:	f002 fad6 	bl	8003044 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_PUSH_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_PUSH_BUTTON_Pin;
 8000a98:	2380      	movs	r3, #128	@ 0x80
 8000a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4814      	ldr	r0, [pc, #80]	@ (8000afc <MX_GPIO_Init+0x124>)
 8000aac:	f002 faca 	bl	8003044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ab0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ab4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4619      	mov	r1, r3
 8000acc:	480c      	ldr	r0, [pc, #48]	@ (8000b00 <MX_GPIO_Init+0x128>)
 8000ace:	f002 fab9 	bl	8003044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PIN_Pin */
  GPIO_InitStruct.Pin = PIN_Pin;
 8000ad2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PIN_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4805      	ldr	r0, [pc, #20]	@ (8000b00 <MX_GPIO_Init+0x128>)
 8000aec:	f002 faaa 	bl	8003044 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000af0:	bf00      	nop
 8000af2:	3728      	adds	r7, #40	@ 0x28
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	58024400 	.word	0x58024400
 8000afc:	58020800 	.word	0x58020800
 8000b00:	58020000 	.word	0x58020000

08000b04 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b16:	f001 fcb9 	bl	800248c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000b26:	231f      	movs	r3, #31
 8000b28:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000b2a:	2387      	movs	r3, #135	@ 0x87
 8000b2c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000b32:	2300      	movs	r3, #0
 8000b34:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b36:	2301      	movs	r3, #1
 8000b38:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000b42:	2300      	movs	r3, #0
 8000b44:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b46:	463b      	mov	r3, r7
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f001 fcd7 	bl	80024fc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b4e:	2004      	movs	r0, #4
 8000b50:	f001 fcb4 	bl	80024bc <HAL_MPU_Enable>

}
 8000b54:	bf00      	nop
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b60:	b672      	cpsid	i
}
 8000b62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <Error_Handler+0x8>

08000b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6e:	4b15      	ldr	r3, [pc, #84]	@ (8000bc4 <HAL_MspInit+0x5c>)
 8000b70:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000b74:	4a13      	ldr	r2, [pc, #76]	@ (8000bc4 <HAL_MspInit+0x5c>)
 8000b76:	f043 0302 	orr.w	r3, r3, #2
 8000b7a:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000b7e:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <HAL_MspInit+0x5c>)
 8000b80:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000b84:	f003 0302 	and.w	r3, r3, #2
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8000b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc4 <HAL_MspInit+0x5c>)
 8000b8e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000b92:	4a0c      	ldr	r2, [pc, #48]	@ (8000bc4 <HAL_MspInit+0x5c>)
 8000b94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b98:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000b9c:	4b09      	ldr	r3, [pc, #36]	@ (8000bc4 <HAL_MspInit+0x5c>)
 8000b9e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000ba2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8000baa:	2000      	movs	r0, #0
 8000bac:	f000 fbb2 	bl	8001314 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8000bb0:	f000 fbd8 	bl	8001364 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f000 fbc1 	bl	800133c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	58024400 	.word	0x58024400

08000bc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b0bc      	sub	sp, #240	@ 0xf0
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000be0:	f107 0318 	add.w	r3, r7, #24
 8000be4:	22c0      	movs	r2, #192	@ 0xc0
 8000be6:	2100      	movs	r1, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f00d faf7 	bl	800e1dc <memset>
  if(hadc->Instance==ADC1)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a3a      	ldr	r2, [pc, #232]	@ (8000cdc <HAL_ADC_MspInit+0x114>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d16d      	bne.n	8000cd4 <HAL_ADC_MspInit+0x10c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000bf8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000bfc:	f04f 0300 	mov.w	r3, #0
 8000c00:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000c04:	2301      	movs	r3, #1
 8000c06:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 8000c08:	2308      	movs	r3, #8
 8000c0a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 3;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000c10:	2302      	movs	r3, #2
 8000c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000c14:	2302      	movs	r3, #2
 8000c16:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000c18:	23c0      	movs	r3, #192	@ 0xc0
 8000c1a:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000c24:	2300      	movs	r3, #0
 8000c26:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c2a:	f107 0318 	add.w	r3, r7, #24
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f004 fefc 	bl	8005a2c <HAL_RCCEx_PeriphCLKConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8000c3a:	f7ff ff8f 	bl	8000b5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000c3e:	4b28      	ldr	r3, [pc, #160]	@ (8000ce0 <HAL_ADC_MspInit+0x118>)
 8000c40:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000c44:	4a26      	ldr	r2, [pc, #152]	@ (8000ce0 <HAL_ADC_MspInit+0x118>)
 8000c46:	f043 0320 	orr.w	r3, r3, #32
 8000c4a:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000c4e:	4b24      	ldr	r3, [pc, #144]	@ (8000ce0 <HAL_ADC_MspInit+0x118>)
 8000c50:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000c54:	f003 0320 	and.w	r3, r3, #32
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5c:	4b20      	ldr	r3, [pc, #128]	@ (8000ce0 <HAL_ADC_MspInit+0x118>)
 8000c5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c62:	4a1f      	ldr	r2, [pc, #124]	@ (8000ce0 <HAL_ADC_MspInit+0x118>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce0 <HAL_ADC_MspInit+0x118>)
 8000c6e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ce0 <HAL_ADC_MspInit+0x118>)
 8000c7c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c80:	4a17      	ldr	r2, [pc, #92]	@ (8000ce0 <HAL_ADC_MspInit+0x118>)
 8000c82:	f043 0302 	orr.w	r3, r3, #2
 8000c86:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c8a:	4b15      	ldr	r3, [pc, #84]	@ (8000ce0 <HAL_ADC_MspInit+0x118>)
 8000c8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c90:	f003 0302 	and.w	r3, r3, #2
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_INP3
    PA7     ------> ADC1_INN3
    PB0     ------> ADC1_INN5
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c98:	23c0      	movs	r3, #192	@ 0xc0
 8000c9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000caa:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000cae:	4619      	mov	r1, r3
 8000cb0:	480c      	ldr	r0, [pc, #48]	@ (8000ce4 <HAL_ADC_MspInit+0x11c>)
 8000cb2:	f002 f9c7 	bl	8003044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4806      	ldr	r0, [pc, #24]	@ (8000ce8 <HAL_ADC_MspInit+0x120>)
 8000cd0:	f002 f9b8 	bl	8003044 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000cd4:	bf00      	nop
 8000cd6:	37f0      	adds	r7, #240	@ 0xf0
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40022000 	.word	0x40022000
 8000ce0:	58024400 	.word	0x58024400
 8000ce4:	58020000 	.word	0x58020000
 8000ce8:	58020400 	.word	0x58020400

08000cec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b0bc      	sub	sp, #240	@ 0xf0
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d04:	f107 0318 	add.w	r3, r7, #24
 8000d08:	22c0      	movs	r2, #192	@ 0xc0
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f00d fa65 	bl	800e1dc <memset>
  if(hspi->Instance==SPI3)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a4b      	ldr	r2, [pc, #300]	@ (8000e44 <HAL_SPI_MspInit+0x158>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	f040 808f 	bne.w	8000e3c <HAL_SPI_MspInit+0x150>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8000d1e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d22:	f04f 0300 	mov.w	r3, #0
 8000d26:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d2e:	f107 0318 	add.w	r3, r7, #24
 8000d32:	4618      	mov	r0, r3
 8000d34:	f004 fe7a 	bl	8005a2c <HAL_RCCEx_PeriphCLKConfig>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8000d3e:	f7ff ff0d 	bl	8000b5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d42:	4b41      	ldr	r3, [pc, #260]	@ (8000e48 <HAL_SPI_MspInit+0x15c>)
 8000d44:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000d48:	4a3f      	ldr	r2, [pc, #252]	@ (8000e48 <HAL_SPI_MspInit+0x15c>)
 8000d4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d4e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000d52:	4b3d      	ldr	r3, [pc, #244]	@ (8000e48 <HAL_SPI_MspInit+0x15c>)
 8000d54:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000d58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d5c:	617b      	str	r3, [r7, #20]
 8000d5e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d60:	4b39      	ldr	r3, [pc, #228]	@ (8000e48 <HAL_SPI_MspInit+0x15c>)
 8000d62:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d66:	4a38      	ldr	r2, [pc, #224]	@ (8000e48 <HAL_SPI_MspInit+0x15c>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d70:	4b35      	ldr	r3, [pc, #212]	@ (8000e48 <HAL_SPI_MspInit+0x15c>)
 8000d72:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7e:	4b32      	ldr	r3, [pc, #200]	@ (8000e48 <HAL_SPI_MspInit+0x15c>)
 8000d80:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d84:	4a30      	ldr	r2, [pc, #192]	@ (8000e48 <HAL_SPI_MspInit+0x15c>)
 8000d86:	f043 0304 	orr.w	r3, r3, #4
 8000d8a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d8e:	4b2e      	ldr	r3, [pc, #184]	@ (8000e48 <HAL_SPI_MspInit+0x15c>)
 8000d90:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d94:	f003 0304 	and.w	r3, r3, #4
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9c:	4b2a      	ldr	r3, [pc, #168]	@ (8000e48 <HAL_SPI_MspInit+0x15c>)
 8000d9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000da2:	4a29      	ldr	r2, [pc, #164]	@ (8000e48 <HAL_SPI_MspInit+0x15c>)
 8000da4:	f043 0302 	orr.w	r3, r3, #2
 8000da8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000dac:	4b26      	ldr	r3, [pc, #152]	@ (8000e48 <HAL_SPI_MspInit+0x15c>)
 8000dae:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000dba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000dbe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dd4:	2306      	movs	r3, #6
 8000dd6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dda:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000dde:	4619      	mov	r1, r3
 8000de0:	481a      	ldr	r0, [pc, #104]	@ (8000e4c <HAL_SPI_MspInit+0x160>)
 8000de2:	f002 f92f 	bl	8003044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000de6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000dea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e00:	2306      	movs	r3, #6
 8000e02:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e06:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4810      	ldr	r0, [pc, #64]	@ (8000e50 <HAL_SPI_MspInit+0x164>)
 8000e0e:	f002 f919 	bl	8003044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e12:	2320      	movs	r3, #32
 8000e14:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e24:	2300      	movs	r3, #0
 8000e26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000e2a:	2307      	movs	r3, #7
 8000e2c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e30:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000e34:	4619      	mov	r1, r3
 8000e36:	4807      	ldr	r0, [pc, #28]	@ (8000e54 <HAL_SPI_MspInit+0x168>)
 8000e38:	f002 f904 	bl	8003044 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000e3c:	bf00      	nop
 8000e3e:	37f0      	adds	r7, #240	@ 0xf0
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40003c00 	.word	0x40003c00
 8000e48:	58024400 	.word	0x58024400
 8000e4c:	58020000 	.word	0x58020000
 8000e50:	58020800 	.word	0x58020800
 8000e54:	58020400 	.word	0x58020400

08000e58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b0bc      	sub	sp, #240	@ 0xf0
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e70:	f107 0318 	add.w	r3, r7, #24
 8000e74:	22c0      	movs	r2, #192	@ 0xc0
 8000e76:	2100      	movs	r1, #0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f00d f9af 	bl	800e1dc <memset>
  if(huart->Instance==USART1)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a51      	ldr	r2, [pc, #324]	@ (8000fc8 <HAL_UART_MspInit+0x170>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d147      	bne.n	8000f18 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e88:	f04f 0201 	mov.w	r2, #1
 8000e8c:	f04f 0300 	mov.w	r3, #0
 8000e90:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8000e94:	2300      	movs	r3, #0
 8000e96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e9a:	f107 0318 	add.w	r3, r7, #24
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f004 fdc4 	bl	8005a2c <HAL_RCCEx_PeriphCLKConfig>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000eaa:	f7ff fe57 	bl	8000b5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000eae:	4b47      	ldr	r3, [pc, #284]	@ (8000fcc <HAL_UART_MspInit+0x174>)
 8000eb0:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000eb4:	4a45      	ldr	r2, [pc, #276]	@ (8000fcc <HAL_UART_MspInit+0x174>)
 8000eb6:	f043 0310 	orr.w	r3, r3, #16
 8000eba:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000ebe:	4b43      	ldr	r3, [pc, #268]	@ (8000fcc <HAL_UART_MspInit+0x174>)
 8000ec0:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000ec4:	f003 0310 	and.w	r3, r3, #16
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ecc:	4b3f      	ldr	r3, [pc, #252]	@ (8000fcc <HAL_UART_MspInit+0x174>)
 8000ece:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ed2:	4a3e      	ldr	r2, [pc, #248]	@ (8000fcc <HAL_UART_MspInit+0x174>)
 8000ed4:	f043 0302 	orr.w	r3, r3, #2
 8000ed8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000edc:	4b3b      	ldr	r3, [pc, #236]	@ (8000fcc <HAL_UART_MspInit+0x174>)
 8000ede:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000eea:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000eee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000f04:	2304      	movs	r3, #4
 8000f06:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f0e:	4619      	mov	r1, r3
 8000f10:	482f      	ldr	r0, [pc, #188]	@ (8000fd0 <HAL_UART_MspInit+0x178>)
 8000f12:	f002 f897 	bl	8003044 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f16:	e052      	b.n	8000fbe <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART2)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a2d      	ldr	r2, [pc, #180]	@ (8000fd4 <HAL_UART_MspInit+0x17c>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d14d      	bne.n	8000fbe <HAL_UART_MspInit+0x166>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f22:	f04f 0202 	mov.w	r2, #2
 8000f26:	f04f 0300 	mov.w	r3, #0
 8000f2a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f34:	f107 0318 	add.w	r3, r7, #24
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f004 fd77 	bl	8005a2c <HAL_RCCEx_PeriphCLKConfig>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8000f44:	f7ff fe0a 	bl	8000b5c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f48:	4b20      	ldr	r3, [pc, #128]	@ (8000fcc <HAL_UART_MspInit+0x174>)
 8000f4a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000f4e:	4a1f      	ldr	r2, [pc, #124]	@ (8000fcc <HAL_UART_MspInit+0x174>)
 8000f50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f54:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000f58:	4b1c      	ldr	r3, [pc, #112]	@ (8000fcc <HAL_UART_MspInit+0x174>)
 8000f5a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	4b19      	ldr	r3, [pc, #100]	@ (8000fcc <HAL_UART_MspInit+0x174>)
 8000f68:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f6c:	4a17      	ldr	r2, [pc, #92]	@ (8000fcc <HAL_UART_MspInit+0x174>)
 8000f6e:	f043 0301 	orr.w	r3, r3, #1
 8000f72:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f76:	4b15      	ldr	r3, [pc, #84]	@ (8000fcc <HAL_UART_MspInit+0x174>)
 8000f78:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f84:	230c      	movs	r3, #12
 8000f86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f9c:	2307      	movs	r3, #7
 8000f9e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	480b      	ldr	r0, [pc, #44]	@ (8000fd8 <HAL_UART_MspInit+0x180>)
 8000faa:	f002 f84b 	bl	8003044 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2026      	movs	r0, #38	@ 0x26
 8000fb4:	f001 fa35 	bl	8002422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fb8:	2026      	movs	r0, #38	@ 0x26
 8000fba:	f001 fa4c 	bl	8002456 <HAL_NVIC_EnableIRQ>
}
 8000fbe:	bf00      	nop
 8000fc0:	37f0      	adds	r7, #240	@ 0xf0
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40011000 	.word	0x40011000
 8000fcc:	58024400 	.word	0x58024400
 8000fd0:	58020400 	.word	0x58020400
 8000fd4:	40004400 	.word	0x40004400
 8000fd8:	58020000 	.word	0x58020000

08000fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <NMI_Handler+0x4>

08000fe4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <HardFault_Handler+0x4>

08000fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <MemManage_Handler+0x4>

08000ff4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <BusFault_Handler+0x4>

08000ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <UsageFault_Handler+0x4>

08001004 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001032:	f000 f92b 	bl	800128c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001040:	4802      	ldr	r0, [pc, #8]	@ (800104c <USART2_IRQHandler+0x10>)
 8001042:	f007 fa8d 	bl	8008560 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	240002a0 	.word	0x240002a0

08001050 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001054:	4802      	ldr	r0, [pc, #8]	@ (8001060 <OTG_HS_IRQHandler+0x10>)
 8001056:	f002 fb19 	bl	800368c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	24001818 	.word	0x24001818

08001064 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001068:	4b32      	ldr	r3, [pc, #200]	@ (8001134 <SystemInit+0xd0>)
 800106a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800106e:	4a31      	ldr	r2, [pc, #196]	@ (8001134 <SystemInit+0xd0>)
 8001070:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001074:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001078:	4b2f      	ldr	r3, [pc, #188]	@ (8001138 <SystemInit+0xd4>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 030f 	and.w	r3, r3, #15
 8001080:	2b02      	cmp	r3, #2
 8001082:	d807      	bhi.n	8001094 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001084:	4b2c      	ldr	r3, [pc, #176]	@ (8001138 <SystemInit+0xd4>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f023 030f 	bic.w	r3, r3, #15
 800108c:	4a2a      	ldr	r2, [pc, #168]	@ (8001138 <SystemInit+0xd4>)
 800108e:	f043 0303 	orr.w	r3, r3, #3
 8001092:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001094:	4b29      	ldr	r3, [pc, #164]	@ (800113c <SystemInit+0xd8>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a28      	ldr	r2, [pc, #160]	@ (800113c <SystemInit+0xd8>)
 800109a:	f043 0301 	orr.w	r3, r3, #1
 800109e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010a0:	4b26      	ldr	r3, [pc, #152]	@ (800113c <SystemInit+0xd8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80010a6:	4b25      	ldr	r3, [pc, #148]	@ (800113c <SystemInit+0xd8>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	4924      	ldr	r1, [pc, #144]	@ (800113c <SystemInit+0xd8>)
 80010ac:	4b24      	ldr	r3, [pc, #144]	@ (8001140 <SystemInit+0xdc>)
 80010ae:	4013      	ands	r3, r2
 80010b0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010b2:	4b21      	ldr	r3, [pc, #132]	@ (8001138 <SystemInit+0xd4>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 030c 	and.w	r3, r3, #12
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d007      	beq.n	80010ce <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010be:	4b1e      	ldr	r3, [pc, #120]	@ (8001138 <SystemInit+0xd4>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f023 030f 	bic.w	r3, r3, #15
 80010c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001138 <SystemInit+0xd4>)
 80010c8:	f043 0303 	orr.w	r3, r3, #3
 80010cc:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80010ce:	4b1b      	ldr	r3, [pc, #108]	@ (800113c <SystemInit+0xd8>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80010d4:	4b19      	ldr	r3, [pc, #100]	@ (800113c <SystemInit+0xd8>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80010da:	4b18      	ldr	r3, [pc, #96]	@ (800113c <SystemInit+0xd8>)
 80010dc:	2200      	movs	r2, #0
 80010de:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010e0:	4b16      	ldr	r3, [pc, #88]	@ (800113c <SystemInit+0xd8>)
 80010e2:	4a18      	ldr	r2, [pc, #96]	@ (8001144 <SystemInit+0xe0>)
 80010e4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010e6:	4b15      	ldr	r3, [pc, #84]	@ (800113c <SystemInit+0xd8>)
 80010e8:	4a17      	ldr	r2, [pc, #92]	@ (8001148 <SystemInit+0xe4>)
 80010ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010ec:	4b13      	ldr	r3, [pc, #76]	@ (800113c <SystemInit+0xd8>)
 80010ee:	4a17      	ldr	r2, [pc, #92]	@ (800114c <SystemInit+0xe8>)
 80010f0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010f2:	4b12      	ldr	r3, [pc, #72]	@ (800113c <SystemInit+0xd8>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010f8:	4b10      	ldr	r3, [pc, #64]	@ (800113c <SystemInit+0xd8>)
 80010fa:	4a14      	ldr	r2, [pc, #80]	@ (800114c <SystemInit+0xe8>)
 80010fc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010fe:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <SystemInit+0xd8>)
 8001100:	2200      	movs	r2, #0
 8001102:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001104:	4b0d      	ldr	r3, [pc, #52]	@ (800113c <SystemInit+0xd8>)
 8001106:	4a11      	ldr	r2, [pc, #68]	@ (800114c <SystemInit+0xe8>)
 8001108:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800110a:	4b0c      	ldr	r3, [pc, #48]	@ (800113c <SystemInit+0xd8>)
 800110c:	2200      	movs	r2, #0
 800110e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001110:	4b0a      	ldr	r3, [pc, #40]	@ (800113c <SystemInit+0xd8>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a09      	ldr	r2, [pc, #36]	@ (800113c <SystemInit+0xd8>)
 8001116:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800111a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800111c:	4b07      	ldr	r3, [pc, #28]	@ (800113c <SystemInit+0xd8>)
 800111e:	2200      	movs	r2, #0
 8001120:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001122:	4b0b      	ldr	r3, [pc, #44]	@ (8001150 <SystemInit+0xec>)
 8001124:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001128:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000ed00 	.word	0xe000ed00
 8001138:	52002000 	.word	0x52002000
 800113c:	58024400 	.word	0x58024400
 8001140:	eaf6ed7f 	.word	0xeaf6ed7f
 8001144:	02020200 	.word	0x02020200
 8001148:	01ff0000 	.word	0x01ff0000
 800114c:	01010280 	.word	0x01010280
 8001150:	52004000 	.word	0x52004000

08001154 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001154:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800118c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001158:	f7ff ff84 	bl	8001064 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800115c:	480c      	ldr	r0, [pc, #48]	@ (8001190 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800115e:	490d      	ldr	r1, [pc, #52]	@ (8001194 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001160:	4a0d      	ldr	r2, [pc, #52]	@ (8001198 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001162:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001164:	e002      	b.n	800116c <LoopCopyDataInit>

08001166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116a:	3304      	adds	r3, #4

0800116c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800116c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001170:	d3f9      	bcc.n	8001166 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001172:	4a0a      	ldr	r2, [pc, #40]	@ (800119c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001174:	4c0a      	ldr	r4, [pc, #40]	@ (80011a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001178:	e001      	b.n	800117e <LoopFillZerobss>

0800117a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800117c:	3204      	adds	r2, #4

0800117e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001180:	d3fb      	bcc.n	800117a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001182:	f00d f833 	bl	800e1ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001186:	f7ff fa29 	bl	80005dc <main>
  bx  lr
 800118a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800118c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001190:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001194:	24000104 	.word	0x24000104
  ldr r2, =_sidata
 8001198:	0800e2dc 	.word	0x0800e2dc
  ldr r2, =_sbss
 800119c:	24000104 	.word	0x24000104
  ldr r4, =_ebss
 80011a0:	24001f1c 	.word	0x24001f1c

080011a4 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a4:	e7fe      	b.n	80011a4 <ADC_IRQHandler>
	...

080011a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ae:	2003      	movs	r0, #3
 80011b0:	f001 f92c 	bl	800240c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80011b4:	f004 fa64 	bl	8005680 <HAL_RCC_GetSysClockFreq>
 80011b8:	4602      	mov	r2, r0
 80011ba:	4b15      	ldr	r3, [pc, #84]	@ (8001210 <HAL_Init+0x68>)
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	0a1b      	lsrs	r3, r3, #8
 80011c0:	f003 030f 	and.w	r3, r3, #15
 80011c4:	4913      	ldr	r1, [pc, #76]	@ (8001214 <HAL_Init+0x6c>)
 80011c6:	5ccb      	ldrb	r3, [r1, r3]
 80011c8:	f003 031f 	and.w	r3, r3, #31
 80011cc:	fa22 f303 	lsr.w	r3, r2, r3
 80011d0:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80011d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001210 <HAL_Init+0x68>)
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	f003 030f 	and.w	r3, r3, #15
 80011da:	4a0e      	ldr	r2, [pc, #56]	@ (8001214 <HAL_Init+0x6c>)
 80011dc:	5cd3      	ldrb	r3, [r2, r3]
 80011de:	f003 031f 	and.w	r3, r3, #31
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	fa22 f303 	lsr.w	r3, r2, r3
 80011e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001218 <HAL_Init+0x70>)
 80011ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011ec:	4a0b      	ldr	r2, [pc, #44]	@ (800121c <HAL_Init+0x74>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011f2:	200f      	movs	r0, #15
 80011f4:	f000 f814 	bl	8001220 <HAL_InitTick>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e002      	b.n	8001208 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001202:	f7ff fcb1 	bl	8000b68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	58024400 	.word	0x58024400
 8001214:	0800e294 	.word	0x0800e294
 8001218:	24000004 	.word	0x24000004
 800121c:	24000000 	.word	0x24000000

08001220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001228:	4b15      	ldr	r3, [pc, #84]	@ (8001280 <HAL_InitTick+0x60>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d101      	bne.n	8001234 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e021      	b.n	8001278 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001234:	4b13      	ldr	r3, [pc, #76]	@ (8001284 <HAL_InitTick+0x64>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b11      	ldr	r3, [pc, #68]	@ (8001280 <HAL_InitTick+0x60>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	4619      	mov	r1, r3
 800123e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001242:	fbb3 f3f1 	udiv	r3, r3, r1
 8001246:	fbb2 f3f3 	udiv	r3, r2, r3
 800124a:	4618      	mov	r0, r3
 800124c:	f001 f911 	bl	8002472 <HAL_SYSTICK_Config>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e00e      	b.n	8001278 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b0f      	cmp	r3, #15
 800125e:	d80a      	bhi.n	8001276 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001260:	2200      	movs	r2, #0
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	f04f 30ff 	mov.w	r0, #4294967295
 8001268:	f001 f8db 	bl	8002422 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800126c:	4a06      	ldr	r2, [pc, #24]	@ (8001288 <HAL_InitTick+0x68>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001272:	2300      	movs	r3, #0
 8001274:	e000      	b.n	8001278 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
}
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	2400000c 	.word	0x2400000c
 8001284:	24000000 	.word	0x24000000
 8001288:	24000008 	.word	0x24000008

0800128c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001290:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <HAL_IncTick+0x20>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <HAL_IncTick+0x24>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4413      	add	r3, r2
 800129c:	4a04      	ldr	r2, [pc, #16]	@ (80012b0 <HAL_IncTick+0x24>)
 800129e:	6013      	str	r3, [r2, #0]
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	2400000c 	.word	0x2400000c
 80012b0:	24000334 	.word	0x24000334

080012b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return uwTick;
 80012b8:	4b03      	ldr	r3, [pc, #12]	@ (80012c8 <HAL_GetTick+0x14>)
 80012ba:	681b      	ldr	r3, [r3, #0]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	24000334 	.word	0x24000334

080012cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012d4:	f7ff ffee 	bl	80012b4 <HAL_GetTick>
 80012d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e4:	d005      	beq.n	80012f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001310 <HAL_Delay+0x44>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	461a      	mov	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4413      	add	r3, r2
 80012f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012f2:	bf00      	nop
 80012f4:	f7ff ffde 	bl	80012b4 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	429a      	cmp	r2, r3
 8001302:	d8f7      	bhi.n	80012f4 <HAL_Delay+0x28>
  {
  }
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	2400000c 	.word	0x2400000c

08001314 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT4 around 1.5 V.
  *                                                This requires VDDA equal to or higher than 1.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 800131c:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001324:	4904      	ldr	r1, [pc, #16]	@ (8001338 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4313      	orrs	r3, r2
 800132a:	600b      	str	r3, [r1, #0]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	58003c00 	.word	0x58003c00

0800133c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001344:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f023 0202 	bic.w	r2, r3, #2
 800134c:	4904      	ldr	r1, [pc, #16]	@ (8001360 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4313      	orrs	r3, r2
 8001352:	600b      	str	r3, [r1, #0]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	58003c00 	.word	0x58003c00

08001364 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 800136a:	4b0f      	ldr	r3, [pc, #60]	@ (80013a8 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a0e      	ldr	r2, [pc, #56]	@ (80013a8 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001376:	f7ff ff9d 	bl	80012b4 <HAL_GetTick>
 800137a:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 800137c:	e008      	b.n	8001390 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 800137e:	f7ff ff99 	bl	80012b4 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b0a      	cmp	r3, #10
 800138a:	d901      	bls.n	8001390 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e006      	b.n	800139e <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8001390:	4b05      	ldr	r3, [pc, #20]	@ (80013a8 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0308 	and.w	r3, r3, #8
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0f0      	beq.n	800137e <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	58003c00 	.word	0x58003c00

080013ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	431a      	orrs	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	609a      	str	r2, [r3, #8]
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	431a      	orrs	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	609a      	str	r2, [r3, #8]
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001408:	4618      	mov	r0, r3
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001414:	b480      	push	{r7}
 8001416:	b087      	sub	sp, #28
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
 8001420:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	3360      	adds	r3, #96	@ 0x60
 8001426:	461a      	mov	r2, r3
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4413      	add	r3, r2
 800142e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	430b      	orrs	r3, r1
 8001442:	431a      	orrs	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001448:	bf00      	nop
 800144a:	371c      	adds	r7, #28
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	f003 031f 	and.w	r3, r3, #31
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	fa01 f303 	lsl.w	r3, r1, r3
 8001474:	431a      	orrs	r2, r3
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	611a      	str	r2, [r3, #16]
}
 800147a:	bf00      	nop
 800147c:	3714      	adds	r7, #20
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001486:	b480      	push	{r7}
 8001488:	b087      	sub	sp, #28
 800148a:	af00      	add	r7, sp, #0
 800148c:	60f8      	str	r0, [r7, #12]
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	3360      	adds	r3, #96	@ 0x60
 8001496:	461a      	mov	r2, r3
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	431a      	orrs	r2, r3
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	601a      	str	r2, [r3, #0]
  }
}
 80014b0:	bf00      	nop
 80014b2:	371c      	adds	r7, #28
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80014bc:	b480      	push	{r7}
 80014be:	b087      	sub	sp, #28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	3330      	adds	r3, #48	@ 0x30
 80014cc:	461a      	mov	r2, r3
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	0a1b      	lsrs	r3, r3, #8
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	f003 030c 	and.w	r3, r3, #12
 80014d8:	4413      	add	r3, r2
 80014da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	f003 031f 	and.w	r3, r3, #31
 80014e6:	211f      	movs	r1, #31
 80014e8:	fa01 f303 	lsl.w	r3, r1, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	401a      	ands	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	0e9b      	lsrs	r3, r3, #26
 80014f4:	f003 011f 	and.w	r1, r3, #31
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	f003 031f 	and.w	r3, r3, #31
 80014fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001502:	431a      	orrs	r2, r3
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001508:	bf00      	nop
 800150a:	371c      	adds	r7, #28
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001514:	b480      	push	{r7}
 8001516:	b087      	sub	sp, #28
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	3314      	adds	r3, #20
 8001524:	461a      	mov	r2, r3
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	0e5b      	lsrs	r3, r3, #25
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	4413      	add	r3, r2
 8001532:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	0d1b      	lsrs	r3, r3, #20
 800153c:	f003 031f 	and.w	r3, r3, #31
 8001540:	2107      	movs	r1, #7
 8001542:	fa01 f303 	lsl.w	r3, r1, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	401a      	ands	r2, r3
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	0d1b      	lsrs	r3, r3, #20
 800154e:	f003 031f 	and.w	r3, r3, #31
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	fa01 f303 	lsl.w	r3, r1, r3
 8001558:	431a      	orrs	r2, r3
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800155e:	bf00      	nop
 8001560:	371c      	adds	r7, #28
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
	...

0800156c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001584:	43db      	mvns	r3, r3
 8001586:	401a      	ands	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f003 0318 	and.w	r3, r3, #24
 800158e:	4908      	ldr	r1, [pc, #32]	@ (80015b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001590:	40d9      	lsrs	r1, r3
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	400b      	ands	r3, r1
 8001596:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800159a:	431a      	orrs	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80015a2:	bf00      	nop
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	000fffff 	.word	0x000fffff

080015b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	4b04      	ldr	r3, [pc, #16]	@ (80015d4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80015c2:	4013      	ands	r3, r2
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	6093      	str	r3, [r2, #8]
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	5fffffc0 	.word	0x5fffffc0

080015d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80015e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80015ec:	d101      	bne.n	80015f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80015ee:	2301      	movs	r3, #1
 80015f0:	e000      	b.n	80015f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689a      	ldr	r2, [r3, #8]
 800160c:	4b05      	ldr	r3, [pc, #20]	@ (8001624 <LL_ADC_EnableInternalRegulator+0x24>)
 800160e:	4013      	ands	r3, r2
 8001610:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	6fffffc0 	.word	0x6fffffc0

08001628 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001638:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800163c:	d101      	bne.n	8001642 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800163e:	2301      	movs	r3, #1
 8001640:	e000      	b.n	8001644 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	2b01      	cmp	r3, #1
 8001662:	d101      	bne.n	8001668 <LL_ADC_IsEnabled+0x18>
 8001664:	2301      	movs	r3, #1
 8001666:	e000      	b.n	800166a <LL_ADC_IsEnabled+0x1a>
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 0304 	and.w	r3, r3, #4
 8001686:	2b04      	cmp	r3, #4
 8001688:	d101      	bne.n	800168e <LL_ADC_REG_IsConversionOngoing+0x18>
 800168a:	2301      	movs	r3, #1
 800168c:	e000      	b.n	8001690 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f003 0308 	and.w	r3, r3, #8
 80016ac:	2b08      	cmp	r3, #8
 80016ae:	d101      	bne.n	80016b4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80016b0:	2301      	movs	r3, #1
 80016b2:	e000      	b.n	80016b6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
	...

080016c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016c4:	b590      	push	{r4, r7, lr}
 80016c6:	b089      	sub	sp, #36	@ 0x24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016cc:	2300      	movs	r3, #0
 80016ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e138      	b.n	8001950 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d109      	bne.n	8001700 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff fa6b 	bl	8000bc8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ff67 	bl	80015d8 <LL_ADC_IsDeepPowerDownEnabled>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d004      	beq.n	800171a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff4d 	bl	80015b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff ff82 	bl	8001628 <LL_ADC_IsInternalRegulatorEnabled>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d114      	bne.n	8001754 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff ff66 	bl	8001600 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001734:	4b88      	ldr	r3, [pc, #544]	@ (8001958 <HAL_ADC_Init+0x294>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	099b      	lsrs	r3, r3, #6
 800173a:	4a88      	ldr	r2, [pc, #544]	@ (800195c <HAL_ADC_Init+0x298>)
 800173c:	fba2 2303 	umull	r2, r3, r2, r3
 8001740:	099b      	lsrs	r3, r3, #6
 8001742:	3301      	adds	r3, #1
 8001744:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001746:	e002      	b.n	800174e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	3b01      	subs	r3, #1
 800174c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1f9      	bne.n	8001748 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ff65 	bl	8001628 <LL_ADC_IsInternalRegulatorEnabled>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d10d      	bne.n	8001780 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001768:	f043 0210 	orr.w	r2, r3, #16
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001774:	f043 0201 	orr.w	r2, r3, #1
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff76 	bl	8001676 <LL_ADC_REG_IsConversionOngoing>
 800178a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001790:	f003 0310 	and.w	r3, r3, #16
 8001794:	2b00      	cmp	r3, #0
 8001796:	f040 80d2 	bne.w	800193e <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	2b00      	cmp	r3, #0
 800179e:	f040 80ce 	bne.w	800193e <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017a6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80017aa:	f043 0202 	orr.w	r2, r3, #2
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff ff4a 	bl	8001650 <LL_ADC_IsEnabled>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d110      	bne.n	80017e4 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017c2:	4867      	ldr	r0, [pc, #412]	@ (8001960 <HAL_ADC_Init+0x29c>)
 80017c4:	f7ff ff44 	bl	8001650 <LL_ADC_IsEnabled>
 80017c8:	4604      	mov	r4, r0
 80017ca:	4866      	ldr	r0, [pc, #408]	@ (8001964 <HAL_ADC_Init+0x2a0>)
 80017cc:	f7ff ff40 	bl	8001650 <LL_ADC_IsEnabled>
 80017d0:	4603      	mov	r3, r0
 80017d2:	4323      	orrs	r3, r4
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d105      	bne.n	80017e4 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	4619      	mov	r1, r3
 80017de:	4862      	ldr	r0, [pc, #392]	@ (8001968 <HAL_ADC_Init+0x2a4>)
 80017e0:	f7ff fde4 	bl	80013ac <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	7d5b      	ldrb	r3, [r3, #21]
 80017e8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017ee:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 80017f4:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	7f1b      	ldrb	r3, [r3, #28]
 80017fa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017fc:	4313      	orrs	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	7f1b      	ldrb	r3, [r3, #28]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d106      	bne.n	8001816 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	3b01      	subs	r3, #1
 800180e:	045b      	lsls	r3, r3, #17
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4313      	orrs	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181a:	2b00      	cmp	r3, #0
 800181c:	d009      	beq.n	8001832 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001822:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800182a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68da      	ldr	r2, [r3, #12]
 8001838:	4b4c      	ldr	r3, [pc, #304]	@ (800196c <HAL_ADC_Init+0x2a8>)
 800183a:	4013      	ands	r3, r2
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	6812      	ldr	r2, [r2, #0]
 8001840:	69b9      	ldr	r1, [r7, #24]
 8001842:	430b      	orrs	r3, r1
 8001844:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff ff13 	bl	8001676 <LL_ADC_REG_IsConversionOngoing>
 8001850:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff ff20 	bl	800169c <LL_ADC_INJ_IsConversionOngoing>
 800185c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d14a      	bne.n	80018fa <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d147      	bne.n	80018fa <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	7d1b      	ldrb	r3, [r3, #20]
 800186e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	68da      	ldr	r2, [r3, #12]
 800187e:	4b3c      	ldr	r3, [pc, #240]	@ (8001970 <HAL_ADC_Init+0x2ac>)
 8001880:	4013      	ands	r3, r2
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	6812      	ldr	r2, [r2, #0]
 8001886:	69b9      	ldr	r1, [r7, #24]
 8001888:	430b      	orrs	r3, r1
 800188a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001892:	2b01      	cmp	r3, #1
 8001894:	d11b      	bne.n	80018ce <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800189a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	691a      	ldr	r2, [r3, #16]
 80018a2:	4b34      	ldr	r3, [pc, #208]	@ (8001974 <HAL_ADC_Init+0x2b0>)
 80018a4:	4013      	ands	r3, r2
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80018aa:	3a01      	subs	r2, #1
 80018ac:	0411      	lsls	r1, r2, #16
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80018b2:	4311      	orrs	r1, r2
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80018b8:	4311      	orrs	r1, r2
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80018be:	430a      	orrs	r2, r1
 80018c0:	431a      	orrs	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f042 0201 	orr.w	r2, r2, #1
 80018ca:	611a      	str	r2, [r3, #16]
 80018cc:	e007      	b.n	80018de <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	691a      	ldr	r2, [r3, #16]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f022 0201 	bic.w	r2, r2, #1
 80018dc:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f000 fb29 	bl	8001f4c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d10c      	bne.n	800191c <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001908:	f023 010f 	bic.w	r1, r3, #15
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	1e5a      	subs	r2, r3, #1
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	430a      	orrs	r2, r1
 8001918:	631a      	str	r2, [r3, #48]	@ 0x30
 800191a:	e007      	b.n	800192c <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f022 020f 	bic.w	r2, r2, #15
 800192a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001930:	f023 0303 	bic.w	r3, r3, #3
 8001934:	f043 0201 	orr.w	r2, r3, #1
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	655a      	str	r2, [r3, #84]	@ 0x54
 800193c:	e007      	b.n	800194e <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001942:	f043 0210 	orr.w	r2, r3, #16
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800194e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3724      	adds	r7, #36	@ 0x24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd90      	pop	{r4, r7, pc}
 8001958:	24000000 	.word	0x24000000
 800195c:	053e2d63 	.word	0x053e2d63
 8001960:	40022000 	.word	0x40022000
 8001964:	40022100 	.word	0x40022100
 8001968:	40022300 	.word	0x40022300
 800196c:	fff0c003 	.word	0xfff0c003
 8001970:	ffffbffc 	.word	0xffffbffc
 8001974:	fc00f81e 	.word	0xfc00f81e

08001978 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001978:	b590      	push	{r4, r7, lr}
 800197a:	b0a1      	sub	sp, #132	@ 0x84
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001982:	2300      	movs	r3, #0
 8001984:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	4a95      	ldr	r2, [pc, #596]	@ (8001be8 <HAL_ADC_ConfigChannel+0x270>)
 8001992:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800199a:	2b01      	cmp	r3, #1
 800199c:	d101      	bne.n	80019a2 <HAL_ADC_ConfigChannel+0x2a>
 800199e:	2302      	movs	r3, #2
 80019a0:	e2c0      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x5ac>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff fe61 	bl	8001676 <LL_ADC_REG_IsConversionOngoing>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f040 82a5 	bne.w	8001f06 <HAL_ADC_ConfigChannel+0x58e>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	db2c      	blt.n	8001a1e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d108      	bne.n	80019e2 <HAL_ADC_ConfigChannel+0x6a>
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	0e9b      	lsrs	r3, r3, #26
 80019d6:	f003 031f 	and.w	r3, r3, #31
 80019da:	2201      	movs	r2, #1
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	e016      	b.n	8001a10 <HAL_ADC_ConfigChannel+0x98>
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80019ea:	fa93 f3a3 	rbit	r3, r3
 80019ee:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80019f2:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80019f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80019fa:	2320      	movs	r3, #32
 80019fc:	e003      	b.n	8001a06 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80019fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a00:	fab3 f383 	clz	r3, r3
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	f003 031f 	and.w	r3, r3, #31
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6812      	ldr	r2, [r2, #0]
 8001a14:	69d1      	ldr	r1, [r2, #28]
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6812      	ldr	r2, [r2, #0]
 8001a1a:	430b      	orrs	r3, r1
 8001a1c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6818      	ldr	r0, [r3, #0]
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	6859      	ldr	r1, [r3, #4]
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	f7ff fd46 	bl	80014bc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fe1e 	bl	8001676 <LL_ADC_REG_IsConversionOngoing>
 8001a3a:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff fe2b 	bl	800169c <LL_ADC_INJ_IsConversionOngoing>
 8001a46:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f040 80a0 	bne.w	8001b90 <HAL_ADC_ConfigChannel+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f040 809c 	bne.w	8001b90 <HAL_ADC_ConfigChannel+0x218>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6818      	ldr	r0, [r3, #0]
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	6819      	ldr	r1, [r3, #0]
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	461a      	mov	r2, r3
 8001a66:	f7ff fd55 	bl	8001514 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f003 0310 	and.w	r3, r3, #16
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d10b      	bne.n	8001a90 <HAL_ADC_ConfigChannel+0x118>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	695a      	ldr	r2, [r3, #20]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	089b      	lsrs	r3, r3, #2
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	e00a      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x12e>
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	695a      	ldr	r2, [r3, #20]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	089b      	lsrs	r3, r3, #2
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d027      	beq.n	8001b00 <HAL_ADC_ConfigChannel+0x188>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6818      	ldr	r0, [r3, #0]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	6919      	ldr	r1, [r3, #16]
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001abe:	f7ff fca9 	bl	8001414 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6818      	ldr	r0, [r3, #0]
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	6919      	ldr	r1, [r3, #16]
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	7e5b      	ldrb	r3, [r3, #25]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d102      	bne.n	8001ad8 <HAL_ADC_ConfigChannel+0x160>
 8001ad2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001ad6:	e000      	b.n	8001ada <HAL_ADC_ConfigChannel+0x162>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	461a      	mov	r2, r3
 8001adc:	f7ff fcd3 	bl	8001486 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6818      	ldr	r0, [r3, #0]
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	6919      	ldr	r1, [r3, #16]
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	7e1b      	ldrb	r3, [r3, #24]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d102      	bne.n	8001af6 <HAL_ADC_ConfigChannel+0x17e>
 8001af0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001af4:	e000      	b.n	8001af8 <HAL_ADC_ConfigChannel+0x180>
 8001af6:	2300      	movs	r3, #0
 8001af8:	461a      	mov	r2, r3
 8001afa:	f7ff fcab 	bl	8001454 <LL_ADC_SetDataRightShift>
 8001afe:	e047      	b.n	8001b90 <HAL_ADC_ConfigChannel+0x218>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b06:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	069b      	lsls	r3, r3, #26
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d107      	bne.n	8001b24 <HAL_ADC_ConfigChannel+0x1ac>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001b22:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001b2a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	069b      	lsls	r3, r3, #26
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d107      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x1d0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001b46:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001b4e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	069b      	lsls	r3, r3, #26
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d107      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x1f4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001b6a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b72:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	069b      	lsls	r3, r3, #26
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d107      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x218>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001b8e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fd5b 	bl	8001650 <LL_ADC_IsEnabled>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f040 81bb 	bne.w	8001f18 <HAL_ADC_ConfigChannel+0x5a0>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6818      	ldr	r0, [r3, #0]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	6819      	ldr	r1, [r3, #0]
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	f7ff fcdc 	bl	800156c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	4a0b      	ldr	r2, [pc, #44]	@ (8001be8 <HAL_ADC_ConfigChannel+0x270>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	f040 8130 	bne.w	8001e20 <HAL_ADC_ConfigChannel+0x4a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d10d      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x274>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	0e9b      	lsrs	r3, r3, #26
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	f003 031f 	and.w	r3, r3, #31
 8001bdc:	2b09      	cmp	r3, #9
 8001bde:	bf94      	ite	ls
 8001be0:	2301      	movls	r3, #1
 8001be2:	2300      	movhi	r3, #0
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	e01b      	b.n	8001c20 <HAL_ADC_ConfigChannel+0x2a8>
 8001be8:	47ff0000 	.word	0x47ff0000
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001bf4:	fa93 f3a3 	rbit	r3, r3
 8001bf8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001bfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001bfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <HAL_ADC_ConfigChannel+0x290>
    return 32U;
 8001c04:	2320      	movs	r3, #32
 8001c06:	e003      	b.n	8001c10 <HAL_ADC_ConfigChannel+0x298>
  return __builtin_clz(value);
 8001c08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c0a:	fab3 f383 	clz	r3, r3
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	3301      	adds	r3, #1
 8001c12:	f003 031f 	and.w	r3, r3, #31
 8001c16:	2b09      	cmp	r3, #9
 8001c18:	bf94      	ite	ls
 8001c1a:	2301      	movls	r3, #1
 8001c1c:	2300      	movhi	r3, #0
 8001c1e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d079      	beq.n	8001d18 <HAL_ADC_ConfigChannel+0x3a0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d107      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x2c8>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	0e9b      	lsrs	r3, r3, #26
 8001c36:	3301      	adds	r3, #1
 8001c38:	069b      	lsls	r3, r3, #26
 8001c3a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c3e:	e015      	b.n	8001c6c <HAL_ADC_ConfigChannel+0x2f4>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c48:	fa93 f3a3 	rbit	r3, r3
 8001c4c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001c4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c50:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001c52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0x2e4>
    return 32U;
 8001c58:	2320      	movs	r3, #32
 8001c5a:	e003      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x2ec>
  return __builtin_clz(value);
 8001c5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c5e:	fab3 f383 	clz	r3, r3
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	3301      	adds	r3, #1
 8001c66:	069b      	lsls	r3, r3, #26
 8001c68:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d109      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x314>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	0e9b      	lsrs	r3, r3, #26
 8001c7e:	3301      	adds	r3, #1
 8001c80:	f003 031f 	and.w	r3, r3, #31
 8001c84:	2101      	movs	r1, #1
 8001c86:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8a:	e017      	b.n	8001cbc <HAL_ADC_ConfigChannel+0x344>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c94:	fa93 f3a3 	rbit	r3, r3
 8001c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001c9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c9c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001c9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8001ca4:	2320      	movs	r3, #32
 8001ca6:	e003      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x338>
  return __builtin_clz(value);
 8001ca8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001caa:	fab3 f383 	clz	r3, r3
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	f003 031f 	and.w	r3, r3, #31
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbc:	ea42 0103 	orr.w	r1, r2, r3
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d10a      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x36a>
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	0e9b      	lsrs	r3, r3, #26
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	f003 021f 	and.w	r2, r3, #31
 8001cd8:	4613      	mov	r3, r2
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	4413      	add	r3, r2
 8001cde:	051b      	lsls	r3, r3, #20
 8001ce0:	e018      	b.n	8001d14 <HAL_ADC_ConfigChannel+0x39c>
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cea:	fa93 f3a3 	rbit	r3, r3
 8001cee:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cf2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8001cfa:	2320      	movs	r3, #32
 8001cfc:	e003      	b.n	8001d06 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d00:	fab3 f383 	clz	r3, r3
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	3301      	adds	r3, #1
 8001d08:	f003 021f 	and.w	r2, r3, #31
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	4413      	add	r3, r2
 8001d12:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d14:	430b      	orrs	r3, r1
 8001d16:	e07e      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x49e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d107      	bne.n	8001d34 <HAL_ADC_ConfigChannel+0x3bc>
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	0e9b      	lsrs	r3, r3, #26
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	069b      	lsls	r3, r3, #26
 8001d2e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d32:	e015      	b.n	8001d60 <HAL_ADC_ConfigChannel+0x3e8>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d3c:	fa93 f3a3 	rbit	r3, r3
 8001d40:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d101      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x3d8>
    return 32U;
 8001d4c:	2320      	movs	r3, #32
 8001d4e:	e003      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x3e0>
  return __builtin_clz(value);
 8001d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d52:	fab3 f383 	clz	r3, r3
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	3301      	adds	r3, #1
 8001d5a:	069b      	lsls	r3, r3, #26
 8001d5c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d109      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x408>
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	0e9b      	lsrs	r3, r3, #26
 8001d72:	3301      	adds	r3, #1
 8001d74:	f003 031f 	and.w	r3, r3, #31
 8001d78:	2101      	movs	r1, #1
 8001d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7e:	e017      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x438>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	fa93 f3a3 	rbit	r3, r3
 8001d8c:	61bb      	str	r3, [r7, #24]
  return result;
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001d92:	6a3b      	ldr	r3, [r7, #32]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x424>
    return 32U;
 8001d98:	2320      	movs	r3, #32
 8001d9a:	e003      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x42c>
  return __builtin_clz(value);
 8001d9c:	6a3b      	ldr	r3, [r7, #32]
 8001d9e:	fab3 f383 	clz	r3, r3
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	3301      	adds	r3, #1
 8001da6:	f003 031f 	and.w	r3, r3, #31
 8001daa:	2101      	movs	r1, #1
 8001dac:	fa01 f303 	lsl.w	r3, r1, r3
 8001db0:	ea42 0103 	orr.w	r1, r2, r3
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d10d      	bne.n	8001ddc <HAL_ADC_ConfigChannel+0x464>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	0e9b      	lsrs	r3, r3, #26
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	f003 021f 	and.w	r2, r3, #31
 8001dcc:	4613      	mov	r3, r2
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	4413      	add	r3, r2
 8001dd2:	3b1e      	subs	r3, #30
 8001dd4:	051b      	lsls	r3, r3, #20
 8001dd6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001dda:	e01b      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x49c>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	fa93 f3a3 	rbit	r3, r3
 8001de8:	60fb      	str	r3, [r7, #12]
  return result;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8001df4:	2320      	movs	r3, #32
 8001df6:	e003      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x488>
  return __builtin_clz(value);
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	fab3 f383 	clz	r3, r3
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	3301      	adds	r3, #1
 8001e02:	f003 021f 	and.w	r2, r3, #31
 8001e06:	4613      	mov	r3, r2
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3b1e      	subs	r3, #30
 8001e0e:	051b      	lsls	r3, r3, #20
 8001e10:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e14:	430b      	orrs	r3, r1
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	6892      	ldr	r2, [r2, #8]
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	f7ff fb7a 	bl	8001514 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	da77      	bge.n	8001f18 <HAL_ADC_ConfigChannel+0x5a0>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e28:	4840      	ldr	r0, [pc, #256]	@ (8001f2c <HAL_ADC_ConfigChannel+0x5b4>)
 8001e2a:	f7ff fae5 	bl	80013f8 <LL_ADC_GetCommonPathInternalCh>
 8001e2e:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e30:	483f      	ldr	r0, [pc, #252]	@ (8001f30 <HAL_ADC_ConfigChannel+0x5b8>)
 8001e32:	f7ff fc0d 	bl	8001650 <LL_ADC_IsEnabled>
 8001e36:	4604      	mov	r4, r0
 8001e38:	483e      	ldr	r0, [pc, #248]	@ (8001f34 <HAL_ADC_ConfigChannel+0x5bc>)
 8001e3a:	f7ff fc09 	bl	8001650 <LL_ADC_IsEnabled>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	4323      	orrs	r3, r4
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d155      	bne.n	8001ef2 <HAL_ADC_ConfigChannel+0x57a>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a3b      	ldr	r2, [pc, #236]	@ (8001f38 <HAL_ADC_ConfigChannel+0x5c0>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d122      	bne.n	8001e96 <HAL_ADC_ConfigChannel+0x51e>
 8001e50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d11d      	bne.n	8001e96 <HAL_ADC_ConfigChannel+0x51e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a35      	ldr	r2, [pc, #212]	@ (8001f34 <HAL_ADC_ConfigChannel+0x5bc>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d159      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001e64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e66:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	482f      	ldr	r0, [pc, #188]	@ (8001f2c <HAL_ADC_ConfigChannel+0x5b4>)
 8001e6e:	f7ff fab0 	bl	80013d2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e72:	4b32      	ldr	r3, [pc, #200]	@ (8001f3c <HAL_ADC_ConfigChannel+0x5c4>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	099b      	lsrs	r3, r3, #6
 8001e78:	4a31      	ldr	r2, [pc, #196]	@ (8001f40 <HAL_ADC_ConfigChannel+0x5c8>)
 8001e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7e:	099b      	lsrs	r3, r3, #6
 8001e80:	3301      	adds	r3, #1
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001e86:	e002      	b.n	8001e8e <HAL_ADC_ConfigChannel+0x516>
              {
                wait_loop_index--;
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1f9      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x510>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e94:	e040      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x5a0>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a2a      	ldr	r2, [pc, #168]	@ (8001f44 <HAL_ADC_ConfigChannel+0x5cc>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d111      	bne.n	8001ec4 <HAL_ADC_ConfigChannel+0x54c>
 8001ea0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ea2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10c      	bne.n	8001ec4 <HAL_ADC_ConfigChannel+0x54c>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a21      	ldr	r2, [pc, #132]	@ (8001f34 <HAL_ADC_ConfigChannel+0x5bc>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d131      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001eb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001eb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001eba:	4619      	mov	r1, r3
 8001ebc:	481b      	ldr	r0, [pc, #108]	@ (8001f2c <HAL_ADC_ConfigChannel+0x5b4>)
 8001ebe:	f7ff fa88 	bl	80013d2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ec2:	e029      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x5a0>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a1f      	ldr	r2, [pc, #124]	@ (8001f48 <HAL_ADC_ConfigChannel+0x5d0>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d124      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x5a0>
 8001ece:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ed0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d11f      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x5a0>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a15      	ldr	r2, [pc, #84]	@ (8001f34 <HAL_ADC_ConfigChannel+0x5bc>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d11a      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001ee2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ee4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4810      	ldr	r0, [pc, #64]	@ (8001f2c <HAL_ADC_ConfigChannel+0x5b4>)
 8001eec:	f7ff fa71 	bl	80013d2 <LL_ADC_SetCommonPathInternalCh>
 8001ef0:	e012      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x5a0>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ef6:	f043 0220 	orr.w	r2, r3, #32
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8001f04:	e008      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x5a0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f0a:	f043 0220 	orr.w	r2, r3, #32
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001f20:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3784      	adds	r7, #132	@ 0x84
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd90      	pop	{r4, r7, pc}
 8001f2c:	40022300 	.word	0x40022300
 8001f30:	40022000 	.word	0x40022000
 8001f34:	40022100 	.word	0x40022100
 8001f38:	cb840000 	.word	0xcb840000
 8001f3c:	24000000 	.word	0x24000000
 8001f40:	053e2d63 	.word	0x053e2d63
 8001f44:	bac04000 	.word	0xbac04000
 8001f48:	cfb80000 	.word	0xcfb80000

08001f4c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001f54:	4b60      	ldr	r3, [pc, #384]	@ (80020d8 <ADC_ConfigureBoostMode+0x18c>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d01c      	beq.n	8001f9a <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8001f60:	f003 fd08 	bl	8005974 <HAL_RCC_GetHCLKFreq>
 8001f64:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001f6e:	d010      	beq.n	8001f92 <ADC_ConfigureBoostMode+0x46>
 8001f70:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001f74:	d873      	bhi.n	800205e <ADC_ConfigureBoostMode+0x112>
 8001f76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f7a:	d002      	beq.n	8001f82 <ADC_ConfigureBoostMode+0x36>
 8001f7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001f80:	d16d      	bne.n	800205e <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	0c1b      	lsrs	r3, r3, #16
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8e:	60fb      	str	r3, [r7, #12]
        break;
 8001f90:	e068      	b.n	8002064 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	089b      	lsrs	r3, r3, #2
 8001f96:	60fb      	str	r3, [r7, #12]
        break;
 8001f98:	e064      	b.n	8002064 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001f9a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001f9e:	f04f 0100 	mov.w	r1, #0
 8001fa2:	f004 ff01 	bl	8006da8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001fa6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8001fb0:	d051      	beq.n	8002056 <ADC_ConfigureBoostMode+0x10a>
 8001fb2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8001fb6:	d854      	bhi.n	8002062 <ADC_ConfigureBoostMode+0x116>
 8001fb8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8001fbc:	d047      	beq.n	800204e <ADC_ConfigureBoostMode+0x102>
 8001fbe:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8001fc2:	d84e      	bhi.n	8002062 <ADC_ConfigureBoostMode+0x116>
 8001fc4:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8001fc8:	d03d      	beq.n	8002046 <ADC_ConfigureBoostMode+0xfa>
 8001fca:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8001fce:	d848      	bhi.n	8002062 <ADC_ConfigureBoostMode+0x116>
 8001fd0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001fd4:	d033      	beq.n	800203e <ADC_ConfigureBoostMode+0xf2>
 8001fd6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001fda:	d842      	bhi.n	8002062 <ADC_ConfigureBoostMode+0x116>
 8001fdc:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8001fe0:	d029      	beq.n	8002036 <ADC_ConfigureBoostMode+0xea>
 8001fe2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8001fe6:	d83c      	bhi.n	8002062 <ADC_ConfigureBoostMode+0x116>
 8001fe8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8001fec:	d01a      	beq.n	8002024 <ADC_ConfigureBoostMode+0xd8>
 8001fee:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8001ff2:	d836      	bhi.n	8002062 <ADC_ConfigureBoostMode+0x116>
 8001ff4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8001ff8:	d014      	beq.n	8002024 <ADC_ConfigureBoostMode+0xd8>
 8001ffa:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8001ffe:	d830      	bhi.n	8002062 <ADC_ConfigureBoostMode+0x116>
 8002000:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002004:	d00e      	beq.n	8002024 <ADC_ConfigureBoostMode+0xd8>
 8002006:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800200a:	d82a      	bhi.n	8002062 <ADC_ConfigureBoostMode+0x116>
 800200c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002010:	d008      	beq.n	8002024 <ADC_ConfigureBoostMode+0xd8>
 8002012:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002016:	d824      	bhi.n	8002062 <ADC_ConfigureBoostMode+0x116>
 8002018:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800201c:	d002      	beq.n	8002024 <ADC_ConfigureBoostMode+0xd8>
 800201e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002022:	d11e      	bne.n	8002062 <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	0c9b      	lsrs	r3, r3, #18
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002032:	60fb      	str	r3, [r7, #12]
        break;
 8002034:	e016      	b.n	8002064 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	091b      	lsrs	r3, r3, #4
 800203a:	60fb      	str	r3, [r7, #12]
        break;
 800203c:	e012      	b.n	8002064 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	095b      	lsrs	r3, r3, #5
 8002042:	60fb      	str	r3, [r7, #12]
        break;
 8002044:	e00e      	b.n	8002064 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	099b      	lsrs	r3, r3, #6
 800204a:	60fb      	str	r3, [r7, #12]
        break;
 800204c:	e00a      	b.n	8002064 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	09db      	lsrs	r3, r3, #7
 8002052:	60fb      	str	r3, [r7, #12]
        break;
 8002054:	e006      	b.n	8002064 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	0a1b      	lsrs	r3, r3, #8
 800205a:	60fb      	str	r3, [r7, #12]
        break;
 800205c:	e002      	b.n	8002064 <ADC_ConfigureBoostMode+0x118>
        break;
 800205e:	bf00      	nop
 8002060:	e000      	b.n	8002064 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8002062:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	085b      	lsrs	r3, r3, #1
 8002068:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	4a1b      	ldr	r2, [pc, #108]	@ (80020dc <ADC_ConfigureBoostMode+0x190>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d808      	bhi.n	8002084 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002080:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002082:	e025      	b.n	80020d0 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	4a16      	ldr	r2, [pc, #88]	@ (80020e0 <ADC_ConfigureBoostMode+0x194>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d80a      	bhi.n	80020a2 <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800209e:	609a      	str	r2, [r3, #8]
}
 80020a0:	e016      	b.n	80020d0 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	4a0f      	ldr	r2, [pc, #60]	@ (80020e4 <ADC_ConfigureBoostMode+0x198>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d80a      	bhi.n	80020c0 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020bc:	609a      	str	r2, [r3, #8]
}
 80020be:	e007      	b.n	80020d0 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80020ce:	609a      	str	r2, [r3, #8]
}
 80020d0:	bf00      	nop
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40022300 	.word	0x40022300
 80020dc:	005f5e10 	.word	0x005f5e10
 80020e0:	00bebc20 	.word	0x00bebc20
 80020e4:	017d7840 	.word	0x017d7840

080020e8 <LL_ADC_IsEnabled>:
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d101      	bne.n	8002100 <LL_ADC_IsEnabled+0x18>
 80020fc:	2301      	movs	r3, #1
 80020fe:	e000      	b.n	8002102 <LL_ADC_IsEnabled+0x1a>
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <LL_ADC_REG_IsConversionOngoing>:
{
 800210e:	b480      	push	{r7}
 8002110:	b083      	sub	sp, #12
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 0304 	and.w	r3, r3, #4
 800211e:	2b04      	cmp	r3, #4
 8002120:	d101      	bne.n	8002126 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002122:	2301      	movs	r3, #1
 8002124:	e000      	b.n	8002128 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002134:	b590      	push	{r4, r7, lr}
 8002136:	b09f      	sub	sp, #124	@ 0x7c
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800214a:	2b01      	cmp	r3, #1
 800214c:	d101      	bne.n	8002152 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800214e:	2302      	movs	r3, #2
 8002150:	e080      	b.n	8002254 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800215a:	2300      	movs	r3, #0
 800215c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800215e:	2300      	movs	r3, #0
 8002160:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a3d      	ldr	r2, [pc, #244]	@ (800225c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d102      	bne.n	8002172 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800216c:	4b3c      	ldr	r3, [pc, #240]	@ (8002260 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800216e:	60bb      	str	r3, [r7, #8]
 8002170:	e001      	b.n	8002176 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002172:	2300      	movs	r3, #0
 8002174:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10b      	bne.n	8002194 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002180:	f043 0220 	orr.w	r2, r3, #32
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e05f      	b.n	8002254 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff ffb9 	bl	800210e <LL_ADC_REG_IsConversionOngoing>
 800219c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff ffb3 	bl	800210e <LL_ADC_REG_IsConversionOngoing>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d141      	bne.n	8002232 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80021ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d13e      	bne.n	8002232 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80021b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002264 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 80021b6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d020      	beq.n	8002202 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80021c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	431a      	orrs	r2, r3
 80021ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021d0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021d2:	4822      	ldr	r0, [pc, #136]	@ (800225c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80021d4:	f7ff ff88 	bl	80020e8 <LL_ADC_IsEnabled>
 80021d8:	4604      	mov	r4, r0
 80021da:	4821      	ldr	r0, [pc, #132]	@ (8002260 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80021dc:	f7ff ff84 	bl	80020e8 <LL_ADC_IsEnabled>
 80021e0:	4603      	mov	r3, r0
 80021e2:	4323      	orrs	r3, r4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d12e      	bne.n	8002246 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80021e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	4b1e      	ldr	r3, [pc, #120]	@ (8002268 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	6811      	ldr	r1, [r2, #0]
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	6892      	ldr	r2, [r2, #8]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	431a      	orrs	r2, r3
 80021fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021fe:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002200:	e021      	b.n	8002246 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002202:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800220a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800220c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800220e:	4813      	ldr	r0, [pc, #76]	@ (800225c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002210:	f7ff ff6a 	bl	80020e8 <LL_ADC_IsEnabled>
 8002214:	4604      	mov	r4, r0
 8002216:	4812      	ldr	r0, [pc, #72]	@ (8002260 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002218:	f7ff ff66 	bl	80020e8 <LL_ADC_IsEnabled>
 800221c:	4603      	mov	r3, r0
 800221e:	4323      	orrs	r3, r4
 8002220:	2b00      	cmp	r3, #0
 8002222:	d110      	bne.n	8002246 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002224:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	4b0f      	ldr	r3, [pc, #60]	@ (8002268 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800222a:	4013      	ands	r3, r2
 800222c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800222e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002230:	e009      	b.n	8002246 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002236:	f043 0220 	orr.w	r2, r3, #32
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002244:	e000      	b.n	8002248 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002246:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002250:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002254:	4618      	mov	r0, r3
 8002256:	377c      	adds	r7, #124	@ 0x7c
 8002258:	46bd      	mov	sp, r7
 800225a:	bd90      	pop	{r4, r7, pc}
 800225c:	40022000 	.word	0x40022000
 8002260:	40022100 	.word	0x40022100
 8002264:	40022300 	.word	0x40022300
 8002268:	fffff0e0 	.word	0xfffff0e0

0800226c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800227c:	4b0b      	ldr	r3, [pc, #44]	@ (80022ac <__NVIC_SetPriorityGrouping+0x40>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002288:	4013      	ands	r3, r2
 800228a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002294:	4b06      	ldr	r3, [pc, #24]	@ (80022b0 <__NVIC_SetPriorityGrouping+0x44>)
 8002296:	4313      	orrs	r3, r2
 8002298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800229a:	4a04      	ldr	r2, [pc, #16]	@ (80022ac <__NVIC_SetPriorityGrouping+0x40>)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	60d3      	str	r3, [r2, #12]
}
 80022a0:	bf00      	nop
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	e000ed00 	.word	0xe000ed00
 80022b0:	05fa0000 	.word	0x05fa0000

080022b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b8:	4b04      	ldr	r3, [pc, #16]	@ (80022cc <__NVIC_GetPriorityGrouping+0x18>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	0a1b      	lsrs	r3, r3, #8
 80022be:	f003 0307 	and.w	r3, r3, #7
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80022da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	db0b      	blt.n	80022fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022e2:	88fb      	ldrh	r3, [r7, #6]
 80022e4:	f003 021f 	and.w	r2, r3, #31
 80022e8:	4907      	ldr	r1, [pc, #28]	@ (8002308 <__NVIC_EnableIRQ+0x38>)
 80022ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022ee:	095b      	lsrs	r3, r3, #5
 80022f0:	2001      	movs	r0, #1
 80022f2:	fa00 f202 	lsl.w	r2, r0, r2
 80022f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	e000e100 	.word	0xe000e100

0800230c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	6039      	str	r1, [r7, #0]
 8002316:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002318:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800231c:	2b00      	cmp	r3, #0
 800231e:	db0a      	blt.n	8002336 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	b2da      	uxtb	r2, r3
 8002324:	490c      	ldr	r1, [pc, #48]	@ (8002358 <__NVIC_SetPriority+0x4c>)
 8002326:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800232a:	0112      	lsls	r2, r2, #4
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	440b      	add	r3, r1
 8002330:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002334:	e00a      	b.n	800234c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	b2da      	uxtb	r2, r3
 800233a:	4908      	ldr	r1, [pc, #32]	@ (800235c <__NVIC_SetPriority+0x50>)
 800233c:	88fb      	ldrh	r3, [r7, #6]
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	3b04      	subs	r3, #4
 8002344:	0112      	lsls	r2, r2, #4
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	440b      	add	r3, r1
 800234a:	761a      	strb	r2, [r3, #24]
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	e000e100 	.word	0xe000e100
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002360:	b480      	push	{r7}
 8002362:	b089      	sub	sp, #36	@ 0x24
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	f1c3 0307 	rsb	r3, r3, #7
 800237a:	2b04      	cmp	r3, #4
 800237c:	bf28      	it	cs
 800237e:	2304      	movcs	r3, #4
 8002380:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	3304      	adds	r3, #4
 8002386:	2b06      	cmp	r3, #6
 8002388:	d902      	bls.n	8002390 <NVIC_EncodePriority+0x30>
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3b03      	subs	r3, #3
 800238e:	e000      	b.n	8002392 <NVIC_EncodePriority+0x32>
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002394:	f04f 32ff 	mov.w	r2, #4294967295
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43da      	mvns	r2, r3
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	401a      	ands	r2, r3
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a8:	f04f 31ff 	mov.w	r1, #4294967295
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	fa01 f303 	lsl.w	r3, r1, r3
 80023b2:	43d9      	mvns	r1, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b8:	4313      	orrs	r3, r2
         );
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3724      	adds	r7, #36	@ 0x24
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023d8:	d301      	bcc.n	80023de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023da:	2301      	movs	r3, #1
 80023dc:	e00f      	b.n	80023fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023de:	4a0a      	ldr	r2, [pc, #40]	@ (8002408 <SysTick_Config+0x40>)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023e6:	210f      	movs	r1, #15
 80023e8:	f04f 30ff 	mov.w	r0, #4294967295
 80023ec:	f7ff ff8e 	bl	800230c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f0:	4b05      	ldr	r3, [pc, #20]	@ (8002408 <SysTick_Config+0x40>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023f6:	4b04      	ldr	r3, [pc, #16]	@ (8002408 <SysTick_Config+0x40>)
 80023f8:	2207      	movs	r2, #7
 80023fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	e000e010 	.word	0xe000e010

0800240c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7ff ff29 	bl	800226c <__NVIC_SetPriorityGrouping>
}
 800241a:	bf00      	nop
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b086      	sub	sp, #24
 8002426:	af00      	add	r7, sp, #0
 8002428:	4603      	mov	r3, r0
 800242a:	60b9      	str	r1, [r7, #8]
 800242c:	607a      	str	r2, [r7, #4]
 800242e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002430:	f7ff ff40 	bl	80022b4 <__NVIC_GetPriorityGrouping>
 8002434:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	68b9      	ldr	r1, [r7, #8]
 800243a:	6978      	ldr	r0, [r7, #20]
 800243c:	f7ff ff90 	bl	8002360 <NVIC_EncodePriority>
 8002440:	4602      	mov	r2, r0
 8002442:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002446:	4611      	mov	r1, r2
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff ff5f 	bl	800230c <__NVIC_SetPriority>
}
 800244e:	bf00      	nop
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
 800245c:	4603      	mov	r3, r0
 800245e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002460:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff ff33 	bl	80022d0 <__NVIC_EnableIRQ>
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff ffa4 	bl	80023c8 <SysTick_Config>
 8002480:	4603      	mov	r3, r0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
	...

0800248c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8002490:	f3bf 8f5f 	dmb	sy
}
 8002494:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002496:	4b07      	ldr	r3, [pc, #28]	@ (80024b4 <HAL_MPU_Disable+0x28>)
 8002498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249a:	4a06      	ldr	r2, [pc, #24]	@ (80024b4 <HAL_MPU_Disable+0x28>)
 800249c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024a0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80024a2:	4b05      	ldr	r3, [pc, #20]	@ (80024b8 <HAL_MPU_Disable+0x2c>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	605a      	str	r2, [r3, #4]
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	e000ed00 	.word	0xe000ed00
 80024b8:	e000ed90 	.word	0xe000ed90

080024bc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80024c4:	4a0b      	ldr	r2, [pc, #44]	@ (80024f4 <HAL_MPU_Enable+0x38>)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80024ce:	4b0a      	ldr	r3, [pc, #40]	@ (80024f8 <HAL_MPU_Enable+0x3c>)
 80024d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d2:	4a09      	ldr	r2, [pc, #36]	@ (80024f8 <HAL_MPU_Enable+0x3c>)
 80024d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024d8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80024da:	f3bf 8f4f 	dsb	sy
}
 80024de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80024e0:	f3bf 8f6f 	isb	sy
}
 80024e4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	e000ed90 	.word	0xe000ed90
 80024f8:	e000ed00 	.word	0xe000ed00

080024fc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	785a      	ldrb	r2, [r3, #1]
 8002508:	4b1b      	ldr	r3, [pc, #108]	@ (8002578 <HAL_MPU_ConfigRegion+0x7c>)
 800250a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800250c:	4b1a      	ldr	r3, [pc, #104]	@ (8002578 <HAL_MPU_ConfigRegion+0x7c>)
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	4a19      	ldr	r2, [pc, #100]	@ (8002578 <HAL_MPU_ConfigRegion+0x7c>)
 8002512:	f023 0301 	bic.w	r3, r3, #1
 8002516:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002518:	4a17      	ldr	r2, [pc, #92]	@ (8002578 <HAL_MPU_ConfigRegion+0x7c>)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	7b1b      	ldrb	r3, [r3, #12]
 8002524:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	7adb      	ldrb	r3, [r3, #11]
 800252a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800252c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	7a9b      	ldrb	r3, [r3, #10]
 8002532:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002534:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	7b5b      	ldrb	r3, [r3, #13]
 800253a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800253c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	7b9b      	ldrb	r3, [r3, #14]
 8002542:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002544:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	7bdb      	ldrb	r3, [r3, #15]
 800254a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800254c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	7a5b      	ldrb	r3, [r3, #9]
 8002552:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002554:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	7a1b      	ldrb	r3, [r3, #8]
 800255a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800255c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	7812      	ldrb	r2, [r2, #0]
 8002562:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002564:	4a04      	ldr	r2, [pc, #16]	@ (8002578 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002566:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002568:	6113      	str	r3, [r2, #16]
}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	e000ed90 	.word	0xe000ed90

0800257c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002584:	f7fe fe96 	bl	80012b4 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e2dc      	b.n	8002b4e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d008      	beq.n	80025b2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2280      	movs	r2, #128	@ 0x80
 80025a4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e2cd      	b.n	8002b4e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a76      	ldr	r2, [pc, #472]	@ (8002790 <HAL_DMA_Abort+0x214>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d04a      	beq.n	8002652 <HAL_DMA_Abort+0xd6>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a74      	ldr	r2, [pc, #464]	@ (8002794 <HAL_DMA_Abort+0x218>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d045      	beq.n	8002652 <HAL_DMA_Abort+0xd6>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a73      	ldr	r2, [pc, #460]	@ (8002798 <HAL_DMA_Abort+0x21c>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d040      	beq.n	8002652 <HAL_DMA_Abort+0xd6>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a71      	ldr	r2, [pc, #452]	@ (800279c <HAL_DMA_Abort+0x220>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d03b      	beq.n	8002652 <HAL_DMA_Abort+0xd6>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a70      	ldr	r2, [pc, #448]	@ (80027a0 <HAL_DMA_Abort+0x224>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d036      	beq.n	8002652 <HAL_DMA_Abort+0xd6>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a6e      	ldr	r2, [pc, #440]	@ (80027a4 <HAL_DMA_Abort+0x228>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d031      	beq.n	8002652 <HAL_DMA_Abort+0xd6>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a6d      	ldr	r2, [pc, #436]	@ (80027a8 <HAL_DMA_Abort+0x22c>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d02c      	beq.n	8002652 <HAL_DMA_Abort+0xd6>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a6b      	ldr	r2, [pc, #428]	@ (80027ac <HAL_DMA_Abort+0x230>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d027      	beq.n	8002652 <HAL_DMA_Abort+0xd6>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a6a      	ldr	r2, [pc, #424]	@ (80027b0 <HAL_DMA_Abort+0x234>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d022      	beq.n	8002652 <HAL_DMA_Abort+0xd6>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a68      	ldr	r2, [pc, #416]	@ (80027b4 <HAL_DMA_Abort+0x238>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d01d      	beq.n	8002652 <HAL_DMA_Abort+0xd6>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a67      	ldr	r2, [pc, #412]	@ (80027b8 <HAL_DMA_Abort+0x23c>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d018      	beq.n	8002652 <HAL_DMA_Abort+0xd6>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a65      	ldr	r2, [pc, #404]	@ (80027bc <HAL_DMA_Abort+0x240>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d013      	beq.n	8002652 <HAL_DMA_Abort+0xd6>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a64      	ldr	r2, [pc, #400]	@ (80027c0 <HAL_DMA_Abort+0x244>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d00e      	beq.n	8002652 <HAL_DMA_Abort+0xd6>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a62      	ldr	r2, [pc, #392]	@ (80027c4 <HAL_DMA_Abort+0x248>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d009      	beq.n	8002652 <HAL_DMA_Abort+0xd6>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a61      	ldr	r2, [pc, #388]	@ (80027c8 <HAL_DMA_Abort+0x24c>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d004      	beq.n	8002652 <HAL_DMA_Abort+0xd6>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a5f      	ldr	r2, [pc, #380]	@ (80027cc <HAL_DMA_Abort+0x250>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d101      	bne.n	8002656 <HAL_DMA_Abort+0xda>
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <HAL_DMA_Abort+0xdc>
 8002656:	2300      	movs	r3, #0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d013      	beq.n	8002684 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 021e 	bic.w	r2, r2, #30
 800266a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695a      	ldr	r2, [r3, #20]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800267a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	e00a      	b.n	800269a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 020e 	bic.w	r2, r2, #14
 8002692:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a3c      	ldr	r2, [pc, #240]	@ (8002790 <HAL_DMA_Abort+0x214>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d072      	beq.n	800278a <HAL_DMA_Abort+0x20e>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a3a      	ldr	r2, [pc, #232]	@ (8002794 <HAL_DMA_Abort+0x218>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d06d      	beq.n	800278a <HAL_DMA_Abort+0x20e>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a39      	ldr	r2, [pc, #228]	@ (8002798 <HAL_DMA_Abort+0x21c>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d068      	beq.n	800278a <HAL_DMA_Abort+0x20e>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a37      	ldr	r2, [pc, #220]	@ (800279c <HAL_DMA_Abort+0x220>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d063      	beq.n	800278a <HAL_DMA_Abort+0x20e>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a36      	ldr	r2, [pc, #216]	@ (80027a0 <HAL_DMA_Abort+0x224>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d05e      	beq.n	800278a <HAL_DMA_Abort+0x20e>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a34      	ldr	r2, [pc, #208]	@ (80027a4 <HAL_DMA_Abort+0x228>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d059      	beq.n	800278a <HAL_DMA_Abort+0x20e>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a33      	ldr	r2, [pc, #204]	@ (80027a8 <HAL_DMA_Abort+0x22c>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d054      	beq.n	800278a <HAL_DMA_Abort+0x20e>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a31      	ldr	r2, [pc, #196]	@ (80027ac <HAL_DMA_Abort+0x230>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d04f      	beq.n	800278a <HAL_DMA_Abort+0x20e>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a30      	ldr	r2, [pc, #192]	@ (80027b0 <HAL_DMA_Abort+0x234>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d04a      	beq.n	800278a <HAL_DMA_Abort+0x20e>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a2e      	ldr	r2, [pc, #184]	@ (80027b4 <HAL_DMA_Abort+0x238>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d045      	beq.n	800278a <HAL_DMA_Abort+0x20e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a2d      	ldr	r2, [pc, #180]	@ (80027b8 <HAL_DMA_Abort+0x23c>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d040      	beq.n	800278a <HAL_DMA_Abort+0x20e>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a2b      	ldr	r2, [pc, #172]	@ (80027bc <HAL_DMA_Abort+0x240>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d03b      	beq.n	800278a <HAL_DMA_Abort+0x20e>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a2a      	ldr	r2, [pc, #168]	@ (80027c0 <HAL_DMA_Abort+0x244>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d036      	beq.n	800278a <HAL_DMA_Abort+0x20e>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a28      	ldr	r2, [pc, #160]	@ (80027c4 <HAL_DMA_Abort+0x248>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d031      	beq.n	800278a <HAL_DMA_Abort+0x20e>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a27      	ldr	r2, [pc, #156]	@ (80027c8 <HAL_DMA_Abort+0x24c>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d02c      	beq.n	800278a <HAL_DMA_Abort+0x20e>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a25      	ldr	r2, [pc, #148]	@ (80027cc <HAL_DMA_Abort+0x250>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d027      	beq.n	800278a <HAL_DMA_Abort+0x20e>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a24      	ldr	r2, [pc, #144]	@ (80027d0 <HAL_DMA_Abort+0x254>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d022      	beq.n	800278a <HAL_DMA_Abort+0x20e>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a22      	ldr	r2, [pc, #136]	@ (80027d4 <HAL_DMA_Abort+0x258>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d01d      	beq.n	800278a <HAL_DMA_Abort+0x20e>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a21      	ldr	r2, [pc, #132]	@ (80027d8 <HAL_DMA_Abort+0x25c>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d018      	beq.n	800278a <HAL_DMA_Abort+0x20e>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a1f      	ldr	r2, [pc, #124]	@ (80027dc <HAL_DMA_Abort+0x260>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d013      	beq.n	800278a <HAL_DMA_Abort+0x20e>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a1e      	ldr	r2, [pc, #120]	@ (80027e0 <HAL_DMA_Abort+0x264>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d00e      	beq.n	800278a <HAL_DMA_Abort+0x20e>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a1c      	ldr	r2, [pc, #112]	@ (80027e4 <HAL_DMA_Abort+0x268>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d009      	beq.n	800278a <HAL_DMA_Abort+0x20e>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a1b      	ldr	r2, [pc, #108]	@ (80027e8 <HAL_DMA_Abort+0x26c>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d004      	beq.n	800278a <HAL_DMA_Abort+0x20e>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a19      	ldr	r2, [pc, #100]	@ (80027ec <HAL_DMA_Abort+0x270>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d132      	bne.n	80027f0 <HAL_DMA_Abort+0x274>
 800278a:	2301      	movs	r3, #1
 800278c:	e031      	b.n	80027f2 <HAL_DMA_Abort+0x276>
 800278e:	bf00      	nop
 8002790:	40020010 	.word	0x40020010
 8002794:	40020028 	.word	0x40020028
 8002798:	40020040 	.word	0x40020040
 800279c:	40020058 	.word	0x40020058
 80027a0:	40020070 	.word	0x40020070
 80027a4:	40020088 	.word	0x40020088
 80027a8:	400200a0 	.word	0x400200a0
 80027ac:	400200b8 	.word	0x400200b8
 80027b0:	40020410 	.word	0x40020410
 80027b4:	40020428 	.word	0x40020428
 80027b8:	40020440 	.word	0x40020440
 80027bc:	40020458 	.word	0x40020458
 80027c0:	40020470 	.word	0x40020470
 80027c4:	40020488 	.word	0x40020488
 80027c8:	400204a0 	.word	0x400204a0
 80027cc:	400204b8 	.word	0x400204b8
 80027d0:	58025408 	.word	0x58025408
 80027d4:	5802541c 	.word	0x5802541c
 80027d8:	58025430 	.word	0x58025430
 80027dc:	58025444 	.word	0x58025444
 80027e0:	58025458 	.word	0x58025458
 80027e4:	5802546c 	.word	0x5802546c
 80027e8:	58025480 	.word	0x58025480
 80027ec:	58025494 	.word	0x58025494
 80027f0:	2300      	movs	r3, #0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d007      	beq.n	8002806 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002800:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002804:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a6d      	ldr	r2, [pc, #436]	@ (80029c0 <HAL_DMA_Abort+0x444>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d04a      	beq.n	80028a6 <HAL_DMA_Abort+0x32a>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a6b      	ldr	r2, [pc, #428]	@ (80029c4 <HAL_DMA_Abort+0x448>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d045      	beq.n	80028a6 <HAL_DMA_Abort+0x32a>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a6a      	ldr	r2, [pc, #424]	@ (80029c8 <HAL_DMA_Abort+0x44c>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d040      	beq.n	80028a6 <HAL_DMA_Abort+0x32a>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a68      	ldr	r2, [pc, #416]	@ (80029cc <HAL_DMA_Abort+0x450>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d03b      	beq.n	80028a6 <HAL_DMA_Abort+0x32a>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a67      	ldr	r2, [pc, #412]	@ (80029d0 <HAL_DMA_Abort+0x454>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d036      	beq.n	80028a6 <HAL_DMA_Abort+0x32a>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a65      	ldr	r2, [pc, #404]	@ (80029d4 <HAL_DMA_Abort+0x458>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d031      	beq.n	80028a6 <HAL_DMA_Abort+0x32a>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a64      	ldr	r2, [pc, #400]	@ (80029d8 <HAL_DMA_Abort+0x45c>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d02c      	beq.n	80028a6 <HAL_DMA_Abort+0x32a>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a62      	ldr	r2, [pc, #392]	@ (80029dc <HAL_DMA_Abort+0x460>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d027      	beq.n	80028a6 <HAL_DMA_Abort+0x32a>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a61      	ldr	r2, [pc, #388]	@ (80029e0 <HAL_DMA_Abort+0x464>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d022      	beq.n	80028a6 <HAL_DMA_Abort+0x32a>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a5f      	ldr	r2, [pc, #380]	@ (80029e4 <HAL_DMA_Abort+0x468>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d01d      	beq.n	80028a6 <HAL_DMA_Abort+0x32a>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a5e      	ldr	r2, [pc, #376]	@ (80029e8 <HAL_DMA_Abort+0x46c>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d018      	beq.n	80028a6 <HAL_DMA_Abort+0x32a>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a5c      	ldr	r2, [pc, #368]	@ (80029ec <HAL_DMA_Abort+0x470>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d013      	beq.n	80028a6 <HAL_DMA_Abort+0x32a>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a5b      	ldr	r2, [pc, #364]	@ (80029f0 <HAL_DMA_Abort+0x474>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d00e      	beq.n	80028a6 <HAL_DMA_Abort+0x32a>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a59      	ldr	r2, [pc, #356]	@ (80029f4 <HAL_DMA_Abort+0x478>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d009      	beq.n	80028a6 <HAL_DMA_Abort+0x32a>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a58      	ldr	r2, [pc, #352]	@ (80029f8 <HAL_DMA_Abort+0x47c>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d004      	beq.n	80028a6 <HAL_DMA_Abort+0x32a>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a56      	ldr	r2, [pc, #344]	@ (80029fc <HAL_DMA_Abort+0x480>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d108      	bne.n	80028b8 <HAL_DMA_Abort+0x33c>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0201 	bic.w	r2, r2, #1
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	e007      	b.n	80028c8 <HAL_DMA_Abort+0x34c>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f022 0201 	bic.w	r2, r2, #1
 80028c6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80028c8:	e013      	b.n	80028f2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028ca:	f7fe fcf3 	bl	80012b4 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b05      	cmp	r3, #5
 80028d6:	d90c      	bls.n	80028f2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2220      	movs	r2, #32
 80028dc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2203      	movs	r2, #3
 80028e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e12d      	b.n	8002b4e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1e5      	bne.n	80028ca <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a2f      	ldr	r2, [pc, #188]	@ (80029c0 <HAL_DMA_Abort+0x444>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d04a      	beq.n	800299e <HAL_DMA_Abort+0x422>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a2d      	ldr	r2, [pc, #180]	@ (80029c4 <HAL_DMA_Abort+0x448>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d045      	beq.n	800299e <HAL_DMA_Abort+0x422>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a2c      	ldr	r2, [pc, #176]	@ (80029c8 <HAL_DMA_Abort+0x44c>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d040      	beq.n	800299e <HAL_DMA_Abort+0x422>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a2a      	ldr	r2, [pc, #168]	@ (80029cc <HAL_DMA_Abort+0x450>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d03b      	beq.n	800299e <HAL_DMA_Abort+0x422>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a29      	ldr	r2, [pc, #164]	@ (80029d0 <HAL_DMA_Abort+0x454>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d036      	beq.n	800299e <HAL_DMA_Abort+0x422>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a27      	ldr	r2, [pc, #156]	@ (80029d4 <HAL_DMA_Abort+0x458>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d031      	beq.n	800299e <HAL_DMA_Abort+0x422>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a26      	ldr	r2, [pc, #152]	@ (80029d8 <HAL_DMA_Abort+0x45c>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d02c      	beq.n	800299e <HAL_DMA_Abort+0x422>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a24      	ldr	r2, [pc, #144]	@ (80029dc <HAL_DMA_Abort+0x460>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d027      	beq.n	800299e <HAL_DMA_Abort+0x422>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a23      	ldr	r2, [pc, #140]	@ (80029e0 <HAL_DMA_Abort+0x464>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d022      	beq.n	800299e <HAL_DMA_Abort+0x422>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a21      	ldr	r2, [pc, #132]	@ (80029e4 <HAL_DMA_Abort+0x468>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d01d      	beq.n	800299e <HAL_DMA_Abort+0x422>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a20      	ldr	r2, [pc, #128]	@ (80029e8 <HAL_DMA_Abort+0x46c>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d018      	beq.n	800299e <HAL_DMA_Abort+0x422>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a1e      	ldr	r2, [pc, #120]	@ (80029ec <HAL_DMA_Abort+0x470>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d013      	beq.n	800299e <HAL_DMA_Abort+0x422>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a1d      	ldr	r2, [pc, #116]	@ (80029f0 <HAL_DMA_Abort+0x474>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d00e      	beq.n	800299e <HAL_DMA_Abort+0x422>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a1b      	ldr	r2, [pc, #108]	@ (80029f4 <HAL_DMA_Abort+0x478>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d009      	beq.n	800299e <HAL_DMA_Abort+0x422>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a1a      	ldr	r2, [pc, #104]	@ (80029f8 <HAL_DMA_Abort+0x47c>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d004      	beq.n	800299e <HAL_DMA_Abort+0x422>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a18      	ldr	r2, [pc, #96]	@ (80029fc <HAL_DMA_Abort+0x480>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d101      	bne.n	80029a2 <HAL_DMA_Abort+0x426>
 800299e:	2301      	movs	r3, #1
 80029a0:	e000      	b.n	80029a4 <HAL_DMA_Abort+0x428>
 80029a2:	2300      	movs	r3, #0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d02b      	beq.n	8002a00 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ac:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b2:	f003 031f 	and.w	r3, r3, #31
 80029b6:	223f      	movs	r2, #63	@ 0x3f
 80029b8:	409a      	lsls	r2, r3
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	609a      	str	r2, [r3, #8]
 80029be:	e02a      	b.n	8002a16 <HAL_DMA_Abort+0x49a>
 80029c0:	40020010 	.word	0x40020010
 80029c4:	40020028 	.word	0x40020028
 80029c8:	40020040 	.word	0x40020040
 80029cc:	40020058 	.word	0x40020058
 80029d0:	40020070 	.word	0x40020070
 80029d4:	40020088 	.word	0x40020088
 80029d8:	400200a0 	.word	0x400200a0
 80029dc:	400200b8 	.word	0x400200b8
 80029e0:	40020410 	.word	0x40020410
 80029e4:	40020428 	.word	0x40020428
 80029e8:	40020440 	.word	0x40020440
 80029ec:	40020458 	.word	0x40020458
 80029f0:	40020470 	.word	0x40020470
 80029f4:	40020488 	.word	0x40020488
 80029f8:	400204a0 	.word	0x400204a0
 80029fc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a04:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a0a:	f003 031f 	and.w	r3, r3, #31
 8002a0e:	2201      	movs	r2, #1
 8002a10:	409a      	lsls	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a4f      	ldr	r2, [pc, #316]	@ (8002b58 <HAL_DMA_Abort+0x5dc>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d072      	beq.n	8002b06 <HAL_DMA_Abort+0x58a>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a4d      	ldr	r2, [pc, #308]	@ (8002b5c <HAL_DMA_Abort+0x5e0>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d06d      	beq.n	8002b06 <HAL_DMA_Abort+0x58a>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a4c      	ldr	r2, [pc, #304]	@ (8002b60 <HAL_DMA_Abort+0x5e4>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d068      	beq.n	8002b06 <HAL_DMA_Abort+0x58a>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a4a      	ldr	r2, [pc, #296]	@ (8002b64 <HAL_DMA_Abort+0x5e8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d063      	beq.n	8002b06 <HAL_DMA_Abort+0x58a>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a49      	ldr	r2, [pc, #292]	@ (8002b68 <HAL_DMA_Abort+0x5ec>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d05e      	beq.n	8002b06 <HAL_DMA_Abort+0x58a>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a47      	ldr	r2, [pc, #284]	@ (8002b6c <HAL_DMA_Abort+0x5f0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d059      	beq.n	8002b06 <HAL_DMA_Abort+0x58a>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a46      	ldr	r2, [pc, #280]	@ (8002b70 <HAL_DMA_Abort+0x5f4>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d054      	beq.n	8002b06 <HAL_DMA_Abort+0x58a>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a44      	ldr	r2, [pc, #272]	@ (8002b74 <HAL_DMA_Abort+0x5f8>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d04f      	beq.n	8002b06 <HAL_DMA_Abort+0x58a>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a43      	ldr	r2, [pc, #268]	@ (8002b78 <HAL_DMA_Abort+0x5fc>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d04a      	beq.n	8002b06 <HAL_DMA_Abort+0x58a>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a41      	ldr	r2, [pc, #260]	@ (8002b7c <HAL_DMA_Abort+0x600>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d045      	beq.n	8002b06 <HAL_DMA_Abort+0x58a>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a40      	ldr	r2, [pc, #256]	@ (8002b80 <HAL_DMA_Abort+0x604>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d040      	beq.n	8002b06 <HAL_DMA_Abort+0x58a>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a3e      	ldr	r2, [pc, #248]	@ (8002b84 <HAL_DMA_Abort+0x608>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d03b      	beq.n	8002b06 <HAL_DMA_Abort+0x58a>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a3d      	ldr	r2, [pc, #244]	@ (8002b88 <HAL_DMA_Abort+0x60c>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d036      	beq.n	8002b06 <HAL_DMA_Abort+0x58a>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a3b      	ldr	r2, [pc, #236]	@ (8002b8c <HAL_DMA_Abort+0x610>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d031      	beq.n	8002b06 <HAL_DMA_Abort+0x58a>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a3a      	ldr	r2, [pc, #232]	@ (8002b90 <HAL_DMA_Abort+0x614>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d02c      	beq.n	8002b06 <HAL_DMA_Abort+0x58a>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a38      	ldr	r2, [pc, #224]	@ (8002b94 <HAL_DMA_Abort+0x618>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d027      	beq.n	8002b06 <HAL_DMA_Abort+0x58a>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a37      	ldr	r2, [pc, #220]	@ (8002b98 <HAL_DMA_Abort+0x61c>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d022      	beq.n	8002b06 <HAL_DMA_Abort+0x58a>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a35      	ldr	r2, [pc, #212]	@ (8002b9c <HAL_DMA_Abort+0x620>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d01d      	beq.n	8002b06 <HAL_DMA_Abort+0x58a>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a34      	ldr	r2, [pc, #208]	@ (8002ba0 <HAL_DMA_Abort+0x624>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d018      	beq.n	8002b06 <HAL_DMA_Abort+0x58a>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a32      	ldr	r2, [pc, #200]	@ (8002ba4 <HAL_DMA_Abort+0x628>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d013      	beq.n	8002b06 <HAL_DMA_Abort+0x58a>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a31      	ldr	r2, [pc, #196]	@ (8002ba8 <HAL_DMA_Abort+0x62c>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d00e      	beq.n	8002b06 <HAL_DMA_Abort+0x58a>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a2f      	ldr	r2, [pc, #188]	@ (8002bac <HAL_DMA_Abort+0x630>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d009      	beq.n	8002b06 <HAL_DMA_Abort+0x58a>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a2e      	ldr	r2, [pc, #184]	@ (8002bb0 <HAL_DMA_Abort+0x634>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d004      	beq.n	8002b06 <HAL_DMA_Abort+0x58a>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a2c      	ldr	r2, [pc, #176]	@ (8002bb4 <HAL_DMA_Abort+0x638>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d101      	bne.n	8002b0a <HAL_DMA_Abort+0x58e>
 8002b06:	2301      	movs	r3, #1
 8002b08:	e000      	b.n	8002b0c <HAL_DMA_Abort+0x590>
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d015      	beq.n	8002b3c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002b18:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00c      	beq.n	8002b3c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b30:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002b3a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40020010 	.word	0x40020010
 8002b5c:	40020028 	.word	0x40020028
 8002b60:	40020040 	.word	0x40020040
 8002b64:	40020058 	.word	0x40020058
 8002b68:	40020070 	.word	0x40020070
 8002b6c:	40020088 	.word	0x40020088
 8002b70:	400200a0 	.word	0x400200a0
 8002b74:	400200b8 	.word	0x400200b8
 8002b78:	40020410 	.word	0x40020410
 8002b7c:	40020428 	.word	0x40020428
 8002b80:	40020440 	.word	0x40020440
 8002b84:	40020458 	.word	0x40020458
 8002b88:	40020470 	.word	0x40020470
 8002b8c:	40020488 	.word	0x40020488
 8002b90:	400204a0 	.word	0x400204a0
 8002b94:	400204b8 	.word	0x400204b8
 8002b98:	58025408 	.word	0x58025408
 8002b9c:	5802541c 	.word	0x5802541c
 8002ba0:	58025430 	.word	0x58025430
 8002ba4:	58025444 	.word	0x58025444
 8002ba8:	58025458 	.word	0x58025458
 8002bac:	5802546c 	.word	0x5802546c
 8002bb0:	58025480 	.word	0x58025480
 8002bb4:	58025494 	.word	0x58025494

08002bb8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e237      	b.n	800303a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d004      	beq.n	8002be0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2280      	movs	r2, #128	@ 0x80
 8002bda:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e22c      	b.n	800303a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a5c      	ldr	r2, [pc, #368]	@ (8002d58 <HAL_DMA_Abort_IT+0x1a0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d04a      	beq.n	8002c80 <HAL_DMA_Abort_IT+0xc8>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a5b      	ldr	r2, [pc, #364]	@ (8002d5c <HAL_DMA_Abort_IT+0x1a4>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d045      	beq.n	8002c80 <HAL_DMA_Abort_IT+0xc8>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a59      	ldr	r2, [pc, #356]	@ (8002d60 <HAL_DMA_Abort_IT+0x1a8>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d040      	beq.n	8002c80 <HAL_DMA_Abort_IT+0xc8>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a58      	ldr	r2, [pc, #352]	@ (8002d64 <HAL_DMA_Abort_IT+0x1ac>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d03b      	beq.n	8002c80 <HAL_DMA_Abort_IT+0xc8>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a56      	ldr	r2, [pc, #344]	@ (8002d68 <HAL_DMA_Abort_IT+0x1b0>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d036      	beq.n	8002c80 <HAL_DMA_Abort_IT+0xc8>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a55      	ldr	r2, [pc, #340]	@ (8002d6c <HAL_DMA_Abort_IT+0x1b4>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d031      	beq.n	8002c80 <HAL_DMA_Abort_IT+0xc8>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a53      	ldr	r2, [pc, #332]	@ (8002d70 <HAL_DMA_Abort_IT+0x1b8>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d02c      	beq.n	8002c80 <HAL_DMA_Abort_IT+0xc8>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a52      	ldr	r2, [pc, #328]	@ (8002d74 <HAL_DMA_Abort_IT+0x1bc>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d027      	beq.n	8002c80 <HAL_DMA_Abort_IT+0xc8>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a50      	ldr	r2, [pc, #320]	@ (8002d78 <HAL_DMA_Abort_IT+0x1c0>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d022      	beq.n	8002c80 <HAL_DMA_Abort_IT+0xc8>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a4f      	ldr	r2, [pc, #316]	@ (8002d7c <HAL_DMA_Abort_IT+0x1c4>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d01d      	beq.n	8002c80 <HAL_DMA_Abort_IT+0xc8>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a4d      	ldr	r2, [pc, #308]	@ (8002d80 <HAL_DMA_Abort_IT+0x1c8>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d018      	beq.n	8002c80 <HAL_DMA_Abort_IT+0xc8>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a4c      	ldr	r2, [pc, #304]	@ (8002d84 <HAL_DMA_Abort_IT+0x1cc>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d013      	beq.n	8002c80 <HAL_DMA_Abort_IT+0xc8>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a4a      	ldr	r2, [pc, #296]	@ (8002d88 <HAL_DMA_Abort_IT+0x1d0>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d00e      	beq.n	8002c80 <HAL_DMA_Abort_IT+0xc8>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a49      	ldr	r2, [pc, #292]	@ (8002d8c <HAL_DMA_Abort_IT+0x1d4>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d009      	beq.n	8002c80 <HAL_DMA_Abort_IT+0xc8>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a47      	ldr	r2, [pc, #284]	@ (8002d90 <HAL_DMA_Abort_IT+0x1d8>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d004      	beq.n	8002c80 <HAL_DMA_Abort_IT+0xc8>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a46      	ldr	r2, [pc, #280]	@ (8002d94 <HAL_DMA_Abort_IT+0x1dc>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d101      	bne.n	8002c84 <HAL_DMA_Abort_IT+0xcc>
 8002c80:	2301      	movs	r3, #1
 8002c82:	e000      	b.n	8002c86 <HAL_DMA_Abort_IT+0xce>
 8002c84:	2300      	movs	r3, #0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f000 8086 	beq.w	8002d98 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2204      	movs	r2, #4
 8002c90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a2f      	ldr	r2, [pc, #188]	@ (8002d58 <HAL_DMA_Abort_IT+0x1a0>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d04a      	beq.n	8002d34 <HAL_DMA_Abort_IT+0x17c>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a2e      	ldr	r2, [pc, #184]	@ (8002d5c <HAL_DMA_Abort_IT+0x1a4>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d045      	beq.n	8002d34 <HAL_DMA_Abort_IT+0x17c>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a2c      	ldr	r2, [pc, #176]	@ (8002d60 <HAL_DMA_Abort_IT+0x1a8>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d040      	beq.n	8002d34 <HAL_DMA_Abort_IT+0x17c>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a2b      	ldr	r2, [pc, #172]	@ (8002d64 <HAL_DMA_Abort_IT+0x1ac>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d03b      	beq.n	8002d34 <HAL_DMA_Abort_IT+0x17c>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a29      	ldr	r2, [pc, #164]	@ (8002d68 <HAL_DMA_Abort_IT+0x1b0>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d036      	beq.n	8002d34 <HAL_DMA_Abort_IT+0x17c>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a28      	ldr	r2, [pc, #160]	@ (8002d6c <HAL_DMA_Abort_IT+0x1b4>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d031      	beq.n	8002d34 <HAL_DMA_Abort_IT+0x17c>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a26      	ldr	r2, [pc, #152]	@ (8002d70 <HAL_DMA_Abort_IT+0x1b8>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d02c      	beq.n	8002d34 <HAL_DMA_Abort_IT+0x17c>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a25      	ldr	r2, [pc, #148]	@ (8002d74 <HAL_DMA_Abort_IT+0x1bc>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d027      	beq.n	8002d34 <HAL_DMA_Abort_IT+0x17c>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a23      	ldr	r2, [pc, #140]	@ (8002d78 <HAL_DMA_Abort_IT+0x1c0>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d022      	beq.n	8002d34 <HAL_DMA_Abort_IT+0x17c>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a22      	ldr	r2, [pc, #136]	@ (8002d7c <HAL_DMA_Abort_IT+0x1c4>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d01d      	beq.n	8002d34 <HAL_DMA_Abort_IT+0x17c>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a20      	ldr	r2, [pc, #128]	@ (8002d80 <HAL_DMA_Abort_IT+0x1c8>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d018      	beq.n	8002d34 <HAL_DMA_Abort_IT+0x17c>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a1f      	ldr	r2, [pc, #124]	@ (8002d84 <HAL_DMA_Abort_IT+0x1cc>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d013      	beq.n	8002d34 <HAL_DMA_Abort_IT+0x17c>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a1d      	ldr	r2, [pc, #116]	@ (8002d88 <HAL_DMA_Abort_IT+0x1d0>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d00e      	beq.n	8002d34 <HAL_DMA_Abort_IT+0x17c>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a1c      	ldr	r2, [pc, #112]	@ (8002d8c <HAL_DMA_Abort_IT+0x1d4>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d009      	beq.n	8002d34 <HAL_DMA_Abort_IT+0x17c>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a1a      	ldr	r2, [pc, #104]	@ (8002d90 <HAL_DMA_Abort_IT+0x1d8>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d004      	beq.n	8002d34 <HAL_DMA_Abort_IT+0x17c>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a19      	ldr	r2, [pc, #100]	@ (8002d94 <HAL_DMA_Abort_IT+0x1dc>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d108      	bne.n	8002d46 <HAL_DMA_Abort_IT+0x18e>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 0201 	bic.w	r2, r2, #1
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	e178      	b.n	8003038 <HAL_DMA_Abort_IT+0x480>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 0201 	bic.w	r2, r2, #1
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	e16f      	b.n	8003038 <HAL_DMA_Abort_IT+0x480>
 8002d58:	40020010 	.word	0x40020010
 8002d5c:	40020028 	.word	0x40020028
 8002d60:	40020040 	.word	0x40020040
 8002d64:	40020058 	.word	0x40020058
 8002d68:	40020070 	.word	0x40020070
 8002d6c:	40020088 	.word	0x40020088
 8002d70:	400200a0 	.word	0x400200a0
 8002d74:	400200b8 	.word	0x400200b8
 8002d78:	40020410 	.word	0x40020410
 8002d7c:	40020428 	.word	0x40020428
 8002d80:	40020440 	.word	0x40020440
 8002d84:	40020458 	.word	0x40020458
 8002d88:	40020470 	.word	0x40020470
 8002d8c:	40020488 	.word	0x40020488
 8002d90:	400204a0 	.word	0x400204a0
 8002d94:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 020e 	bic.w	r2, r2, #14
 8002da6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a6c      	ldr	r2, [pc, #432]	@ (8002f60 <HAL_DMA_Abort_IT+0x3a8>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d04a      	beq.n	8002e48 <HAL_DMA_Abort_IT+0x290>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a6b      	ldr	r2, [pc, #428]	@ (8002f64 <HAL_DMA_Abort_IT+0x3ac>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d045      	beq.n	8002e48 <HAL_DMA_Abort_IT+0x290>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a69      	ldr	r2, [pc, #420]	@ (8002f68 <HAL_DMA_Abort_IT+0x3b0>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d040      	beq.n	8002e48 <HAL_DMA_Abort_IT+0x290>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a68      	ldr	r2, [pc, #416]	@ (8002f6c <HAL_DMA_Abort_IT+0x3b4>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d03b      	beq.n	8002e48 <HAL_DMA_Abort_IT+0x290>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a66      	ldr	r2, [pc, #408]	@ (8002f70 <HAL_DMA_Abort_IT+0x3b8>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d036      	beq.n	8002e48 <HAL_DMA_Abort_IT+0x290>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a65      	ldr	r2, [pc, #404]	@ (8002f74 <HAL_DMA_Abort_IT+0x3bc>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d031      	beq.n	8002e48 <HAL_DMA_Abort_IT+0x290>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a63      	ldr	r2, [pc, #396]	@ (8002f78 <HAL_DMA_Abort_IT+0x3c0>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d02c      	beq.n	8002e48 <HAL_DMA_Abort_IT+0x290>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a62      	ldr	r2, [pc, #392]	@ (8002f7c <HAL_DMA_Abort_IT+0x3c4>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d027      	beq.n	8002e48 <HAL_DMA_Abort_IT+0x290>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a60      	ldr	r2, [pc, #384]	@ (8002f80 <HAL_DMA_Abort_IT+0x3c8>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d022      	beq.n	8002e48 <HAL_DMA_Abort_IT+0x290>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a5f      	ldr	r2, [pc, #380]	@ (8002f84 <HAL_DMA_Abort_IT+0x3cc>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d01d      	beq.n	8002e48 <HAL_DMA_Abort_IT+0x290>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a5d      	ldr	r2, [pc, #372]	@ (8002f88 <HAL_DMA_Abort_IT+0x3d0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d018      	beq.n	8002e48 <HAL_DMA_Abort_IT+0x290>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a5c      	ldr	r2, [pc, #368]	@ (8002f8c <HAL_DMA_Abort_IT+0x3d4>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d013      	beq.n	8002e48 <HAL_DMA_Abort_IT+0x290>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a5a      	ldr	r2, [pc, #360]	@ (8002f90 <HAL_DMA_Abort_IT+0x3d8>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d00e      	beq.n	8002e48 <HAL_DMA_Abort_IT+0x290>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a59      	ldr	r2, [pc, #356]	@ (8002f94 <HAL_DMA_Abort_IT+0x3dc>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d009      	beq.n	8002e48 <HAL_DMA_Abort_IT+0x290>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a57      	ldr	r2, [pc, #348]	@ (8002f98 <HAL_DMA_Abort_IT+0x3e0>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d004      	beq.n	8002e48 <HAL_DMA_Abort_IT+0x290>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a56      	ldr	r2, [pc, #344]	@ (8002f9c <HAL_DMA_Abort_IT+0x3e4>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d108      	bne.n	8002e5a <HAL_DMA_Abort_IT+0x2a2>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0201 	bic.w	r2, r2, #1
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	e007      	b.n	8002e6a <HAL_DMA_Abort_IT+0x2b2>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0201 	bic.w	r2, r2, #1
 8002e68:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a3c      	ldr	r2, [pc, #240]	@ (8002f60 <HAL_DMA_Abort_IT+0x3a8>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d072      	beq.n	8002f5a <HAL_DMA_Abort_IT+0x3a2>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a3a      	ldr	r2, [pc, #232]	@ (8002f64 <HAL_DMA_Abort_IT+0x3ac>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d06d      	beq.n	8002f5a <HAL_DMA_Abort_IT+0x3a2>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a39      	ldr	r2, [pc, #228]	@ (8002f68 <HAL_DMA_Abort_IT+0x3b0>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d068      	beq.n	8002f5a <HAL_DMA_Abort_IT+0x3a2>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a37      	ldr	r2, [pc, #220]	@ (8002f6c <HAL_DMA_Abort_IT+0x3b4>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d063      	beq.n	8002f5a <HAL_DMA_Abort_IT+0x3a2>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a36      	ldr	r2, [pc, #216]	@ (8002f70 <HAL_DMA_Abort_IT+0x3b8>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d05e      	beq.n	8002f5a <HAL_DMA_Abort_IT+0x3a2>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a34      	ldr	r2, [pc, #208]	@ (8002f74 <HAL_DMA_Abort_IT+0x3bc>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d059      	beq.n	8002f5a <HAL_DMA_Abort_IT+0x3a2>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a33      	ldr	r2, [pc, #204]	@ (8002f78 <HAL_DMA_Abort_IT+0x3c0>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d054      	beq.n	8002f5a <HAL_DMA_Abort_IT+0x3a2>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a31      	ldr	r2, [pc, #196]	@ (8002f7c <HAL_DMA_Abort_IT+0x3c4>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d04f      	beq.n	8002f5a <HAL_DMA_Abort_IT+0x3a2>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a30      	ldr	r2, [pc, #192]	@ (8002f80 <HAL_DMA_Abort_IT+0x3c8>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d04a      	beq.n	8002f5a <HAL_DMA_Abort_IT+0x3a2>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a2e      	ldr	r2, [pc, #184]	@ (8002f84 <HAL_DMA_Abort_IT+0x3cc>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d045      	beq.n	8002f5a <HAL_DMA_Abort_IT+0x3a2>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a2d      	ldr	r2, [pc, #180]	@ (8002f88 <HAL_DMA_Abort_IT+0x3d0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d040      	beq.n	8002f5a <HAL_DMA_Abort_IT+0x3a2>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a2b      	ldr	r2, [pc, #172]	@ (8002f8c <HAL_DMA_Abort_IT+0x3d4>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d03b      	beq.n	8002f5a <HAL_DMA_Abort_IT+0x3a2>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a2a      	ldr	r2, [pc, #168]	@ (8002f90 <HAL_DMA_Abort_IT+0x3d8>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d036      	beq.n	8002f5a <HAL_DMA_Abort_IT+0x3a2>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a28      	ldr	r2, [pc, #160]	@ (8002f94 <HAL_DMA_Abort_IT+0x3dc>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d031      	beq.n	8002f5a <HAL_DMA_Abort_IT+0x3a2>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a27      	ldr	r2, [pc, #156]	@ (8002f98 <HAL_DMA_Abort_IT+0x3e0>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d02c      	beq.n	8002f5a <HAL_DMA_Abort_IT+0x3a2>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a25      	ldr	r2, [pc, #148]	@ (8002f9c <HAL_DMA_Abort_IT+0x3e4>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d027      	beq.n	8002f5a <HAL_DMA_Abort_IT+0x3a2>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a24      	ldr	r2, [pc, #144]	@ (8002fa0 <HAL_DMA_Abort_IT+0x3e8>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d022      	beq.n	8002f5a <HAL_DMA_Abort_IT+0x3a2>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a22      	ldr	r2, [pc, #136]	@ (8002fa4 <HAL_DMA_Abort_IT+0x3ec>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d01d      	beq.n	8002f5a <HAL_DMA_Abort_IT+0x3a2>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a21      	ldr	r2, [pc, #132]	@ (8002fa8 <HAL_DMA_Abort_IT+0x3f0>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d018      	beq.n	8002f5a <HAL_DMA_Abort_IT+0x3a2>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a1f      	ldr	r2, [pc, #124]	@ (8002fac <HAL_DMA_Abort_IT+0x3f4>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d013      	beq.n	8002f5a <HAL_DMA_Abort_IT+0x3a2>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a1e      	ldr	r2, [pc, #120]	@ (8002fb0 <HAL_DMA_Abort_IT+0x3f8>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d00e      	beq.n	8002f5a <HAL_DMA_Abort_IT+0x3a2>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a1c      	ldr	r2, [pc, #112]	@ (8002fb4 <HAL_DMA_Abort_IT+0x3fc>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d009      	beq.n	8002f5a <HAL_DMA_Abort_IT+0x3a2>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a1b      	ldr	r2, [pc, #108]	@ (8002fb8 <HAL_DMA_Abort_IT+0x400>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d004      	beq.n	8002f5a <HAL_DMA_Abort_IT+0x3a2>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a19      	ldr	r2, [pc, #100]	@ (8002fbc <HAL_DMA_Abort_IT+0x404>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d132      	bne.n	8002fc0 <HAL_DMA_Abort_IT+0x408>
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e031      	b.n	8002fc2 <HAL_DMA_Abort_IT+0x40a>
 8002f5e:	bf00      	nop
 8002f60:	40020010 	.word	0x40020010
 8002f64:	40020028 	.word	0x40020028
 8002f68:	40020040 	.word	0x40020040
 8002f6c:	40020058 	.word	0x40020058
 8002f70:	40020070 	.word	0x40020070
 8002f74:	40020088 	.word	0x40020088
 8002f78:	400200a0 	.word	0x400200a0
 8002f7c:	400200b8 	.word	0x400200b8
 8002f80:	40020410 	.word	0x40020410
 8002f84:	40020428 	.word	0x40020428
 8002f88:	40020440 	.word	0x40020440
 8002f8c:	40020458 	.word	0x40020458
 8002f90:	40020470 	.word	0x40020470
 8002f94:	40020488 	.word	0x40020488
 8002f98:	400204a0 	.word	0x400204a0
 8002f9c:	400204b8 	.word	0x400204b8
 8002fa0:	58025408 	.word	0x58025408
 8002fa4:	5802541c 	.word	0x5802541c
 8002fa8:	58025430 	.word	0x58025430
 8002fac:	58025444 	.word	0x58025444
 8002fb0:	58025458 	.word	0x58025458
 8002fb4:	5802546c 	.word	0x5802546c
 8002fb8:	58025480 	.word	0x58025480
 8002fbc:	58025494 	.word	0x58025494
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d028      	beq.n	8003018 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fd0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fd4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fda:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fe0:	f003 031f 	and.w	r3, r3, #31
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	409a      	lsls	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002ff4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00c      	beq.n	8003018 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003008:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800300c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003016:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop

08003044 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003044:	b480      	push	{r7}
 8003046:	b089      	sub	sp, #36	@ 0x24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800304e:	2300      	movs	r3, #0
 8003050:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003052:	4b89      	ldr	r3, [pc, #548]	@ (8003278 <HAL_GPIO_Init+0x234>)
 8003054:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003056:	e194      	b.n	8003382 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	2101      	movs	r1, #1
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	fa01 f303 	lsl.w	r3, r1, r3
 8003064:	4013      	ands	r3, r2
 8003066:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 8186 	beq.w	800337c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f003 0303 	and.w	r3, r3, #3
 8003078:	2b01      	cmp	r3, #1
 800307a:	d005      	beq.n	8003088 <HAL_GPIO_Init+0x44>
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f003 0303 	and.w	r3, r3, #3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d130      	bne.n	80030ea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	2203      	movs	r2, #3
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43db      	mvns	r3, r3
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	4013      	ands	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030be:	2201      	movs	r2, #1
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	43db      	mvns	r3, r3
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	4013      	ands	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	091b      	lsrs	r3, r3, #4
 80030d4:	f003 0201 	and.w	r2, r3, #1
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	2b03      	cmp	r3, #3
 80030f4:	d017      	beq.n	8003126 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	2203      	movs	r2, #3
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43db      	mvns	r3, r3
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	4013      	ands	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	4313      	orrs	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d123      	bne.n	800317a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	08da      	lsrs	r2, r3, #3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3208      	adds	r2, #8
 800313a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800313e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	220f      	movs	r2, #15
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	43db      	mvns	r3, r3
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	4013      	ands	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	691a      	ldr	r2, [r3, #16]
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4313      	orrs	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	08da      	lsrs	r2, r3, #3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3208      	adds	r2, #8
 8003174:	69b9      	ldr	r1, [r7, #24]
 8003176:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	2203      	movs	r2, #3
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	43db      	mvns	r3, r3
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	4013      	ands	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f003 0203 	and.w	r2, r3, #3
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f000 80e0 	beq.w	800337c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031bc:	4b2f      	ldr	r3, [pc, #188]	@ (800327c <HAL_GPIO_Init+0x238>)
 80031be:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80031c2:	4a2e      	ldr	r2, [pc, #184]	@ (800327c <HAL_GPIO_Init+0x238>)
 80031c4:	f043 0302 	orr.w	r3, r3, #2
 80031c8:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80031cc:	4b2b      	ldr	r3, [pc, #172]	@ (800327c <HAL_GPIO_Init+0x238>)
 80031ce:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031da:	4a29      	ldr	r2, [pc, #164]	@ (8003280 <HAL_GPIO_Init+0x23c>)
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	089b      	lsrs	r3, r3, #2
 80031e0:	3302      	adds	r3, #2
 80031e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f003 0303 	and.w	r3, r3, #3
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	220f      	movs	r2, #15
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	43db      	mvns	r3, r3
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	4013      	ands	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a20      	ldr	r2, [pc, #128]	@ (8003284 <HAL_GPIO_Init+0x240>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d052      	beq.n	80032ac <HAL_GPIO_Init+0x268>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a1f      	ldr	r2, [pc, #124]	@ (8003288 <HAL_GPIO_Init+0x244>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d031      	beq.n	8003272 <HAL_GPIO_Init+0x22e>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a1e      	ldr	r2, [pc, #120]	@ (800328c <HAL_GPIO_Init+0x248>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d02b      	beq.n	800326e <HAL_GPIO_Init+0x22a>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a1d      	ldr	r2, [pc, #116]	@ (8003290 <HAL_GPIO_Init+0x24c>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d025      	beq.n	800326a <HAL_GPIO_Init+0x226>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a1c      	ldr	r2, [pc, #112]	@ (8003294 <HAL_GPIO_Init+0x250>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d01f      	beq.n	8003266 <HAL_GPIO_Init+0x222>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a1b      	ldr	r2, [pc, #108]	@ (8003298 <HAL_GPIO_Init+0x254>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d019      	beq.n	8003262 <HAL_GPIO_Init+0x21e>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a1a      	ldr	r2, [pc, #104]	@ (800329c <HAL_GPIO_Init+0x258>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d013      	beq.n	800325e <HAL_GPIO_Init+0x21a>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a19      	ldr	r2, [pc, #100]	@ (80032a0 <HAL_GPIO_Init+0x25c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d00d      	beq.n	800325a <HAL_GPIO_Init+0x216>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a18      	ldr	r2, [pc, #96]	@ (80032a4 <HAL_GPIO_Init+0x260>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d007      	beq.n	8003256 <HAL_GPIO_Init+0x212>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a17      	ldr	r2, [pc, #92]	@ (80032a8 <HAL_GPIO_Init+0x264>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d101      	bne.n	8003252 <HAL_GPIO_Init+0x20e>
 800324e:	2309      	movs	r3, #9
 8003250:	e02d      	b.n	80032ae <HAL_GPIO_Init+0x26a>
 8003252:	230a      	movs	r3, #10
 8003254:	e02b      	b.n	80032ae <HAL_GPIO_Init+0x26a>
 8003256:	2308      	movs	r3, #8
 8003258:	e029      	b.n	80032ae <HAL_GPIO_Init+0x26a>
 800325a:	2307      	movs	r3, #7
 800325c:	e027      	b.n	80032ae <HAL_GPIO_Init+0x26a>
 800325e:	2306      	movs	r3, #6
 8003260:	e025      	b.n	80032ae <HAL_GPIO_Init+0x26a>
 8003262:	2305      	movs	r3, #5
 8003264:	e023      	b.n	80032ae <HAL_GPIO_Init+0x26a>
 8003266:	2304      	movs	r3, #4
 8003268:	e021      	b.n	80032ae <HAL_GPIO_Init+0x26a>
 800326a:	2303      	movs	r3, #3
 800326c:	e01f      	b.n	80032ae <HAL_GPIO_Init+0x26a>
 800326e:	2302      	movs	r3, #2
 8003270:	e01d      	b.n	80032ae <HAL_GPIO_Init+0x26a>
 8003272:	2301      	movs	r3, #1
 8003274:	e01b      	b.n	80032ae <HAL_GPIO_Init+0x26a>
 8003276:	bf00      	nop
 8003278:	58000080 	.word	0x58000080
 800327c:	58024400 	.word	0x58024400
 8003280:	58000400 	.word	0x58000400
 8003284:	58020000 	.word	0x58020000
 8003288:	58020400 	.word	0x58020400
 800328c:	58020800 	.word	0x58020800
 8003290:	58020c00 	.word	0x58020c00
 8003294:	58021000 	.word	0x58021000
 8003298:	58021400 	.word	0x58021400
 800329c:	58021800 	.word	0x58021800
 80032a0:	58021c00 	.word	0x58021c00
 80032a4:	58022000 	.word	0x58022000
 80032a8:	58022400 	.word	0x58022400
 80032ac:	2300      	movs	r3, #0
 80032ae:	69fa      	ldr	r2, [r7, #28]
 80032b0:	f002 0203 	and.w	r2, r2, #3
 80032b4:	0092      	lsls	r2, r2, #2
 80032b6:	4093      	lsls	r3, r2
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032be:	4938      	ldr	r1, [pc, #224]	@ (80033a0 <HAL_GPIO_Init+0x35c>)
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	089b      	lsrs	r3, r3, #2
 80032c4:	3302      	adds	r3, #2
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	43db      	mvns	r3, r3
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	4013      	ands	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80032f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80032fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	43db      	mvns	r3, r3
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	4013      	ands	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d003      	beq.n	8003320 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	4313      	orrs	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003320:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	43db      	mvns	r3, r3
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4013      	ands	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d003      	beq.n	800334c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	4313      	orrs	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	43db      	mvns	r3, r3
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	4013      	ands	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	4313      	orrs	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	3301      	adds	r3, #1
 8003380:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	fa22 f303 	lsr.w	r3, r2, r3
 800338c:	2b00      	cmp	r3, #0
 800338e:	f47f ae63 	bne.w	8003058 <HAL_GPIO_Init+0x14>
  }
}
 8003392:	bf00      	nop
 8003394:	bf00      	nop
 8003396:	3724      	adds	r7, #36	@ 0x24
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	58000400 	.word	0x58000400

080033a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	460b      	mov	r3, r1
 80033ae:	807b      	strh	r3, [r7, #2]
 80033b0:	4613      	mov	r3, r2
 80033b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033b4:	787b      	ldrb	r3, [r7, #1]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033ba:	887a      	ldrh	r2, [r7, #2]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80033c0:	e003      	b.n	80033ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80033c2:	887b      	ldrh	r3, [r7, #2]
 80033c4:	041a      	lsls	r2, r3, #16
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	619a      	str	r2, [r3, #24]
}
 80033ca:	bf00      	nop
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr

080033d6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033d6:	b480      	push	{r7}
 80033d8:	b085      	sub	sp, #20
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
 80033de:	460b      	mov	r3, r1
 80033e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033e8:	887a      	ldrh	r2, [r7, #2]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	4013      	ands	r3, r2
 80033ee:	041a      	lsls	r2, r3, #16
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	43d9      	mvns	r1, r3
 80033f4:	887b      	ldrh	r3, [r7, #2]
 80033f6:	400b      	ands	r3, r1
 80033f8:	431a      	orrs	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	619a      	str	r2, [r3, #24]
}
 80033fe:	bf00      	nop
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b086      	sub	sp, #24
 800340e:	af02      	add	r7, sp, #8
 8003410:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e0fe      	b.n	800361a <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b00      	cmp	r3, #0
 8003426:	d106      	bne.n	8003436 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f00a fb8b 	bl	800db4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2203      	movs	r2, #3
 800343a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f006 ffb5 	bl	800a3b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6818      	ldr	r0, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	7c1a      	ldrb	r2, [r3, #16]
 8003450:	f88d 2000 	strb.w	r2, [sp]
 8003454:	3304      	adds	r3, #4
 8003456:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003458:	f006 fe86 	bl	800a168 <USB_CoreInit>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d005      	beq.n	800346e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2202      	movs	r2, #2
 8003466:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e0d5      	b.n	800361a <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2100      	movs	r1, #0
 8003474:	4618      	mov	r0, r3
 8003476:	f006 ffad 	bl	800a3d4 <USB_SetCurrentMode>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d005      	beq.n	800348c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e0c6      	b.n	800361a <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800348c:	2300      	movs	r3, #0
 800348e:	73fb      	strb	r3, [r7, #15]
 8003490:	e04a      	b.n	8003528 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003492:	7bfa      	ldrb	r2, [r7, #15]
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	4613      	mov	r3, r2
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	4413      	add	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	440b      	add	r3, r1
 80034a0:	3315      	adds	r3, #21
 80034a2:	2201      	movs	r2, #1
 80034a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034a6:	7bfa      	ldrb	r2, [r7, #15]
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	4613      	mov	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	4413      	add	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	440b      	add	r3, r1
 80034b4:	3314      	adds	r3, #20
 80034b6:	7bfa      	ldrb	r2, [r7, #15]
 80034b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80034ba:	7bfa      	ldrb	r2, [r7, #15]
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
 80034be:	b298      	uxth	r0, r3
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	4413      	add	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	332e      	adds	r3, #46	@ 0x2e
 80034ce:	4602      	mov	r2, r0
 80034d0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034d2:	7bfa      	ldrb	r2, [r7, #15]
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	4613      	mov	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	4413      	add	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	3318      	adds	r3, #24
 80034e2:	2200      	movs	r2, #0
 80034e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80034e6:	7bfa      	ldrb	r2, [r7, #15]
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	4613      	mov	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	4413      	add	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	440b      	add	r3, r1
 80034f4:	331c      	adds	r3, #28
 80034f6:	2200      	movs	r2, #0
 80034f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80034fa:	7bfa      	ldrb	r2, [r7, #15]
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	4413      	add	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	440b      	add	r3, r1
 8003508:	3320      	adds	r3, #32
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800350e:	7bfa      	ldrb	r2, [r7, #15]
 8003510:	6879      	ldr	r1, [r7, #4]
 8003512:	4613      	mov	r3, r2
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	4413      	add	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	440b      	add	r3, r1
 800351c:	3324      	adds	r3, #36	@ 0x24
 800351e:	2200      	movs	r2, #0
 8003520:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003522:	7bfb      	ldrb	r3, [r7, #15]
 8003524:	3301      	adds	r3, #1
 8003526:	73fb      	strb	r3, [r7, #15]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	791b      	ldrb	r3, [r3, #4]
 800352c:	7bfa      	ldrb	r2, [r7, #15]
 800352e:	429a      	cmp	r2, r3
 8003530:	d3af      	bcc.n	8003492 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003532:	2300      	movs	r3, #0
 8003534:	73fb      	strb	r3, [r7, #15]
 8003536:	e044      	b.n	80035c2 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003538:	7bfa      	ldrb	r2, [r7, #15]
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800354a:	2200      	movs	r2, #0
 800354c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800354e:	7bfa      	ldrb	r2, [r7, #15]
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	4413      	add	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003560:	7bfa      	ldrb	r2, [r7, #15]
 8003562:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003564:	7bfa      	ldrb	r2, [r7, #15]
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	4613      	mov	r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	4413      	add	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003576:	2200      	movs	r2, #0
 8003578:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800357a:	7bfa      	ldrb	r2, [r7, #15]
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	4613      	mov	r3, r2
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	4413      	add	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	440b      	add	r3, r1
 8003588:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003590:	7bfa      	ldrb	r2, [r7, #15]
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	4413      	add	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035a6:	7bfa      	ldrb	r2, [r7, #15]
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	4413      	add	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
 80035be:	3301      	adds	r3, #1
 80035c0:	73fb      	strb	r3, [r7, #15]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	791b      	ldrb	r3, [r3, #4]
 80035c6:	7bfa      	ldrb	r2, [r7, #15]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d3b5      	bcc.n	8003538 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6818      	ldr	r0, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	7c1a      	ldrb	r2, [r3, #16]
 80035d4:	f88d 2000 	strb.w	r2, [sp]
 80035d8:	3304      	adds	r3, #4
 80035da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035dc:	f006 ff46 	bl	800a46c <USB_DevInit>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d005      	beq.n	80035f2 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2202      	movs	r2, #2
 80035ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e013      	b.n	800361a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	7b1b      	ldrb	r3, [r3, #12]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d102      	bne.n	800360e <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f001 f96d 	bl	80048e8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f007 ff85 	bl	800b522 <USB_DevDisconnect>

  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b084      	sub	sp, #16
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003636:	2b01      	cmp	r3, #1
 8003638:	d101      	bne.n	800363e <HAL_PCD_Start+0x1c>
 800363a:	2302      	movs	r3, #2
 800363c:	e022      	b.n	8003684 <HAL_PCD_Start+0x62>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800364e:	2b00      	cmp	r3, #0
 8003650:	d009      	beq.n	8003666 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003656:	2b01      	cmp	r3, #1
 8003658:	d105      	bne.n	8003666 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800365e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f006 fe90 	bl	800a390 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f007 ff33 	bl	800b4e0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800368c:	b590      	push	{r4, r7, lr}
 800368e:	b08d      	sub	sp, #52	@ 0x34
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f007 fff1 	bl	800b68a <USB_GetMode>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f040 84b9 	bne.w	8004022 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f007 ff55 	bl	800b564 <USB_ReadInterrupts>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 84af 	beq.w	8004020 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	0a1b      	lsrs	r3, r3, #8
 80036cc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f007 ff42 	bl	800b564 <USB_ReadInterrupts>
 80036e0:	4603      	mov	r3, r0
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d107      	bne.n	80036fa <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	695a      	ldr	r2, [r3, #20]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f002 0202 	and.w	r2, r2, #2
 80036f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f007 ff30 	bl	800b564 <USB_ReadInterrupts>
 8003704:	4603      	mov	r3, r0
 8003706:	f003 0310 	and.w	r3, r3, #16
 800370a:	2b10      	cmp	r3, #16
 800370c:	d161      	bne.n	80037d2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	699a      	ldr	r2, [r3, #24]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 0210 	bic.w	r2, r2, #16
 800371c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	f003 020f 	and.w	r2, r3, #15
 800372a:	4613      	mov	r3, r2
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	4413      	add	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	4413      	add	r3, r2
 800373a:	3304      	adds	r3, #4
 800373c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	0c5b      	lsrs	r3, r3, #17
 8003742:	f003 030f 	and.w	r3, r3, #15
 8003746:	2b02      	cmp	r3, #2
 8003748:	d124      	bne.n	8003794 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003750:	4013      	ands	r3, r2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d035      	beq.n	80037c2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	091b      	lsrs	r3, r3, #4
 800375e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003760:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003764:	b29b      	uxth	r3, r3
 8003766:	461a      	mov	r2, r3
 8003768:	6a38      	ldr	r0, [r7, #32]
 800376a:	f007 fd67 	bl	800b23c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	091b      	lsrs	r3, r3, #4
 8003776:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800377a:	441a      	add	r2, r3
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	695a      	ldr	r2, [r3, #20]
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	091b      	lsrs	r3, r3, #4
 8003788:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800378c:	441a      	add	r2, r3
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	615a      	str	r2, [r3, #20]
 8003792:	e016      	b.n	80037c2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	0c5b      	lsrs	r3, r3, #17
 8003798:	f003 030f 	and.w	r3, r3, #15
 800379c:	2b06      	cmp	r3, #6
 800379e:	d110      	bne.n	80037c2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80037a6:	2208      	movs	r2, #8
 80037a8:	4619      	mov	r1, r3
 80037aa:	6a38      	ldr	r0, [r7, #32]
 80037ac:	f007 fd46 	bl	800b23c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	695a      	ldr	r2, [r3, #20]
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	091b      	lsrs	r3, r3, #4
 80037b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037bc:	441a      	add	r2, r3
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	699a      	ldr	r2, [r3, #24]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f042 0210 	orr.w	r2, r2, #16
 80037d0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f007 fec4 	bl	800b564 <USB_ReadInterrupts>
 80037dc:	4603      	mov	r3, r0
 80037de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037e2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80037e6:	f040 80a7 	bne.w	8003938 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f007 fec9 	bl	800b58a <USB_ReadDevAllOutEpInterrupt>
 80037f8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80037fa:	e099      	b.n	8003930 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80037fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	f000 808e 	beq.w	8003924 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800380e:	b2d2      	uxtb	r2, r2
 8003810:	4611      	mov	r1, r2
 8003812:	4618      	mov	r0, r3
 8003814:	f007 feed 	bl	800b5f2 <USB_ReadDevOutEPInterrupt>
 8003818:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00c      	beq.n	800383e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003826:	015a      	lsls	r2, r3, #5
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	4413      	add	r3, r2
 800382c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003830:	461a      	mov	r2, r3
 8003832:	2301      	movs	r3, #1
 8003834:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003836:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 fecf 	bl	80045dc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	f003 0308 	and.w	r3, r3, #8
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00c      	beq.n	8003862 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384a:	015a      	lsls	r2, r3, #5
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	4413      	add	r3, r2
 8003850:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003854:	461a      	mov	r2, r3
 8003856:	2308      	movs	r3, #8
 8003858:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800385a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 ffa5 	bl	80047ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	f003 0310 	and.w	r3, r3, #16
 8003868:	2b00      	cmp	r3, #0
 800386a:	d008      	beq.n	800387e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800386c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386e:	015a      	lsls	r2, r3, #5
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	4413      	add	r3, r2
 8003874:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003878:	461a      	mov	r2, r3
 800387a:	2310      	movs	r3, #16
 800387c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d030      	beq.n	80038ea <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003890:	2b80      	cmp	r3, #128	@ 0x80
 8003892:	d109      	bne.n	80038a8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	69fa      	ldr	r2, [r7, #28]
 800389e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038a6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80038a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038aa:	4613      	mov	r3, r2
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	4413      	add	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	4413      	add	r3, r2
 80038ba:	3304      	adds	r3, #4
 80038bc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	78db      	ldrb	r3, [r3, #3]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d108      	bne.n	80038d8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2200      	movs	r2, #0
 80038ca:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80038cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	4619      	mov	r1, r3
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f00a fa6e 	bl	800ddb4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80038d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038da:	015a      	lsls	r2, r3, #5
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	4413      	add	r3, r2
 80038e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038e4:	461a      	mov	r2, r3
 80038e6:	2302      	movs	r3, #2
 80038e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	f003 0320 	and.w	r3, r3, #32
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d008      	beq.n	8003906 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f6:	015a      	lsls	r2, r3, #5
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003900:	461a      	mov	r2, r3
 8003902:	2320      	movs	r3, #32
 8003904:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d009      	beq.n	8003924 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003912:	015a      	lsls	r2, r3, #5
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	4413      	add	r3, r2
 8003918:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800391c:	461a      	mov	r2, r3
 800391e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003922:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003926:	3301      	adds	r3, #1
 8003928:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800392a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800392c:	085b      	lsrs	r3, r3, #1
 800392e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003932:	2b00      	cmp	r3, #0
 8003934:	f47f af62 	bne.w	80037fc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4618      	mov	r0, r3
 800393e:	f007 fe11 	bl	800b564 <USB_ReadInterrupts>
 8003942:	4603      	mov	r3, r0
 8003944:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003948:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800394c:	f040 80db 	bne.w	8003b06 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4618      	mov	r0, r3
 8003956:	f007 fe32 	bl	800b5be <USB_ReadDevAllInEpInterrupt>
 800395a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800395c:	2300      	movs	r3, #0
 800395e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003960:	e0cd      	b.n	8003afe <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 80c2 	beq.w	8003af2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003974:	b2d2      	uxtb	r2, r2
 8003976:	4611      	mov	r1, r2
 8003978:	4618      	mov	r0, r3
 800397a:	f007 fe58 	bl	800b62e <USB_ReadDevInEPInterrupt>
 800397e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d057      	beq.n	8003a3a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800398a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398c:	f003 030f 	and.w	r3, r3, #15
 8003990:	2201      	movs	r2, #1
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800399e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	43db      	mvns	r3, r3
 80039a4:	69f9      	ldr	r1, [r7, #28]
 80039a6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80039aa:	4013      	ands	r3, r2
 80039ac:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80039ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b0:	015a      	lsls	r2, r3, #5
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039ba:	461a      	mov	r2, r3
 80039bc:	2301      	movs	r3, #1
 80039be:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	799b      	ldrb	r3, [r3, #6]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d132      	bne.n	8003a2e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80039c8:	6879      	ldr	r1, [r7, #4]
 80039ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039cc:	4613      	mov	r3, r2
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	4413      	add	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	3320      	adds	r3, #32
 80039d8:	6819      	ldr	r1, [r3, #0]
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039de:	4613      	mov	r3, r2
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	4413      	add	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4403      	add	r3, r0
 80039e8:	331c      	adds	r3, #28
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4419      	add	r1, r3
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039f2:	4613      	mov	r3, r2
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	4413      	add	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4403      	add	r3, r0
 80039fc:	3320      	adds	r3, #32
 80039fe:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d113      	bne.n	8003a2e <HAL_PCD_IRQHandler+0x3a2>
 8003a06:	6879      	ldr	r1, [r7, #4]
 8003a08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	4413      	add	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	440b      	add	r3, r1
 8003a14:	3324      	adds	r3, #36	@ 0x24
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d108      	bne.n	8003a2e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6818      	ldr	r0, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a26:	461a      	mov	r2, r3
 8003a28:	2101      	movs	r1, #1
 8003a2a:	f007 fe61 	bl	800b6f0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	4619      	mov	r1, r3
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f00a f938 	bl	800dcaa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	f003 0308 	and.w	r3, r3, #8
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d008      	beq.n	8003a56 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a46:	015a      	lsls	r2, r3, #5
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a50:	461a      	mov	r2, r3
 8003a52:	2308      	movs	r3, #8
 8003a54:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	f003 0310 	and.w	r3, r3, #16
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d008      	beq.n	8003a72 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a62:	015a      	lsls	r2, r3, #5
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	2310      	movs	r3, #16
 8003a70:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d008      	beq.n	8003a8e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a88:	461a      	mov	r2, r3
 8003a8a:	2340      	movs	r3, #64	@ 0x40
 8003a8c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d023      	beq.n	8003ae0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003a98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a9a:	6a38      	ldr	r0, [r7, #32]
 8003a9c:	f006 fe44 	bl	800a728 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003aa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	4413      	add	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	3310      	adds	r3, #16
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	4413      	add	r3, r2
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	78db      	ldrb	r3, [r3, #3]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d108      	bne.n	8003ace <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f00a f985 	bl	800ddd8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad0:	015a      	lsls	r2, r3, #5
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ada:	461a      	mov	r2, r3
 8003adc:	2302      	movs	r3, #2
 8003ade:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003aea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 fce8 	bl	80044c2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af4:	3301      	adds	r3, #1
 8003af6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003afa:	085b      	lsrs	r3, r3, #1
 8003afc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f47f af2e 	bne.w	8003962 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f007 fd2a 	bl	800b564 <USB_ReadInterrupts>
 8003b10:	4603      	mov	r3, r0
 8003b12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b1a:	d122      	bne.n	8003b62 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	69fa      	ldr	r2, [r7, #28]
 8003b26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b2a:	f023 0301 	bic.w	r3, r3, #1
 8003b2e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d108      	bne.n	8003b4c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b42:	2100      	movs	r1, #0
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 fef3 	bl	8004930 <HAL_PCDEx_LPM_Callback>
 8003b4a:	e002      	b.n	8003b52 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f00a f923 	bl	800dd98 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	695a      	ldr	r2, [r3, #20]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003b60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f007 fcfc 	bl	800b564 <USB_ReadInterrupts>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b76:	d112      	bne.n	8003b9e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d102      	bne.n	8003b8e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f00a f8df 	bl	800dd4c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	695a      	ldr	r2, [r3, #20]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003b9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f007 fcde 	bl	800b564 <USB_ReadInterrupts>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003bae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003bb2:	d121      	bne.n	8003bf8 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695a      	ldr	r2, [r3, #20]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003bc2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d111      	bne.n	8003bf2 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bdc:	089b      	lsrs	r3, r3, #2
 8003bde:	f003 020f 	and.w	r2, r3, #15
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003be8:	2101      	movs	r1, #1
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 fea0 	bl	8004930 <HAL_PCDEx_LPM_Callback>
 8003bf0:	e002      	b.n	8003bf8 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f00a f8aa 	bl	800dd4c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f007 fcb1 	bl	800b564 <USB_ReadInterrupts>
 8003c02:	4603      	mov	r3, r0
 8003c04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c0c:	f040 80b7 	bne.w	8003d7e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	69fa      	ldr	r2, [r7, #28]
 8003c1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c1e:	f023 0301 	bic.w	r3, r3, #1
 8003c22:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2110      	movs	r1, #16
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f006 fd7c 	bl	800a728 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c30:	2300      	movs	r3, #0
 8003c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c34:	e046      	b.n	8003cc4 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c38:	015a      	lsls	r2, r3, #5
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c42:	461a      	mov	r2, r3
 8003c44:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003c48:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c4c:	015a      	lsls	r2, r3, #5
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	4413      	add	r3, r2
 8003c52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c5a:	0151      	lsls	r1, r2, #5
 8003c5c:	69fa      	ldr	r2, [r7, #28]
 8003c5e:	440a      	add	r2, r1
 8003c60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c64:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003c68:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c6c:	015a      	lsls	r2, r3, #5
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	4413      	add	r3, r2
 8003c72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c76:	461a      	mov	r2, r3
 8003c78:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003c7c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c80:	015a      	lsls	r2, r3, #5
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	4413      	add	r3, r2
 8003c86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c8e:	0151      	lsls	r1, r2, #5
 8003c90:	69fa      	ldr	r2, [r7, #28]
 8003c92:	440a      	add	r2, r1
 8003c94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c98:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003c9c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ca0:	015a      	lsls	r2, r3, #5
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cae:	0151      	lsls	r1, r2, #5
 8003cb0:	69fa      	ldr	r2, [r7, #28]
 8003cb2:	440a      	add	r2, r1
 8003cb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003cb8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003cbc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	791b      	ldrb	r3, [r3, #4]
 8003cc8:	461a      	mov	r2, r3
 8003cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d3b2      	bcc.n	8003c36 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	69fa      	ldr	r2, [r7, #28]
 8003cda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cde:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003ce2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	7bdb      	ldrb	r3, [r3, #15]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d016      	beq.n	8003d1a <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cf6:	69fa      	ldr	r2, [r7, #28]
 8003cf8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cfc:	f043 030b 	orr.w	r3, r3, #11
 8003d00:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d0c:	69fa      	ldr	r2, [r7, #28]
 8003d0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d12:	f043 030b 	orr.w	r3, r3, #11
 8003d16:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d18:	e015      	b.n	8003d46 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d20:	695a      	ldr	r2, [r3, #20]
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d28:	4619      	mov	r1, r3
 8003d2a:	f242 032b 	movw	r3, #8235	@ 0x202b
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	69fa      	ldr	r2, [r7, #28]
 8003d3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d40:	f043 030b 	orr.w	r3, r3, #11
 8003d44:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	69fa      	ldr	r2, [r7, #28]
 8003d50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d54:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003d58:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6818      	ldr	r0, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d68:	461a      	mov	r2, r3
 8003d6a:	f007 fcc1 	bl	800b6f0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	695a      	ldr	r2, [r3, #20]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003d7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f007 fbee 	bl	800b564 <USB_ReadInterrupts>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d92:	d123      	bne.n	8003ddc <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f007 fc85 	bl	800b6a8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f006 fd39 	bl	800a81a <USB_GetDevSpeed>
 8003da8:	4603      	mov	r3, r0
 8003daa:	461a      	mov	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681c      	ldr	r4, [r3, #0]
 8003db4:	f001 fdde 	bl	8005974 <HAL_RCC_GetHCLKFreq>
 8003db8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	4620      	mov	r0, r4
 8003dc2:	f006 fa43 	bl	800a24c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f009 ff97 	bl	800dcfa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	695a      	ldr	r2, [r3, #20]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003dda:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f007 fbbf 	bl	800b564 <USB_ReadInterrupts>
 8003de6:	4603      	mov	r3, r0
 8003de8:	f003 0308 	and.w	r3, r3, #8
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	d10a      	bne.n	8003e06 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f009 ff74 	bl	800dcde <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	695a      	ldr	r2, [r3, #20]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f002 0208 	and.w	r2, r2, #8
 8003e04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f007 fbaa 	bl	800b564 <USB_ReadInterrupts>
 8003e10:	4603      	mov	r3, r0
 8003e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e16:	2b80      	cmp	r3, #128	@ 0x80
 8003e18:	d123      	bne.n	8003e62 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e22:	6a3b      	ldr	r3, [r7, #32]
 8003e24:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e26:	2301      	movs	r3, #1
 8003e28:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e2a:	e014      	b.n	8003e56 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003e2c:	6879      	ldr	r1, [r7, #4]
 8003e2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e30:	4613      	mov	r3, r2
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	4413      	add	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	440b      	add	r3, r1
 8003e3a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d105      	bne.n	8003e50 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	4619      	mov	r1, r3
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 fb08 	bl	8004460 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e52:	3301      	adds	r3, #1
 8003e54:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	791b      	ldrb	r3, [r3, #4]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d3e4      	bcc.n	8003e2c <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f007 fb7c 	bl	800b564 <USB_ReadInterrupts>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e76:	d13c      	bne.n	8003ef2 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e78:	2301      	movs	r3, #1
 8003e7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e7c:	e02b      	b.n	8003ed6 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e80:	015a      	lsls	r2, r3, #5
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	4413      	add	r3, r2
 8003e86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e8e:	6879      	ldr	r1, [r7, #4]
 8003e90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e92:	4613      	mov	r3, r2
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	4413      	add	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	3318      	adds	r3, #24
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d115      	bne.n	8003ed0 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003ea4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	da12      	bge.n	8003ed0 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003eaa:	6879      	ldr	r1, [r7, #4]
 8003eac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eae:	4613      	mov	r3, r2
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	4413      	add	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	440b      	add	r3, r1
 8003eb8:	3317      	adds	r3, #23
 8003eba:	2201      	movs	r2, #1
 8003ebc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	4619      	mov	r1, r3
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 fac8 	bl	8004460 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	791b      	ldrb	r3, [r3, #4]
 8003eda:	461a      	mov	r2, r3
 8003edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d3cd      	bcc.n	8003e7e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	695a      	ldr	r2, [r3, #20]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003ef0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f007 fb34 	bl	800b564 <USB_ReadInterrupts>
 8003efc:	4603      	mov	r3, r0
 8003efe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f06:	d156      	bne.n	8003fb6 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f08:	2301      	movs	r3, #1
 8003f0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f0c:	e045      	b.n	8003f9a <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f10:	015a      	lsls	r2, r3, #5
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	4413      	add	r3, r2
 8003f16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f1e:	6879      	ldr	r1, [r7, #4]
 8003f20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f22:	4613      	mov	r3, r2
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	4413      	add	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	440b      	add	r3, r1
 8003f2c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d12e      	bne.n	8003f94 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f36:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	da2b      	bge.n	8003f94 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003f48:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d121      	bne.n	8003f94 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003f50:	6879      	ldr	r1, [r7, #4]
 8003f52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f54:	4613      	mov	r3, r2
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	4413      	add	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003f62:	2201      	movs	r2, #1
 8003f64:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003f66:	6a3b      	ldr	r3, [r7, #32]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003f6e:	6a3b      	ldr	r3, [r7, #32]
 8003f70:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003f72:	6a3b      	ldr	r3, [r7, #32]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10a      	bne.n	8003f94 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	69fa      	ldr	r2, [r7, #28]
 8003f88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f8c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f90:	6053      	str	r3, [r2, #4]
            break;
 8003f92:	e008      	b.n	8003fa6 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f96:	3301      	adds	r3, #1
 8003f98:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	791b      	ldrb	r3, [r3, #4]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d3b3      	bcc.n	8003f0e <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	695a      	ldr	r2, [r3, #20]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003fb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f007 fad2 	bl	800b564 <USB_ReadInterrupts>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fca:	d10a      	bne.n	8003fe2 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f009 ff15 	bl	800ddfc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	695a      	ldr	r2, [r3, #20]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003fe0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f007 fabc 	bl	800b564 <USB_ReadInterrupts>
 8003fec:	4603      	mov	r3, r0
 8003fee:	f003 0304 	and.w	r3, r3, #4
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d115      	bne.n	8004022 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	d002      	beq.n	800400e <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f009 ff05 	bl	800de18 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6859      	ldr	r1, [r3, #4]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	430a      	orrs	r2, r1
 800401c:	605a      	str	r2, [r3, #4]
 800401e:	e000      	b.n	8004022 <HAL_PCD_IRQHandler+0x996>
      return;
 8004020:	bf00      	nop
    }
  }
}
 8004022:	3734      	adds	r7, #52	@ 0x34
 8004024:	46bd      	mov	sp, r7
 8004026:	bd90      	pop	{r4, r7, pc}

08004028 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	460b      	mov	r3, r1
 8004032:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800403a:	2b01      	cmp	r3, #1
 800403c:	d101      	bne.n	8004042 <HAL_PCD_SetAddress+0x1a>
 800403e:	2302      	movs	r3, #2
 8004040:	e012      	b.n	8004068 <HAL_PCD_SetAddress+0x40>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	78fa      	ldrb	r2, [r7, #3]
 800404e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	78fa      	ldrb	r2, [r7, #3]
 8004056:	4611      	mov	r1, r2
 8004058:	4618      	mov	r0, r3
 800405a:	f007 fa1b 	bl	800b494 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	4608      	mov	r0, r1
 800407a:	4611      	mov	r1, r2
 800407c:	461a      	mov	r2, r3
 800407e:	4603      	mov	r3, r0
 8004080:	70fb      	strb	r3, [r7, #3]
 8004082:	460b      	mov	r3, r1
 8004084:	803b      	strh	r3, [r7, #0]
 8004086:	4613      	mov	r3, r2
 8004088:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800408a:	2300      	movs	r3, #0
 800408c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800408e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004092:	2b00      	cmp	r3, #0
 8004094:	da0f      	bge.n	80040b6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004096:	78fb      	ldrb	r3, [r7, #3]
 8004098:	f003 020f 	and.w	r2, r3, #15
 800409c:	4613      	mov	r3, r2
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	4413      	add	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	3310      	adds	r3, #16
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	4413      	add	r3, r2
 80040aa:	3304      	adds	r3, #4
 80040ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2201      	movs	r2, #1
 80040b2:	705a      	strb	r2, [r3, #1]
 80040b4:	e00f      	b.n	80040d6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040b6:	78fb      	ldrb	r3, [r7, #3]
 80040b8:	f003 020f 	and.w	r2, r3, #15
 80040bc:	4613      	mov	r3, r2
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	4413      	add	r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	4413      	add	r3, r2
 80040cc:	3304      	adds	r3, #4
 80040ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80040d6:	78fb      	ldrb	r3, [r7, #3]
 80040d8:	f003 030f 	and.w	r3, r3, #15
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80040e2:	883a      	ldrh	r2, [r7, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	78ba      	ldrb	r2, [r7, #2]
 80040ec:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	785b      	ldrb	r3, [r3, #1]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d004      	beq.n	8004100 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	461a      	mov	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004100:	78bb      	ldrb	r3, [r7, #2]
 8004102:	2b02      	cmp	r3, #2
 8004104:	d102      	bne.n	800410c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004112:	2b01      	cmp	r3, #1
 8004114:	d101      	bne.n	800411a <HAL_PCD_EP_Open+0xaa>
 8004116:	2302      	movs	r3, #2
 8004118:	e00e      	b.n	8004138 <HAL_PCD_EP_Open+0xc8>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68f9      	ldr	r1, [r7, #12]
 8004128:	4618      	mov	r0, r3
 800412a:	f006 fb9b 	bl	800a864 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004136:	7afb      	ldrb	r3, [r7, #11]
}
 8004138:	4618      	mov	r0, r3
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	460b      	mov	r3, r1
 800414a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800414c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004150:	2b00      	cmp	r3, #0
 8004152:	da0f      	bge.n	8004174 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004154:	78fb      	ldrb	r3, [r7, #3]
 8004156:	f003 020f 	and.w	r2, r3, #15
 800415a:	4613      	mov	r3, r2
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	4413      	add	r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	3310      	adds	r3, #16
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	4413      	add	r3, r2
 8004168:	3304      	adds	r3, #4
 800416a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2201      	movs	r2, #1
 8004170:	705a      	strb	r2, [r3, #1]
 8004172:	e00f      	b.n	8004194 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004174:	78fb      	ldrb	r3, [r7, #3]
 8004176:	f003 020f 	and.w	r2, r3, #15
 800417a:	4613      	mov	r3, r2
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	4413      	add	r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	4413      	add	r3, r2
 800418a:	3304      	adds	r3, #4
 800418c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004194:	78fb      	ldrb	r3, [r7, #3]
 8004196:	f003 030f 	and.w	r3, r3, #15
 800419a:	b2da      	uxtb	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d101      	bne.n	80041ae <HAL_PCD_EP_Close+0x6e>
 80041aa:	2302      	movs	r3, #2
 80041ac:	e00e      	b.n	80041cc <HAL_PCD_EP_Close+0x8c>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68f9      	ldr	r1, [r7, #12]
 80041bc:	4618      	mov	r0, r3
 80041be:	f006 fbd9 	bl	800a974 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	607a      	str	r2, [r7, #4]
 80041de:	603b      	str	r3, [r7, #0]
 80041e0:	460b      	mov	r3, r1
 80041e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041e4:	7afb      	ldrb	r3, [r7, #11]
 80041e6:	f003 020f 	and.w	r2, r3, #15
 80041ea:	4613      	mov	r3, r2
 80041ec:	00db      	lsls	r3, r3, #3
 80041ee:	4413      	add	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	4413      	add	r3, r2
 80041fa:	3304      	adds	r3, #4
 80041fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	2200      	movs	r2, #0
 800420e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	2200      	movs	r2, #0
 8004214:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004216:	7afb      	ldrb	r3, [r7, #11]
 8004218:	f003 030f 	and.w	r3, r3, #15
 800421c:	b2da      	uxtb	r2, r3
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	799b      	ldrb	r3, [r3, #6]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d102      	bne.n	8004230 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6818      	ldr	r0, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	799b      	ldrb	r3, [r3, #6]
 8004238:	461a      	mov	r2, r3
 800423a:	6979      	ldr	r1, [r7, #20]
 800423c:	f006 fc76 	bl	800ab2c <USB_EPStartXfer>

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3718      	adds	r7, #24
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
 8004252:	460b      	mov	r3, r1
 8004254:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004256:	78fb      	ldrb	r3, [r7, #3]
 8004258:	f003 020f 	and.w	r2, r3, #15
 800425c:	6879      	ldr	r1, [r7, #4]
 800425e:	4613      	mov	r3, r2
 8004260:	00db      	lsls	r3, r3, #3
 8004262:	4413      	add	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	440b      	add	r3, r1
 8004268:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800426c:	681b      	ldr	r3, [r3, #0]
}
 800426e:	4618      	mov	r0, r3
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b086      	sub	sp, #24
 800427e:	af00      	add	r7, sp, #0
 8004280:	60f8      	str	r0, [r7, #12]
 8004282:	607a      	str	r2, [r7, #4]
 8004284:	603b      	str	r3, [r7, #0]
 8004286:	460b      	mov	r3, r1
 8004288:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800428a:	7afb      	ldrb	r3, [r7, #11]
 800428c:	f003 020f 	and.w	r2, r3, #15
 8004290:	4613      	mov	r3, r2
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	4413      	add	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	3310      	adds	r3, #16
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	4413      	add	r3, r2
 800429e:	3304      	adds	r3, #4
 80042a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	2200      	movs	r2, #0
 80042b2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	2201      	movs	r2, #1
 80042b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042ba:	7afb      	ldrb	r3, [r7, #11]
 80042bc:	f003 030f 	and.w	r3, r3, #15
 80042c0:	b2da      	uxtb	r2, r3
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	799b      	ldrb	r3, [r3, #6]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d102      	bne.n	80042d4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6818      	ldr	r0, [r3, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	799b      	ldrb	r3, [r3, #6]
 80042dc:	461a      	mov	r2, r3
 80042de:	6979      	ldr	r1, [r7, #20]
 80042e0:	f006 fc24 	bl	800ab2c <USB_EPStartXfer>

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3718      	adds	r7, #24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b084      	sub	sp, #16
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
 80042f6:	460b      	mov	r3, r1
 80042f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80042fa:	78fb      	ldrb	r3, [r7, #3]
 80042fc:	f003 030f 	and.w	r3, r3, #15
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	7912      	ldrb	r2, [r2, #4]
 8004304:	4293      	cmp	r3, r2
 8004306:	d901      	bls.n	800430c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e04f      	b.n	80043ac <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800430c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004310:	2b00      	cmp	r3, #0
 8004312:	da0f      	bge.n	8004334 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004314:	78fb      	ldrb	r3, [r7, #3]
 8004316:	f003 020f 	and.w	r2, r3, #15
 800431a:	4613      	mov	r3, r2
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	4413      	add	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	3310      	adds	r3, #16
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	4413      	add	r3, r2
 8004328:	3304      	adds	r3, #4
 800432a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2201      	movs	r2, #1
 8004330:	705a      	strb	r2, [r3, #1]
 8004332:	e00d      	b.n	8004350 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004334:	78fa      	ldrb	r2, [r7, #3]
 8004336:	4613      	mov	r3, r2
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	4413      	add	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	4413      	add	r3, r2
 8004346:	3304      	adds	r3, #4
 8004348:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2201      	movs	r2, #1
 8004354:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004356:	78fb      	ldrb	r3, [r7, #3]
 8004358:	f003 030f 	and.w	r3, r3, #15
 800435c:	b2da      	uxtb	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004368:	2b01      	cmp	r3, #1
 800436a:	d101      	bne.n	8004370 <HAL_PCD_EP_SetStall+0x82>
 800436c:	2302      	movs	r3, #2
 800436e:	e01d      	b.n	80043ac <HAL_PCD_EP_SetStall+0xbe>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68f9      	ldr	r1, [r7, #12]
 800437e:	4618      	mov	r0, r3
 8004380:	f006 ffb4 	bl	800b2ec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004384:	78fb      	ldrb	r3, [r7, #3]
 8004386:	f003 030f 	and.w	r3, r3, #15
 800438a:	2b00      	cmp	r3, #0
 800438c:	d109      	bne.n	80043a2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6818      	ldr	r0, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	7999      	ldrb	r1, [r3, #6]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800439c:	461a      	mov	r2, r3
 800439e:	f007 f9a7 	bl	800b6f0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	460b      	mov	r3, r1
 80043be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80043c0:	78fb      	ldrb	r3, [r7, #3]
 80043c2:	f003 030f 	and.w	r3, r3, #15
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	7912      	ldrb	r2, [r2, #4]
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d901      	bls.n	80043d2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e042      	b.n	8004458 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80043d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	da0f      	bge.n	80043fa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043da:	78fb      	ldrb	r3, [r7, #3]
 80043dc:	f003 020f 	and.w	r2, r3, #15
 80043e0:	4613      	mov	r3, r2
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	4413      	add	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	3310      	adds	r3, #16
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	4413      	add	r3, r2
 80043ee:	3304      	adds	r3, #4
 80043f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2201      	movs	r2, #1
 80043f6:	705a      	strb	r2, [r3, #1]
 80043f8:	e00f      	b.n	800441a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043fa:	78fb      	ldrb	r3, [r7, #3]
 80043fc:	f003 020f 	and.w	r2, r3, #15
 8004400:	4613      	mov	r3, r2
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	4413      	add	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	4413      	add	r3, r2
 8004410:	3304      	adds	r3, #4
 8004412:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004420:	78fb      	ldrb	r3, [r7, #3]
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	b2da      	uxtb	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004432:	2b01      	cmp	r3, #1
 8004434:	d101      	bne.n	800443a <HAL_PCD_EP_ClrStall+0x86>
 8004436:	2302      	movs	r3, #2
 8004438:	e00e      	b.n	8004458 <HAL_PCD_EP_ClrStall+0xa4>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68f9      	ldr	r1, [r7, #12]
 8004448:	4618      	mov	r0, r3
 800444a:	f006 ffbd 	bl	800b3c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	460b      	mov	r3, r1
 800446a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800446c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004470:	2b00      	cmp	r3, #0
 8004472:	da0c      	bge.n	800448e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004474:	78fb      	ldrb	r3, [r7, #3]
 8004476:	f003 020f 	and.w	r2, r3, #15
 800447a:	4613      	mov	r3, r2
 800447c:	00db      	lsls	r3, r3, #3
 800447e:	4413      	add	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	3310      	adds	r3, #16
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	4413      	add	r3, r2
 8004488:	3304      	adds	r3, #4
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	e00c      	b.n	80044a8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800448e:	78fb      	ldrb	r3, [r7, #3]
 8004490:	f003 020f 	and.w	r2, r3, #15
 8004494:	4613      	mov	r3, r2
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	4413      	add	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	4413      	add	r3, r2
 80044a4:	3304      	adds	r3, #4
 80044a6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68f9      	ldr	r1, [r7, #12]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f006 fddc 	bl	800b06c <USB_EPStopXfer>
 80044b4:	4603      	mov	r3, r0
 80044b6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80044b8:	7afb      	ldrb	r3, [r7, #11]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b08a      	sub	sp, #40	@ 0x28
 80044c6:	af02      	add	r7, sp, #8
 80044c8:	6078      	str	r0, [r7, #4]
 80044ca:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	4613      	mov	r3, r2
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	4413      	add	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	3310      	adds	r3, #16
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	4413      	add	r3, r2
 80044e6:	3304      	adds	r3, #4
 80044e8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	695a      	ldr	r2, [r3, #20]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d901      	bls.n	80044fa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e06b      	b.n	80045d2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	691a      	ldr	r2, [r3, #16]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	69fa      	ldr	r2, [r7, #28]
 800450c:	429a      	cmp	r2, r3
 800450e:	d902      	bls.n	8004516 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	3303      	adds	r3, #3
 800451a:	089b      	lsrs	r3, r3, #2
 800451c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800451e:	e02a      	b.n	8004576 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	691a      	ldr	r2, [r3, #16]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	69fa      	ldr	r2, [r7, #28]
 8004532:	429a      	cmp	r2, r3
 8004534:	d902      	bls.n	800453c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	3303      	adds	r3, #3
 8004540:	089b      	lsrs	r3, r3, #2
 8004542:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	68d9      	ldr	r1, [r3, #12]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	b2da      	uxtb	r2, r3
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004554:	9300      	str	r3, [sp, #0]
 8004556:	4603      	mov	r3, r0
 8004558:	6978      	ldr	r0, [r7, #20]
 800455a:	f006 fe31 	bl	800b1c0 <USB_WritePacket>

    ep->xfer_buff  += len;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	68da      	ldr	r2, [r3, #12]
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	441a      	add	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	695a      	ldr	r2, [r3, #20]
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	441a      	add	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	015a      	lsls	r2, r3, #5
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	4413      	add	r3, r2
 800457e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	429a      	cmp	r2, r3
 800458a:	d809      	bhi.n	80045a0 <PCD_WriteEmptyTxFifo+0xde>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	695a      	ldr	r2, [r3, #20]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004594:	429a      	cmp	r2, r3
 8004596:	d203      	bcs.n	80045a0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1bf      	bne.n	8004520 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	691a      	ldr	r2, [r3, #16]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d811      	bhi.n	80045d0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	f003 030f 	and.w	r3, r3, #15
 80045b2:	2201      	movs	r2, #1
 80045b4:	fa02 f303 	lsl.w	r3, r2, r3
 80045b8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	43db      	mvns	r3, r3
 80045c6:	6939      	ldr	r1, [r7, #16]
 80045c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80045cc:	4013      	ands	r3, r2
 80045ce:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3720      	adds	r7, #32
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
	...

080045dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b088      	sub	sp, #32
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	333c      	adds	r3, #60	@ 0x3c
 80045f4:	3304      	adds	r3, #4
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	015a      	lsls	r2, r3, #5
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	4413      	add	r3, r2
 8004602:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	799b      	ldrb	r3, [r3, #6]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d17b      	bne.n	800470a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	f003 0308 	and.w	r3, r3, #8
 8004618:	2b00      	cmp	r3, #0
 800461a:	d015      	beq.n	8004648 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	4a61      	ldr	r2, [pc, #388]	@ (80047a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004620:	4293      	cmp	r3, r2
 8004622:	f240 80b9 	bls.w	8004798 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 80b3 	beq.w	8004798 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	015a      	lsls	r2, r3, #5
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	4413      	add	r3, r2
 800463a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800463e:	461a      	mov	r2, r3
 8004640:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004644:	6093      	str	r3, [r2, #8]
 8004646:	e0a7      	b.n	8004798 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	f003 0320 	and.w	r3, r3, #32
 800464e:	2b00      	cmp	r3, #0
 8004650:	d009      	beq.n	8004666 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	015a      	lsls	r2, r3, #5
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	4413      	add	r3, r2
 800465a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800465e:	461a      	mov	r2, r3
 8004660:	2320      	movs	r3, #32
 8004662:	6093      	str	r3, [r2, #8]
 8004664:	e098      	b.n	8004798 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800466c:	2b00      	cmp	r3, #0
 800466e:	f040 8093 	bne.w	8004798 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	4a4b      	ldr	r2, [pc, #300]	@ (80047a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d90f      	bls.n	800469a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00a      	beq.n	800469a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	015a      	lsls	r2, r3, #5
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	4413      	add	r3, r2
 800468c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004690:	461a      	mov	r2, r3
 8004692:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004696:	6093      	str	r3, [r2, #8]
 8004698:	e07e      	b.n	8004798 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	4613      	mov	r3, r2
 800469e:	00db      	lsls	r3, r3, #3
 80046a0:	4413      	add	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	4413      	add	r3, r2
 80046ac:	3304      	adds	r3, #4
 80046ae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6a1a      	ldr	r2, [r3, #32]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	0159      	lsls	r1, r3, #5
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	440b      	add	r3, r1
 80046bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046c6:	1ad2      	subs	r2, r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d114      	bne.n	80046fc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d109      	bne.n	80046ee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6818      	ldr	r0, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80046e4:	461a      	mov	r2, r3
 80046e6:	2101      	movs	r1, #1
 80046e8:	f007 f802 	bl	800b6f0 <USB_EP0_OutStart>
 80046ec:	e006      	b.n	80046fc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	68da      	ldr	r2, [r3, #12]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	441a      	add	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	4619      	mov	r1, r3
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f009 fab6 	bl	800dc74 <HAL_PCD_DataOutStageCallback>
 8004708:	e046      	b.n	8004798 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	4a26      	ldr	r2, [pc, #152]	@ (80047a8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d124      	bne.n	800475c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00a      	beq.n	8004732 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	4413      	add	r3, r2
 8004724:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004728:	461a      	mov	r2, r3
 800472a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800472e:	6093      	str	r3, [r2, #8]
 8004730:	e032      	b.n	8004798 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	f003 0320 	and.w	r3, r3, #32
 8004738:	2b00      	cmp	r3, #0
 800473a:	d008      	beq.n	800474e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	015a      	lsls	r2, r3, #5
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	4413      	add	r3, r2
 8004744:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004748:	461a      	mov	r2, r3
 800474a:	2320      	movs	r3, #32
 800474c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	b2db      	uxtb	r3, r3
 8004752:	4619      	mov	r1, r3
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f009 fa8d 	bl	800dc74 <HAL_PCD_DataOutStageCallback>
 800475a:	e01d      	b.n	8004798 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d114      	bne.n	800478c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004762:	6879      	ldr	r1, [r7, #4]
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	4613      	mov	r3, r2
 8004768:	00db      	lsls	r3, r3, #3
 800476a:	4413      	add	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	440b      	add	r3, r1
 8004770:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d108      	bne.n	800478c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6818      	ldr	r0, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004784:	461a      	mov	r2, r3
 8004786:	2100      	movs	r1, #0
 8004788:	f006 ffb2 	bl	800b6f0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	b2db      	uxtb	r3, r3
 8004790:	4619      	mov	r1, r3
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f009 fa6e 	bl	800dc74 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3720      	adds	r7, #32
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	4f54300a 	.word	0x4f54300a
 80047a8:	4f54310a 	.word	0x4f54310a

080047ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	333c      	adds	r3, #60	@ 0x3c
 80047c4:	3304      	adds	r3, #4
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	015a      	lsls	r2, r3, #5
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	4a15      	ldr	r2, [pc, #84]	@ (8004834 <PCD_EP_OutSetupPacket_int+0x88>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d90e      	bls.n	8004800 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d009      	beq.n	8004800 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	015a      	lsls	r2, r3, #5
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	4413      	add	r3, r2
 80047f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047f8:	461a      	mov	r2, r3
 80047fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f009 fa25 	bl	800dc50 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	4a0a      	ldr	r2, [pc, #40]	@ (8004834 <PCD_EP_OutSetupPacket_int+0x88>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d90c      	bls.n	8004828 <PCD_EP_OutSetupPacket_int+0x7c>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	799b      	ldrb	r3, [r3, #6]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d108      	bne.n	8004828 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6818      	ldr	r0, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004820:	461a      	mov	r2, r3
 8004822:	2101      	movs	r1, #1
 8004824:	f006 ff64 	bl	800b6f0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3718      	adds	r7, #24
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	4f54300a 	.word	0x4f54300a

08004838 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	460b      	mov	r3, r1
 8004842:	70fb      	strb	r3, [r7, #3]
 8004844:	4613      	mov	r3, r2
 8004846:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004850:	78fb      	ldrb	r3, [r7, #3]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d107      	bne.n	8004866 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004856:	883b      	ldrh	r3, [r7, #0]
 8004858:	0419      	lsls	r1, r3, #16
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	430a      	orrs	r2, r1
 8004862:	629a      	str	r2, [r3, #40]	@ 0x28
 8004864:	e028      	b.n	80048b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800486c:	0c1b      	lsrs	r3, r3, #16
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	4413      	add	r3, r2
 8004872:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004874:	2300      	movs	r3, #0
 8004876:	73fb      	strb	r3, [r7, #15]
 8004878:	e00d      	b.n	8004896 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	7bfb      	ldrb	r3, [r7, #15]
 8004880:	3340      	adds	r3, #64	@ 0x40
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4413      	add	r3, r2
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	0c1b      	lsrs	r3, r3, #16
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	4413      	add	r3, r2
 800488e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004890:	7bfb      	ldrb	r3, [r7, #15]
 8004892:	3301      	adds	r3, #1
 8004894:	73fb      	strb	r3, [r7, #15]
 8004896:	7bfa      	ldrb	r2, [r7, #15]
 8004898:	78fb      	ldrb	r3, [r7, #3]
 800489a:	3b01      	subs	r3, #1
 800489c:	429a      	cmp	r2, r3
 800489e:	d3ec      	bcc.n	800487a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80048a0:	883b      	ldrh	r3, [r7, #0]
 80048a2:	0418      	lsls	r0, r3, #16
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6819      	ldr	r1, [r3, #0]
 80048a8:	78fb      	ldrb	r3, [r7, #3]
 80048aa:	3b01      	subs	r3, #1
 80048ac:	68ba      	ldr	r2, [r7, #8]
 80048ae:	4302      	orrs	r2, r0
 80048b0:	3340      	adds	r3, #64	@ 0x40
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	440b      	add	r3, r1
 80048b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3714      	adds	r7, #20
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b083      	sub	sp, #12
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
 80048ce:	460b      	mov	r3, r1
 80048d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	887a      	ldrh	r2, [r7, #2]
 80048d8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004916:	4b05      	ldr	r3, [pc, #20]	@ (800492c <HAL_PCDEx_ActivateLPM+0x44>)
 8004918:	4313      	orrs	r3, r2
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	10000003 	.word	0x10000003

08004930 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	460b      	mov	r3, r1
 800493a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004950:	4b19      	ldr	r3, [pc, #100]	@ (80049b8 <HAL_PWREx_ConfigSupply+0x70>)
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f003 0304 	and.w	r3, r3, #4
 8004958:	2b04      	cmp	r3, #4
 800495a:	d00a      	beq.n	8004972 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800495c:	4b16      	ldr	r3, [pc, #88]	@ (80049b8 <HAL_PWREx_ConfigSupply+0x70>)
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f003 0307 	and.w	r3, r3, #7
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	429a      	cmp	r2, r3
 8004968:	d001      	beq.n	800496e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e01f      	b.n	80049ae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800496e:	2300      	movs	r3, #0
 8004970:	e01d      	b.n	80049ae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004972:	4b11      	ldr	r3, [pc, #68]	@ (80049b8 <HAL_PWREx_ConfigSupply+0x70>)
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f023 0207 	bic.w	r2, r3, #7
 800497a:	490f      	ldr	r1, [pc, #60]	@ (80049b8 <HAL_PWREx_ConfigSupply+0x70>)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4313      	orrs	r3, r2
 8004980:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004982:	f7fc fc97 	bl	80012b4 <HAL_GetTick>
 8004986:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004988:	e009      	b.n	800499e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800498a:	f7fc fc93 	bl	80012b4 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004998:	d901      	bls.n	800499e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e007      	b.n	80049ae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800499e:	4b06      	ldr	r3, [pc, #24]	@ (80049b8 <HAL_PWREx_ConfigSupply+0x70>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049aa:	d1ee      	bne.n	800498a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	58024800 	.word	0x58024800

080049bc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80049c0:	4b05      	ldr	r3, [pc, #20]	@ (80049d8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	4a04      	ldr	r2, [pc, #16]	@ (80049d8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80049c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049ca:	60d3      	str	r3, [r2, #12]
}
 80049cc:	bf00      	nop
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	58024800 	.word	0x58024800

080049dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b08c      	sub	sp, #48	@ 0x30
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d102      	bne.n	80049f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	f000 bc1f 	b.w	800522e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 80b3 	beq.w	8004b64 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049fe:	4b95      	ldr	r3, [pc, #596]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a08:	4b92      	ldr	r3, [pc, #584]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a10:	2b10      	cmp	r3, #16
 8004a12:	d007      	beq.n	8004a24 <HAL_RCC_OscConfig+0x48>
 8004a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a16:	2b18      	cmp	r3, #24
 8004a18:	d112      	bne.n	8004a40 <HAL_RCC_OscConfig+0x64>
 8004a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a1c:	f003 0303 	and.w	r3, r3, #3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d10d      	bne.n	8004a40 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a24:	4b8b      	ldr	r3, [pc, #556]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 8098 	beq.w	8004b62 <HAL_RCC_OscConfig+0x186>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f040 8093 	bne.w	8004b62 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e3f6      	b.n	800522e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a48:	d106      	bne.n	8004a58 <HAL_RCC_OscConfig+0x7c>
 8004a4a:	4b82      	ldr	r3, [pc, #520]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a81      	ldr	r2, [pc, #516]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004a50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a54:	6013      	str	r3, [r2, #0]
 8004a56:	e058      	b.n	8004b0a <HAL_RCC_OscConfig+0x12e>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d112      	bne.n	8004a86 <HAL_RCC_OscConfig+0xaa>
 8004a60:	4b7c      	ldr	r3, [pc, #496]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a7b      	ldr	r2, [pc, #492]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004a66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a6a:	6013      	str	r3, [r2, #0]
 8004a6c:	4b79      	ldr	r3, [pc, #484]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a78      	ldr	r2, [pc, #480]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004a72:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004a76:	6013      	str	r3, [r2, #0]
 8004a78:	4b76      	ldr	r3, [pc, #472]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a75      	ldr	r2, [pc, #468]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004a7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	e041      	b.n	8004b0a <HAL_RCC_OscConfig+0x12e>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a8e:	d112      	bne.n	8004ab6 <HAL_RCC_OscConfig+0xda>
 8004a90:	4b70      	ldr	r3, [pc, #448]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a6f      	ldr	r2, [pc, #444]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004a96:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a9a:	6013      	str	r3, [r2, #0]
 8004a9c:	4b6d      	ldr	r3, [pc, #436]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a6c      	ldr	r2, [pc, #432]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004aa2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004aa6:	6013      	str	r3, [r2, #0]
 8004aa8:	4b6a      	ldr	r3, [pc, #424]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a69      	ldr	r2, [pc, #420]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004aae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ab2:	6013      	str	r3, [r2, #0]
 8004ab4:	e029      	b.n	8004b0a <HAL_RCC_OscConfig+0x12e>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004abe:	d112      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x10a>
 8004ac0:	4b64      	ldr	r3, [pc, #400]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a63      	ldr	r2, [pc, #396]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004ac6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004aca:	6013      	str	r3, [r2, #0]
 8004acc:	4b61      	ldr	r3, [pc, #388]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a60      	ldr	r2, [pc, #384]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004ad2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ad6:	6013      	str	r3, [r2, #0]
 8004ad8:	4b5e      	ldr	r3, [pc, #376]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a5d      	ldr	r2, [pc, #372]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004ade:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ae2:	6013      	str	r3, [r2, #0]
 8004ae4:	e011      	b.n	8004b0a <HAL_RCC_OscConfig+0x12e>
 8004ae6:	4b5b      	ldr	r3, [pc, #364]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a5a      	ldr	r2, [pc, #360]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004aec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004af0:	6013      	str	r3, [r2, #0]
 8004af2:	4b58      	ldr	r3, [pc, #352]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a57      	ldr	r2, [pc, #348]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004af8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004afc:	6013      	str	r3, [r2, #0]
 8004afe:	4b55      	ldr	r3, [pc, #340]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a54      	ldr	r2, [pc, #336]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004b04:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004b08:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d013      	beq.n	8004b3a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b12:	f7fc fbcf 	bl	80012b4 <HAL_GetTick>
 8004b16:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b18:	e008      	b.n	8004b2c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b1a:	f7fc fbcb 	bl	80012b4 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b64      	cmp	r3, #100	@ 0x64
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e380      	b.n	800522e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b2c:	4b49      	ldr	r3, [pc, #292]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d0f0      	beq.n	8004b1a <HAL_RCC_OscConfig+0x13e>
 8004b38:	e014      	b.n	8004b64 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3a:	f7fc fbbb 	bl	80012b4 <HAL_GetTick>
 8004b3e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b40:	e008      	b.n	8004b54 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b42:	f7fc fbb7 	bl	80012b4 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	2b64      	cmp	r3, #100	@ 0x64
 8004b4e:	d901      	bls.n	8004b54 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e36c      	b.n	800522e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b54:	4b3f      	ldr	r3, [pc, #252]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1f0      	bne.n	8004b42 <HAL_RCC_OscConfig+0x166>
 8004b60:	e000      	b.n	8004b64 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b62:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 808c 	beq.w	8004c8a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b72:	4b38      	ldr	r3, [pc, #224]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b7a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b7c:	4b35      	ldr	r3, [pc, #212]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b80:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004b82:	6a3b      	ldr	r3, [r7, #32]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d007      	beq.n	8004b98 <HAL_RCC_OscConfig+0x1bc>
 8004b88:	6a3b      	ldr	r3, [r7, #32]
 8004b8a:	2b18      	cmp	r3, #24
 8004b8c:	d137      	bne.n	8004bfe <HAL_RCC_OscConfig+0x222>
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	f003 0303 	and.w	r3, r3, #3
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d132      	bne.n	8004bfe <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b98:	4b2e      	ldr	r3, [pc, #184]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0304 	and.w	r3, r3, #4
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d005      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x1d4>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d101      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e33e      	b.n	800522e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004bb0:	4b28      	ldr	r3, [pc, #160]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f023 0219 	bic.w	r2, r3, #25
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	4925      	ldr	r1, [pc, #148]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc2:	f7fc fb77 	bl	80012b4 <HAL_GetTick>
 8004bc6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bc8:	e008      	b.n	8004bdc <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bca:	f7fc fb73 	bl	80012b4 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e328      	b.n	800522e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d0f0      	beq.n	8004bca <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004be8:	4b1a      	ldr	r3, [pc, #104]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	061b      	lsls	r3, r3, #24
 8004bf6:	4917      	ldr	r1, [pc, #92]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bfc:	e045      	b.n	8004c8a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d028      	beq.n	8004c58 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004c06:	4b13      	ldr	r3, [pc, #76]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f023 0219 	bic.w	r2, r3, #25
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	4910      	ldr	r1, [pc, #64]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c18:	f7fc fb4c 	bl	80012b4 <HAL_GetTick>
 8004c1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c20:	f7fc fb48 	bl	80012b4 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e2fd      	b.n	800522e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c32:	4b08      	ldr	r3, [pc, #32]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0304 	and.w	r3, r3, #4
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0f0      	beq.n	8004c20 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c3e:	4b05      	ldr	r3, [pc, #20]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	061b      	lsls	r3, r3, #24
 8004c4c:	4901      	ldr	r1, [pc, #4]	@ (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	604b      	str	r3, [r1, #4]
 8004c52:	e01a      	b.n	8004c8a <HAL_RCC_OscConfig+0x2ae>
 8004c54:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c58:	4b97      	ldr	r3, [pc, #604]	@ (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a96      	ldr	r2, [pc, #600]	@ (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004c5e:	f023 0301 	bic.w	r3, r3, #1
 8004c62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c64:	f7fc fb26 	bl	80012b4 <HAL_GetTick>
 8004c68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c6a:	e008      	b.n	8004c7e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c6c:	f7fc fb22 	bl	80012b4 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e2d7      	b.n	800522e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c7e:	4b8e      	ldr	r3, [pc, #568]	@ (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0304 	and.w	r3, r3, #4
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1f0      	bne.n	8004c6c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0310 	and.w	r3, r3, #16
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d06a      	beq.n	8004d6c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c96:	4b88      	ldr	r3, [pc, #544]	@ (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c9e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ca0:	4b85      	ldr	r3, [pc, #532]	@ (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d007      	beq.n	8004cbc <HAL_RCC_OscConfig+0x2e0>
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	2b18      	cmp	r3, #24
 8004cb0:	d11b      	bne.n	8004cea <HAL_RCC_OscConfig+0x30e>
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f003 0303 	and.w	r3, r3, #3
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d116      	bne.n	8004cea <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004cbc:	4b7e      	ldr	r3, [pc, #504]	@ (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d005      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x2f8>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	69db      	ldr	r3, [r3, #28]
 8004ccc:	2b80      	cmp	r3, #128	@ 0x80
 8004cce:	d001      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e2ac      	b.n	800522e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004cd4:	4b78      	ldr	r3, [pc, #480]	@ (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a1b      	ldr	r3, [r3, #32]
 8004ce0:	061b      	lsls	r3, r3, #24
 8004ce2:	4975      	ldr	r1, [pc, #468]	@ (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ce8:	e040      	b.n	8004d6c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d023      	beq.n	8004d3a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004cf2:	4b71      	ldr	r3, [pc, #452]	@ (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a70      	ldr	r2, [pc, #448]	@ (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004cf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfe:	f7fc fad9 	bl	80012b4 <HAL_GetTick>
 8004d02:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d04:	e008      	b.n	8004d18 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004d06:	f7fc fad5 	bl	80012b4 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d901      	bls.n	8004d18 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e28a      	b.n	800522e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d18:	4b67      	ldr	r3, [pc, #412]	@ (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0f0      	beq.n	8004d06 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d24:	4b64      	ldr	r3, [pc, #400]	@ (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	061b      	lsls	r3, r3, #24
 8004d32:	4961      	ldr	r1, [pc, #388]	@ (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	60cb      	str	r3, [r1, #12]
 8004d38:	e018      	b.n	8004d6c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004d3a:	4b5f      	ldr	r3, [pc, #380]	@ (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a5e      	ldr	r2, [pc, #376]	@ (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004d40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d46:	f7fc fab5 	bl	80012b4 <HAL_GetTick>
 8004d4a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004d4c:	e008      	b.n	8004d60 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004d4e:	f7fc fab1 	bl	80012b4 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d901      	bls.n	8004d60 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e266      	b.n	800522e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004d60:	4b55      	ldr	r3, [pc, #340]	@ (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1f0      	bne.n	8004d4e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0308 	and.w	r3, r3, #8
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d036      	beq.n	8004de6 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d019      	beq.n	8004db4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d80:	4b4d      	ldr	r3, [pc, #308]	@ (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004d82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d84:	4a4c      	ldr	r2, [pc, #304]	@ (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004d86:	f043 0301 	orr.w	r3, r3, #1
 8004d8a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d8c:	f7fc fa92 	bl	80012b4 <HAL_GetTick>
 8004d90:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d94:	f7fc fa8e 	bl	80012b4 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e243      	b.n	800522e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004da6:	4b44      	ldr	r3, [pc, #272]	@ (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004da8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d0f0      	beq.n	8004d94 <HAL_RCC_OscConfig+0x3b8>
 8004db2:	e018      	b.n	8004de6 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004db4:	4b40      	ldr	r3, [pc, #256]	@ (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004db6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004db8:	4a3f      	ldr	r2, [pc, #252]	@ (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004dba:	f023 0301 	bic.w	r3, r3, #1
 8004dbe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc0:	f7fc fa78 	bl	80012b4 <HAL_GetTick>
 8004dc4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004dc6:	e008      	b.n	8004dda <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dc8:	f7fc fa74 	bl	80012b4 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e229      	b.n	800522e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004dda:	4b37      	ldr	r3, [pc, #220]	@ (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004ddc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1f0      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0320 	and.w	r3, r3, #32
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d036      	beq.n	8004e60 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d019      	beq.n	8004e2e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004dfa:	4b2f      	ldr	r3, [pc, #188]	@ (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a2e      	ldr	r2, [pc, #184]	@ (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004e00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004e04:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e06:	f7fc fa55 	bl	80012b4 <HAL_GetTick>
 8004e0a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e0c:	e008      	b.n	8004e20 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e0e:	f7fc fa51 	bl	80012b4 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d901      	bls.n	8004e20 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e206      	b.n	800522e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e20:	4b25      	ldr	r3, [pc, #148]	@ (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d0f0      	beq.n	8004e0e <HAL_RCC_OscConfig+0x432>
 8004e2c:	e018      	b.n	8004e60 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e2e:	4b22      	ldr	r3, [pc, #136]	@ (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a21      	ldr	r2, [pc, #132]	@ (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004e34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e38:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e3a:	f7fc fa3b 	bl	80012b4 <HAL_GetTick>
 8004e3e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e40:	e008      	b.n	8004e54 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e42:	f7fc fa37 	bl	80012b4 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d901      	bls.n	8004e54 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e1ec      	b.n	800522e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e54:	4b18      	ldr	r3, [pc, #96]	@ (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1f0      	bne.n	8004e42 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0304 	and.w	r3, r3, #4
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f000 80af 	beq.w	8004fcc <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e6e:	4b13      	ldr	r3, [pc, #76]	@ (8004ebc <HAL_RCC_OscConfig+0x4e0>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a12      	ldr	r2, [pc, #72]	@ (8004ebc <HAL_RCC_OscConfig+0x4e0>)
 8004e74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e78:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e7a:	f7fc fa1b 	bl	80012b4 <HAL_GetTick>
 8004e7e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e80:	e008      	b.n	8004e94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e82:	f7fc fa17 	bl	80012b4 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	2b64      	cmp	r3, #100	@ 0x64
 8004e8e:	d901      	bls.n	8004e94 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e1cc      	b.n	800522e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e94:	4b09      	ldr	r3, [pc, #36]	@ (8004ebc <HAL_RCC_OscConfig+0x4e0>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d0f0      	beq.n	8004e82 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d10b      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x4e4>
 8004ea8:	4b03      	ldr	r3, [pc, #12]	@ (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004eaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eac:	4a02      	ldr	r2, [pc, #8]	@ (8004eb8 <HAL_RCC_OscConfig+0x4dc>)
 8004eae:	f043 0301 	orr.w	r3, r3, #1
 8004eb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004eb4:	e05b      	b.n	8004f6e <HAL_RCC_OscConfig+0x592>
 8004eb6:	bf00      	nop
 8004eb8:	58024400 	.word	0x58024400
 8004ebc:	58024800 	.word	0x58024800
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d112      	bne.n	8004eee <HAL_RCC_OscConfig+0x512>
 8004ec8:	4b9d      	ldr	r3, [pc, #628]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 8004eca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ecc:	4a9c      	ldr	r2, [pc, #624]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 8004ece:	f023 0301 	bic.w	r3, r3, #1
 8004ed2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ed4:	4b9a      	ldr	r3, [pc, #616]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 8004ed6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ed8:	4a99      	ldr	r2, [pc, #612]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 8004eda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ede:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ee0:	4b97      	ldr	r3, [pc, #604]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 8004ee2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee4:	4a96      	ldr	r2, [pc, #600]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 8004ee6:	f023 0304 	bic.w	r3, r3, #4
 8004eea:	6713      	str	r3, [r2, #112]	@ 0x70
 8004eec:	e03f      	b.n	8004f6e <HAL_RCC_OscConfig+0x592>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	2b05      	cmp	r3, #5
 8004ef4:	d112      	bne.n	8004f1c <HAL_RCC_OscConfig+0x540>
 8004ef6:	4b92      	ldr	r3, [pc, #584]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 8004ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004efa:	4a91      	ldr	r2, [pc, #580]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 8004efc:	f043 0304 	orr.w	r3, r3, #4
 8004f00:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f02:	4b8f      	ldr	r3, [pc, #572]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 8004f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f06:	4a8e      	ldr	r2, [pc, #568]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 8004f08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f0e:	4b8c      	ldr	r3, [pc, #560]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 8004f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f12:	4a8b      	ldr	r2, [pc, #556]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 8004f14:	f043 0301 	orr.w	r3, r3, #1
 8004f18:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f1a:	e028      	b.n	8004f6e <HAL_RCC_OscConfig+0x592>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	2b85      	cmp	r3, #133	@ 0x85
 8004f22:	d112      	bne.n	8004f4a <HAL_RCC_OscConfig+0x56e>
 8004f24:	4b86      	ldr	r3, [pc, #536]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 8004f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f28:	4a85      	ldr	r2, [pc, #532]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 8004f2a:	f043 0304 	orr.w	r3, r3, #4
 8004f2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f30:	4b83      	ldr	r3, [pc, #524]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 8004f32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f34:	4a82      	ldr	r2, [pc, #520]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 8004f36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f3c:	4b80      	ldr	r3, [pc, #512]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 8004f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f40:	4a7f      	ldr	r2, [pc, #508]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 8004f42:	f043 0301 	orr.w	r3, r3, #1
 8004f46:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f48:	e011      	b.n	8004f6e <HAL_RCC_OscConfig+0x592>
 8004f4a:	4b7d      	ldr	r3, [pc, #500]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 8004f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f4e:	4a7c      	ldr	r2, [pc, #496]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 8004f50:	f023 0301 	bic.w	r3, r3, #1
 8004f54:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f56:	4b7a      	ldr	r3, [pc, #488]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 8004f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f5a:	4a79      	ldr	r2, [pc, #484]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 8004f5c:	f023 0304 	bic.w	r3, r3, #4
 8004f60:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f62:	4b77      	ldr	r3, [pc, #476]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 8004f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f66:	4a76      	ldr	r2, [pc, #472]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 8004f68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f6c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d015      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f76:	f7fc f99d 	bl	80012b4 <HAL_GetTick>
 8004f7a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f7c:	e00a      	b.n	8004f94 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f7e:	f7fc f999 	bl	80012b4 <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d901      	bls.n	8004f94 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e14c      	b.n	800522e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f94:	4b6a      	ldr	r3, [pc, #424]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 8004f96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f98:	f003 0302 	and.w	r3, r3, #2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0ee      	beq.n	8004f7e <HAL_RCC_OscConfig+0x5a2>
 8004fa0:	e014      	b.n	8004fcc <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fa2:	f7fc f987 	bl	80012b4 <HAL_GetTick>
 8004fa6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004fa8:	e00a      	b.n	8004fc0 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004faa:	f7fc f983 	bl	80012b4 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d901      	bls.n	8004fc0 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e136      	b.n	800522e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004fc0:	4b5f      	ldr	r3, [pc, #380]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 8004fc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1ee      	bne.n	8004faa <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f000 812b 	beq.w	800522c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004fd6:	4b5a      	ldr	r3, [pc, #360]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fde:	2b18      	cmp	r3, #24
 8004fe0:	f000 80bb 	beq.w	800515a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	f040 8095 	bne.w	8005118 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fee:	4b54      	ldr	r3, [pc, #336]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a53      	ldr	r2, [pc, #332]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 8004ff4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ff8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ffa:	f7fc f95b 	bl	80012b4 <HAL_GetTick>
 8004ffe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005000:	e008      	b.n	8005014 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005002:	f7fc f957 	bl	80012b4 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d901      	bls.n	8005014 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e10c      	b.n	800522e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005014:	4b4a      	ldr	r3, [pc, #296]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1f0      	bne.n	8005002 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005020:	4b47      	ldr	r3, [pc, #284]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 8005022:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005024:	4b47      	ldr	r3, [pc, #284]	@ (8005144 <HAL_RCC_OscConfig+0x768>)
 8005026:	4013      	ands	r3, r2
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005030:	0112      	lsls	r2, r2, #4
 8005032:	430a      	orrs	r2, r1
 8005034:	4942      	ldr	r1, [pc, #264]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 8005036:	4313      	orrs	r3, r2
 8005038:	628b      	str	r3, [r1, #40]	@ 0x28
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800503e:	3b01      	subs	r3, #1
 8005040:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005048:	3b01      	subs	r3, #1
 800504a:	025b      	lsls	r3, r3, #9
 800504c:	b29b      	uxth	r3, r3
 800504e:	431a      	orrs	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005054:	3b01      	subs	r3, #1
 8005056:	041b      	lsls	r3, r3, #16
 8005058:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800505c:	431a      	orrs	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005062:	3b01      	subs	r3, #1
 8005064:	061b      	lsls	r3, r3, #24
 8005066:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800506a:	4935      	ldr	r1, [pc, #212]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 800506c:	4313      	orrs	r3, r2
 800506e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005070:	4b33      	ldr	r3, [pc, #204]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 8005072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005074:	4a32      	ldr	r2, [pc, #200]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 8005076:	f023 0301 	bic.w	r3, r3, #1
 800507a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800507c:	4b30      	ldr	r3, [pc, #192]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 800507e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005080:	4b31      	ldr	r3, [pc, #196]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 8005082:	4013      	ands	r3, r2
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005088:	00d2      	lsls	r2, r2, #3
 800508a:	492d      	ldr	r1, [pc, #180]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 800508c:	4313      	orrs	r3, r2
 800508e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005090:	4b2b      	ldr	r3, [pc, #172]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 8005092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005094:	f023 020c 	bic.w	r2, r3, #12
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800509c:	4928      	ldr	r1, [pc, #160]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80050a2:	4b27      	ldr	r3, [pc, #156]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 80050a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a6:	f023 0202 	bic.w	r2, r3, #2
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ae:	4924      	ldr	r1, [pc, #144]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80050b4:	4b22      	ldr	r3, [pc, #136]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 80050b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b8:	4a21      	ldr	r2, [pc, #132]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 80050ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050c0:	4b1f      	ldr	r3, [pc, #124]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 80050c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c4:	4a1e      	ldr	r2, [pc, #120]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 80050c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80050cc:	4b1c      	ldr	r3, [pc, #112]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 80050ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d0:	4a1b      	ldr	r2, [pc, #108]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 80050d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80050d8:	4b19      	ldr	r3, [pc, #100]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 80050da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050dc:	4a18      	ldr	r2, [pc, #96]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 80050de:	f043 0301 	orr.w	r3, r3, #1
 80050e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050e4:	4b16      	ldr	r3, [pc, #88]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a15      	ldr	r2, [pc, #84]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 80050ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f0:	f7fc f8e0 	bl	80012b4 <HAL_GetTick>
 80050f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80050f6:	e008      	b.n	800510a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050f8:	f7fc f8dc 	bl	80012b4 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b02      	cmp	r3, #2
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e091      	b.n	800522e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800510a:	4b0d      	ldr	r3, [pc, #52]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d0f0      	beq.n	80050f8 <HAL_RCC_OscConfig+0x71c>
 8005116:	e089      	b.n	800522c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005118:	4b09      	ldr	r3, [pc, #36]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a08      	ldr	r2, [pc, #32]	@ (8005140 <HAL_RCC_OscConfig+0x764>)
 800511e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005124:	f7fc f8c6 	bl	80012b4 <HAL_GetTick>
 8005128:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800512a:	e00f      	b.n	800514c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800512c:	f7fc f8c2 	bl	80012b4 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	2b02      	cmp	r3, #2
 8005138:	d908      	bls.n	800514c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e077      	b.n	800522e <HAL_RCC_OscConfig+0x852>
 800513e:	bf00      	nop
 8005140:	58024400 	.word	0x58024400
 8005144:	fffffc0c 	.word	0xfffffc0c
 8005148:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800514c:	4b3a      	ldr	r3, [pc, #232]	@ (8005238 <HAL_RCC_OscConfig+0x85c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1e9      	bne.n	800512c <HAL_RCC_OscConfig+0x750>
 8005158:	e068      	b.n	800522c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800515a:	4b37      	ldr	r3, [pc, #220]	@ (8005238 <HAL_RCC_OscConfig+0x85c>)
 800515c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800515e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005160:	4b35      	ldr	r3, [pc, #212]	@ (8005238 <HAL_RCC_OscConfig+0x85c>)
 8005162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005164:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800516a:	2b01      	cmp	r3, #1
 800516c:	d031      	beq.n	80051d2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	f003 0203 	and.w	r2, r3, #3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005178:	429a      	cmp	r2, r3
 800517a:	d12a      	bne.n	80051d2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	091b      	lsrs	r3, r3, #4
 8005180:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005188:	429a      	cmp	r2, r3
 800518a:	d122      	bne.n	80051d2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005196:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005198:	429a      	cmp	r2, r3
 800519a:	d11a      	bne.n	80051d2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	0a5b      	lsrs	r3, r3, #9
 80051a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051a8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d111      	bne.n	80051d2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	0c1b      	lsrs	r3, r3, #16
 80051b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80051bc:	429a      	cmp	r2, r3
 80051be:	d108      	bne.n	80051d2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	0e1b      	lsrs	r3, r3, #24
 80051c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d001      	beq.n	80051d6 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e02b      	b.n	800522e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80051d6:	4b18      	ldr	r3, [pc, #96]	@ (8005238 <HAL_RCC_OscConfig+0x85c>)
 80051d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051da:	08db      	lsrs	r3, r3, #3
 80051dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051e0:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d01f      	beq.n	800522c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80051ec:	4b12      	ldr	r3, [pc, #72]	@ (8005238 <HAL_RCC_OscConfig+0x85c>)
 80051ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f0:	4a11      	ldr	r2, [pc, #68]	@ (8005238 <HAL_RCC_OscConfig+0x85c>)
 80051f2:	f023 0301 	bic.w	r3, r3, #1
 80051f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80051f8:	f7fc f85c 	bl	80012b4 <HAL_GetTick>
 80051fc:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80051fe:	bf00      	nop
 8005200:	f7fc f858 	bl	80012b4 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005208:	4293      	cmp	r3, r2
 800520a:	d0f9      	beq.n	8005200 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800520c:	4b0a      	ldr	r3, [pc, #40]	@ (8005238 <HAL_RCC_OscConfig+0x85c>)
 800520e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005210:	4b0a      	ldr	r3, [pc, #40]	@ (800523c <HAL_RCC_OscConfig+0x860>)
 8005212:	4013      	ands	r3, r2
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005218:	00d2      	lsls	r2, r2, #3
 800521a:	4907      	ldr	r1, [pc, #28]	@ (8005238 <HAL_RCC_OscConfig+0x85c>)
 800521c:	4313      	orrs	r3, r2
 800521e:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005220:	4b05      	ldr	r3, [pc, #20]	@ (8005238 <HAL_RCC_OscConfig+0x85c>)
 8005222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005224:	4a04      	ldr	r2, [pc, #16]	@ (8005238 <HAL_RCC_OscConfig+0x85c>)
 8005226:	f043 0301 	orr.w	r3, r3, #1
 800522a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3730      	adds	r7, #48	@ 0x30
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	58024400 	.word	0x58024400
 800523c:	ffff0007 	.word	0xffff0007

08005240 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d101      	bne.n	8005254 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e19c      	b.n	800558e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005254:	4b8a      	ldr	r3, [pc, #552]	@ (8005480 <HAL_RCC_ClockConfig+0x240>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 030f 	and.w	r3, r3, #15
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	429a      	cmp	r2, r3
 8005260:	d910      	bls.n	8005284 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005262:	4b87      	ldr	r3, [pc, #540]	@ (8005480 <HAL_RCC_ClockConfig+0x240>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f023 020f 	bic.w	r2, r3, #15
 800526a:	4985      	ldr	r1, [pc, #532]	@ (8005480 <HAL_RCC_ClockConfig+0x240>)
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	4313      	orrs	r3, r2
 8005270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005272:	4b83      	ldr	r3, [pc, #524]	@ (8005480 <HAL_RCC_ClockConfig+0x240>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 030f 	and.w	r3, r3, #15
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	429a      	cmp	r2, r3
 800527e:	d001      	beq.n	8005284 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e184      	b.n	800558e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	2b00      	cmp	r3, #0
 800528e:	d010      	beq.n	80052b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	691a      	ldr	r2, [r3, #16]
 8005294:	4b7b      	ldr	r3, [pc, #492]	@ (8005484 <HAL_RCC_ClockConfig+0x244>)
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800529c:	429a      	cmp	r2, r3
 800529e:	d908      	bls.n	80052b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80052a0:	4b78      	ldr	r3, [pc, #480]	@ (8005484 <HAL_RCC_ClockConfig+0x244>)
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	4975      	ldr	r1, [pc, #468]	@ (8005484 <HAL_RCC_ClockConfig+0x244>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0308 	and.w	r3, r3, #8
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d010      	beq.n	80052e0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	695a      	ldr	r2, [r3, #20]
 80052c2:	4b70      	ldr	r3, [pc, #448]	@ (8005484 <HAL_RCC_ClockConfig+0x244>)
 80052c4:	69db      	ldr	r3, [r3, #28]
 80052c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d908      	bls.n	80052e0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80052ce:	4b6d      	ldr	r3, [pc, #436]	@ (8005484 <HAL_RCC_ClockConfig+0x244>)
 80052d0:	69db      	ldr	r3, [r3, #28]
 80052d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	496a      	ldr	r1, [pc, #424]	@ (8005484 <HAL_RCC_ClockConfig+0x244>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0310 	and.w	r3, r3, #16
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d010      	beq.n	800530e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	699a      	ldr	r2, [r3, #24]
 80052f0:	4b64      	ldr	r3, [pc, #400]	@ (8005484 <HAL_RCC_ClockConfig+0x244>)
 80052f2:	69db      	ldr	r3, [r3, #28]
 80052f4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d908      	bls.n	800530e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80052fc:	4b61      	ldr	r3, [pc, #388]	@ (8005484 <HAL_RCC_ClockConfig+0x244>)
 80052fe:	69db      	ldr	r3, [r3, #28]
 8005300:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	495e      	ldr	r1, [pc, #376]	@ (8005484 <HAL_RCC_ClockConfig+0x244>)
 800530a:	4313      	orrs	r3, r2
 800530c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0320 	and.w	r3, r3, #32
 8005316:	2b00      	cmp	r3, #0
 8005318:	d010      	beq.n	800533c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	69da      	ldr	r2, [r3, #28]
 800531e:	4b59      	ldr	r3, [pc, #356]	@ (8005484 <HAL_RCC_ClockConfig+0x244>)
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005326:	429a      	cmp	r2, r3
 8005328:	d908      	bls.n	800533c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800532a:	4b56      	ldr	r3, [pc, #344]	@ (8005484 <HAL_RCC_ClockConfig+0x244>)
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	4953      	ldr	r1, [pc, #332]	@ (8005484 <HAL_RCC_ClockConfig+0x244>)
 8005338:	4313      	orrs	r3, r2
 800533a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	2b00      	cmp	r3, #0
 8005346:	d010      	beq.n	800536a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68da      	ldr	r2, [r3, #12]
 800534c:	4b4d      	ldr	r3, [pc, #308]	@ (8005484 <HAL_RCC_ClockConfig+0x244>)
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	f003 030f 	and.w	r3, r3, #15
 8005354:	429a      	cmp	r2, r3
 8005356:	d908      	bls.n	800536a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005358:	4b4a      	ldr	r3, [pc, #296]	@ (8005484 <HAL_RCC_ClockConfig+0x244>)
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	f023 020f 	bic.w	r2, r3, #15
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	4947      	ldr	r1, [pc, #284]	@ (8005484 <HAL_RCC_ClockConfig+0x244>)
 8005366:	4313      	orrs	r3, r2
 8005368:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	d055      	beq.n	8005422 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005376:	4b43      	ldr	r3, [pc, #268]	@ (8005484 <HAL_RCC_ClockConfig+0x244>)
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	4940      	ldr	r1, [pc, #256]	@ (8005484 <HAL_RCC_ClockConfig+0x244>)
 8005384:	4313      	orrs	r3, r2
 8005386:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	2b02      	cmp	r3, #2
 800538e:	d107      	bne.n	80053a0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005390:	4b3c      	ldr	r3, [pc, #240]	@ (8005484 <HAL_RCC_ClockConfig+0x244>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d121      	bne.n	80053e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e0f6      	b.n	800558e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	2b03      	cmp	r3, #3
 80053a6:	d107      	bne.n	80053b8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053a8:	4b36      	ldr	r3, [pc, #216]	@ (8005484 <HAL_RCC_ClockConfig+0x244>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d115      	bne.n	80053e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e0ea      	b.n	800558e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d107      	bne.n	80053d0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80053c0:	4b30      	ldr	r3, [pc, #192]	@ (8005484 <HAL_RCC_ClockConfig+0x244>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d109      	bne.n	80053e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e0de      	b.n	800558e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053d0:	4b2c      	ldr	r3, [pc, #176]	@ (8005484 <HAL_RCC_ClockConfig+0x244>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0304 	and.w	r3, r3, #4
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e0d6      	b.n	800558e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053e0:	4b28      	ldr	r3, [pc, #160]	@ (8005484 <HAL_RCC_ClockConfig+0x244>)
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	f023 0207 	bic.w	r2, r3, #7
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	4925      	ldr	r1, [pc, #148]	@ (8005484 <HAL_RCC_ClockConfig+0x244>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053f2:	f7fb ff5f 	bl	80012b4 <HAL_GetTick>
 80053f6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053f8:	e00a      	b.n	8005410 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053fa:	f7fb ff5b 	bl	80012b4 <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005408:	4293      	cmp	r3, r2
 800540a:	d901      	bls.n	8005410 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e0be      	b.n	800558e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005410:	4b1c      	ldr	r3, [pc, #112]	@ (8005484 <HAL_RCC_ClockConfig+0x244>)
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	00db      	lsls	r3, r3, #3
 800541e:	429a      	cmp	r2, r3
 8005420:	d1eb      	bne.n	80053fa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d010      	beq.n	8005450 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68da      	ldr	r2, [r3, #12]
 8005432:	4b14      	ldr	r3, [pc, #80]	@ (8005484 <HAL_RCC_ClockConfig+0x244>)
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	f003 030f 	and.w	r3, r3, #15
 800543a:	429a      	cmp	r2, r3
 800543c:	d208      	bcs.n	8005450 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800543e:	4b11      	ldr	r3, [pc, #68]	@ (8005484 <HAL_RCC_ClockConfig+0x244>)
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	f023 020f 	bic.w	r2, r3, #15
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	490e      	ldr	r1, [pc, #56]	@ (8005484 <HAL_RCC_ClockConfig+0x244>)
 800544c:	4313      	orrs	r3, r2
 800544e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005450:	4b0b      	ldr	r3, [pc, #44]	@ (8005480 <HAL_RCC_ClockConfig+0x240>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 030f 	and.w	r3, r3, #15
 8005458:	683a      	ldr	r2, [r7, #0]
 800545a:	429a      	cmp	r2, r3
 800545c:	d214      	bcs.n	8005488 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800545e:	4b08      	ldr	r3, [pc, #32]	@ (8005480 <HAL_RCC_ClockConfig+0x240>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f023 020f 	bic.w	r2, r3, #15
 8005466:	4906      	ldr	r1, [pc, #24]	@ (8005480 <HAL_RCC_ClockConfig+0x240>)
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	4313      	orrs	r3, r2
 800546c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800546e:	4b04      	ldr	r3, [pc, #16]	@ (8005480 <HAL_RCC_ClockConfig+0x240>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 030f 	and.w	r3, r3, #15
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	429a      	cmp	r2, r3
 800547a:	d005      	beq.n	8005488 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e086      	b.n	800558e <HAL_RCC_ClockConfig+0x34e>
 8005480:	52002000 	.word	0x52002000
 8005484:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0304 	and.w	r3, r3, #4
 8005490:	2b00      	cmp	r3, #0
 8005492:	d010      	beq.n	80054b6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	691a      	ldr	r2, [r3, #16]
 8005498:	4b3f      	ldr	r3, [pc, #252]	@ (8005598 <HAL_RCC_ClockConfig+0x358>)
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d208      	bcs.n	80054b6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80054a4:	4b3c      	ldr	r3, [pc, #240]	@ (8005598 <HAL_RCC_ClockConfig+0x358>)
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	4939      	ldr	r1, [pc, #228]	@ (8005598 <HAL_RCC_ClockConfig+0x358>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0308 	and.w	r3, r3, #8
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d010      	beq.n	80054e4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	695a      	ldr	r2, [r3, #20]
 80054c6:	4b34      	ldr	r3, [pc, #208]	@ (8005598 <HAL_RCC_ClockConfig+0x358>)
 80054c8:	69db      	ldr	r3, [r3, #28]
 80054ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d208      	bcs.n	80054e4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80054d2:	4b31      	ldr	r3, [pc, #196]	@ (8005598 <HAL_RCC_ClockConfig+0x358>)
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	492e      	ldr	r1, [pc, #184]	@ (8005598 <HAL_RCC_ClockConfig+0x358>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0310 	and.w	r3, r3, #16
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d010      	beq.n	8005512 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	699a      	ldr	r2, [r3, #24]
 80054f4:	4b28      	ldr	r3, [pc, #160]	@ (8005598 <HAL_RCC_ClockConfig+0x358>)
 80054f6:	69db      	ldr	r3, [r3, #28]
 80054f8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d208      	bcs.n	8005512 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005500:	4b25      	ldr	r3, [pc, #148]	@ (8005598 <HAL_RCC_ClockConfig+0x358>)
 8005502:	69db      	ldr	r3, [r3, #28]
 8005504:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	4922      	ldr	r1, [pc, #136]	@ (8005598 <HAL_RCC_ClockConfig+0x358>)
 800550e:	4313      	orrs	r3, r2
 8005510:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0320 	and.w	r3, r3, #32
 800551a:	2b00      	cmp	r3, #0
 800551c:	d010      	beq.n	8005540 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	69da      	ldr	r2, [r3, #28]
 8005522:	4b1d      	ldr	r3, [pc, #116]	@ (8005598 <HAL_RCC_ClockConfig+0x358>)
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800552a:	429a      	cmp	r2, r3
 800552c:	d208      	bcs.n	8005540 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800552e:	4b1a      	ldr	r3, [pc, #104]	@ (8005598 <HAL_RCC_ClockConfig+0x358>)
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	4917      	ldr	r1, [pc, #92]	@ (8005598 <HAL_RCC_ClockConfig+0x358>)
 800553c:	4313      	orrs	r3, r2
 800553e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8005540:	f000 f89e 	bl	8005680 <HAL_RCC_GetSysClockFreq>
 8005544:	4602      	mov	r2, r0
 8005546:	4b14      	ldr	r3, [pc, #80]	@ (8005598 <HAL_RCC_ClockConfig+0x358>)
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	0a1b      	lsrs	r3, r3, #8
 800554c:	f003 030f 	and.w	r3, r3, #15
 8005550:	4912      	ldr	r1, [pc, #72]	@ (800559c <HAL_RCC_ClockConfig+0x35c>)
 8005552:	5ccb      	ldrb	r3, [r1, r3]
 8005554:	f003 031f 	and.w	r3, r3, #31
 8005558:	fa22 f303 	lsr.w	r3, r2, r3
 800555c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800555e:	4b0e      	ldr	r3, [pc, #56]	@ (8005598 <HAL_RCC_ClockConfig+0x358>)
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	f003 030f 	and.w	r3, r3, #15
 8005566:	4a0d      	ldr	r2, [pc, #52]	@ (800559c <HAL_RCC_ClockConfig+0x35c>)
 8005568:	5cd3      	ldrb	r3, [r2, r3]
 800556a:	f003 031f 	and.w	r3, r3, #31
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	fa22 f303 	lsr.w	r3, r2, r3
 8005574:	4a0a      	ldr	r2, [pc, #40]	@ (80055a0 <HAL_RCC_ClockConfig+0x360>)
 8005576:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005578:	4a0a      	ldr	r2, [pc, #40]	@ (80055a4 <HAL_RCC_ClockConfig+0x364>)
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800557e:	4b0a      	ldr	r3, [pc, #40]	@ (80055a8 <HAL_RCC_ClockConfig+0x368>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4618      	mov	r0, r3
 8005584:	f7fb fe4c 	bl	8001220 <HAL_InitTick>
 8005588:	4603      	mov	r3, r0
 800558a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800558c:	7bfb      	ldrb	r3, [r7, #15]
}
 800558e:	4618      	mov	r0, r3
 8005590:	3718      	adds	r7, #24
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	58024400 	.word	0x58024400
 800559c:	0800e294 	.word	0x0800e294
 80055a0:	24000004 	.word	0x24000004
 80055a4:	24000000 	.word	0x24000000
 80055a8:	24000008 	.word	0x24000008

080055ac <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b08c      	sub	sp, #48	@ 0x30
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d12a      	bne.n	8005614 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80055be:	4b2d      	ldr	r3, [pc, #180]	@ (8005674 <HAL_RCC_MCOConfig+0xc8>)
 80055c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80055c4:	4a2b      	ldr	r2, [pc, #172]	@ (8005674 <HAL_RCC_MCOConfig+0xc8>)
 80055c6:	f043 0301 	orr.w	r3, r3, #1
 80055ca:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80055ce:	4b29      	ldr	r3, [pc, #164]	@ (8005674 <HAL_RCC_MCOConfig+0xc8>)
 80055d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80055d4:	f003 0301 	and.w	r3, r3, #1
 80055d8:	61bb      	str	r3, [r7, #24]
 80055da:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80055dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80055e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055e2:	2302      	movs	r3, #2
 80055e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055e6:	2303      	movs	r3, #3
 80055e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055ea:	2300      	movs	r3, #0
 80055ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80055ee:	2300      	movs	r3, #0
 80055f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80055f2:	f107 031c 	add.w	r3, r7, #28
 80055f6:	4619      	mov	r1, r3
 80055f8:	481f      	ldr	r0, [pc, #124]	@ (8005678 <HAL_RCC_MCOConfig+0xcc>)
 80055fa:	f7fd fd23 	bl	8003044 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80055fe:	4b1d      	ldr	r3, [pc, #116]	@ (8005674 <HAL_RCC_MCOConfig+0xc8>)
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8005606:	68b9      	ldr	r1, [r7, #8]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	430b      	orrs	r3, r1
 800560c:	4919      	ldr	r1, [pc, #100]	@ (8005674 <HAL_RCC_MCOConfig+0xc8>)
 800560e:	4313      	orrs	r3, r2
 8005610:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8005612:	e02a      	b.n	800566a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8005614:	4b17      	ldr	r3, [pc, #92]	@ (8005674 <HAL_RCC_MCOConfig+0xc8>)
 8005616:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800561a:	4a16      	ldr	r2, [pc, #88]	@ (8005674 <HAL_RCC_MCOConfig+0xc8>)
 800561c:	f043 0304 	orr.w	r3, r3, #4
 8005620:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8005624:	4b13      	ldr	r3, [pc, #76]	@ (8005674 <HAL_RCC_MCOConfig+0xc8>)
 8005626:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800562a:	f003 0304 	and.w	r3, r3, #4
 800562e:	617b      	str	r3, [r7, #20]
 8005630:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005632:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005638:	2302      	movs	r3, #2
 800563a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800563c:	2303      	movs	r3, #3
 800563e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005640:	2300      	movs	r3, #0
 8005642:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005644:	2300      	movs	r3, #0
 8005646:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005648:	f107 031c 	add.w	r3, r7, #28
 800564c:	4619      	mov	r1, r3
 800564e:	480b      	ldr	r0, [pc, #44]	@ (800567c <HAL_RCC_MCOConfig+0xd0>)
 8005650:	f7fd fcf8 	bl	8003044 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8005654:	4b07      	ldr	r3, [pc, #28]	@ (8005674 <HAL_RCC_MCOConfig+0xc8>)
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	01d9      	lsls	r1, r3, #7
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	430b      	orrs	r3, r1
 8005664:	4903      	ldr	r1, [pc, #12]	@ (8005674 <HAL_RCC_MCOConfig+0xc8>)
 8005666:	4313      	orrs	r3, r2
 8005668:	610b      	str	r3, [r1, #16]
}
 800566a:	bf00      	nop
 800566c:	3730      	adds	r7, #48	@ 0x30
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	58024400 	.word	0x58024400
 8005678:	58020000 	.word	0x58020000
 800567c:	58020800 	.word	0x58020800

08005680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005680:	b480      	push	{r7}
 8005682:	b089      	sub	sp, #36	@ 0x24
 8005684:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005686:	4bb3      	ldr	r3, [pc, #716]	@ (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800568e:	2b18      	cmp	r3, #24
 8005690:	f200 8155 	bhi.w	800593e <HAL_RCC_GetSysClockFreq+0x2be>
 8005694:	a201      	add	r2, pc, #4	@ (adr r2, 800569c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569a:	bf00      	nop
 800569c:	08005701 	.word	0x08005701
 80056a0:	0800593f 	.word	0x0800593f
 80056a4:	0800593f 	.word	0x0800593f
 80056a8:	0800593f 	.word	0x0800593f
 80056ac:	0800593f 	.word	0x0800593f
 80056b0:	0800593f 	.word	0x0800593f
 80056b4:	0800593f 	.word	0x0800593f
 80056b8:	0800593f 	.word	0x0800593f
 80056bc:	08005727 	.word	0x08005727
 80056c0:	0800593f 	.word	0x0800593f
 80056c4:	0800593f 	.word	0x0800593f
 80056c8:	0800593f 	.word	0x0800593f
 80056cc:	0800593f 	.word	0x0800593f
 80056d0:	0800593f 	.word	0x0800593f
 80056d4:	0800593f 	.word	0x0800593f
 80056d8:	0800593f 	.word	0x0800593f
 80056dc:	0800572d 	.word	0x0800572d
 80056e0:	0800593f 	.word	0x0800593f
 80056e4:	0800593f 	.word	0x0800593f
 80056e8:	0800593f 	.word	0x0800593f
 80056ec:	0800593f 	.word	0x0800593f
 80056f0:	0800593f 	.word	0x0800593f
 80056f4:	0800593f 	.word	0x0800593f
 80056f8:	0800593f 	.word	0x0800593f
 80056fc:	08005733 	.word	0x08005733
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005700:	4b94      	ldr	r3, [pc, #592]	@ (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0320 	and.w	r3, r3, #32
 8005708:	2b00      	cmp	r3, #0
 800570a:	d009      	beq.n	8005720 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800570c:	4b91      	ldr	r3, [pc, #580]	@ (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	08db      	lsrs	r3, r3, #3
 8005712:	f003 0303 	and.w	r3, r3, #3
 8005716:	4a90      	ldr	r2, [pc, #576]	@ (8005958 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005718:	fa22 f303 	lsr.w	r3, r2, r3
 800571c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800571e:	e111      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005720:	4b8d      	ldr	r3, [pc, #564]	@ (8005958 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005722:	61bb      	str	r3, [r7, #24]
      break;
 8005724:	e10e      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005726:	4b8d      	ldr	r3, [pc, #564]	@ (800595c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005728:	61bb      	str	r3, [r7, #24]
      break;
 800572a:	e10b      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800572c:	4b8c      	ldr	r3, [pc, #560]	@ (8005960 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800572e:	61bb      	str	r3, [r7, #24]
      break;
 8005730:	e108      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005732:	4b88      	ldr	r3, [pc, #544]	@ (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005736:	f003 0303 	and.w	r3, r3, #3
 800573a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800573c:	4b85      	ldr	r3, [pc, #532]	@ (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800573e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005740:	091b      	lsrs	r3, r3, #4
 8005742:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005746:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005748:	4b82      	ldr	r3, [pc, #520]	@ (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800574a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005752:	4b80      	ldr	r3, [pc, #512]	@ (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005756:	08db      	lsrs	r3, r3, #3
 8005758:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	fb02 f303 	mul.w	r3, r2, r3
 8005762:	ee07 3a90 	vmov	s15, r3
 8005766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800576a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 80e1 	beq.w	8005938 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	2b02      	cmp	r3, #2
 800577a:	f000 8083 	beq.w	8005884 <HAL_RCC_GetSysClockFreq+0x204>
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	2b02      	cmp	r3, #2
 8005782:	f200 80a1 	bhi.w	80058c8 <HAL_RCC_GetSysClockFreq+0x248>
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d003      	beq.n	8005794 <HAL_RCC_GetSysClockFreq+0x114>
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d056      	beq.n	8005840 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005792:	e099      	b.n	80058c8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005794:	4b6f      	ldr	r3, [pc, #444]	@ (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0320 	and.w	r3, r3, #32
 800579c:	2b00      	cmp	r3, #0
 800579e:	d02d      	beq.n	80057fc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057a0:	4b6c      	ldr	r3, [pc, #432]	@ (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	08db      	lsrs	r3, r3, #3
 80057a6:	f003 0303 	and.w	r3, r3, #3
 80057aa:	4a6b      	ldr	r2, [pc, #428]	@ (8005958 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057ac:	fa22 f303 	lsr.w	r3, r2, r3
 80057b0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	ee07 3a90 	vmov	s15, r3
 80057b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	ee07 3a90 	vmov	s15, r3
 80057c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ca:	4b62      	ldr	r3, [pc, #392]	@ (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057d2:	ee07 3a90 	vmov	s15, r3
 80057d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057da:	ed97 6a02 	vldr	s12, [r7, #8]
 80057de:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005964 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057f6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80057fa:	e087      	b.n	800590c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	ee07 3a90 	vmov	s15, r3
 8005802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005806:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005968 <HAL_RCC_GetSysClockFreq+0x2e8>
 800580a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800580e:	4b51      	ldr	r3, [pc, #324]	@ (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005816:	ee07 3a90 	vmov	s15, r3
 800581a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800581e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005822:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005964 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800582a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800582e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800583a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800583e:	e065      	b.n	800590c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	ee07 3a90 	vmov	s15, r3
 8005846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800584a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800596c <HAL_RCC_GetSysClockFreq+0x2ec>
 800584e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005852:	4b40      	ldr	r3, [pc, #256]	@ (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800585a:	ee07 3a90 	vmov	s15, r3
 800585e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005862:	ed97 6a02 	vldr	s12, [r7, #8]
 8005866:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005964 <HAL_RCC_GetSysClockFreq+0x2e4>
 800586a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800586e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005872:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800587a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800587e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005882:	e043      	b.n	800590c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	ee07 3a90 	vmov	s15, r3
 800588a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800588e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005970 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005896:	4b2f      	ldr	r3, [pc, #188]	@ (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800589a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800589e:	ee07 3a90 	vmov	s15, r3
 80058a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80058aa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005964 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058c6:	e021      	b.n	800590c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	ee07 3a90 	vmov	s15, r3
 80058ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058d2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800596c <HAL_RCC_GetSysClockFreq+0x2ec>
 80058d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058da:	4b1e      	ldr	r3, [pc, #120]	@ (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058e2:	ee07 3a90 	vmov	s15, r3
 80058e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80058ee:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005964 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005906:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800590a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800590c:	4b11      	ldr	r3, [pc, #68]	@ (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800590e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005910:	0a5b      	lsrs	r3, r3, #9
 8005912:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005916:	3301      	adds	r3, #1
 8005918:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	ee07 3a90 	vmov	s15, r3
 8005920:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005924:	edd7 6a07 	vldr	s13, [r7, #28]
 8005928:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800592c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005930:	ee17 3a90 	vmov	r3, s15
 8005934:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005936:	e005      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005938:	2300      	movs	r3, #0
 800593a:	61bb      	str	r3, [r7, #24]
      break;
 800593c:	e002      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800593e:	4b07      	ldr	r3, [pc, #28]	@ (800595c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005940:	61bb      	str	r3, [r7, #24]
      break;
 8005942:	bf00      	nop
  }

  return sysclockfreq;
 8005944:	69bb      	ldr	r3, [r7, #24]
}
 8005946:	4618      	mov	r0, r3
 8005948:	3724      	adds	r7, #36	@ 0x24
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	58024400 	.word	0x58024400
 8005958:	03d09000 	.word	0x03d09000
 800595c:	003d0900 	.word	0x003d0900
 8005960:	00f42400 	.word	0x00f42400
 8005964:	46000000 	.word	0x46000000
 8005968:	4c742400 	.word	0x4c742400
 800596c:	4a742400 	.word	0x4a742400
 8005970:	4b742400 	.word	0x4b742400

08005974 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800597a:	f7ff fe81 	bl	8005680 <HAL_RCC_GetSysClockFreq>
 800597e:	4602      	mov	r2, r0
 8005980:	4b10      	ldr	r3, [pc, #64]	@ (80059c4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	0a1b      	lsrs	r3, r3, #8
 8005986:	f003 030f 	and.w	r3, r3, #15
 800598a:	490f      	ldr	r1, [pc, #60]	@ (80059c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800598c:	5ccb      	ldrb	r3, [r1, r3]
 800598e:	f003 031f 	and.w	r3, r3, #31
 8005992:	fa22 f303 	lsr.w	r3, r2, r3
 8005996:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005998:	4b0a      	ldr	r3, [pc, #40]	@ (80059c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	f003 030f 	and.w	r3, r3, #15
 80059a0:	4a09      	ldr	r2, [pc, #36]	@ (80059c8 <HAL_RCC_GetHCLKFreq+0x54>)
 80059a2:	5cd3      	ldrb	r3, [r2, r3]
 80059a4:	f003 031f 	and.w	r3, r3, #31
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	fa22 f303 	lsr.w	r3, r2, r3
 80059ae:	4a07      	ldr	r2, [pc, #28]	@ (80059cc <HAL_RCC_GetHCLKFreq+0x58>)
 80059b0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80059b2:	4a07      	ldr	r2, [pc, #28]	@ (80059d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80059b8:	4b04      	ldr	r3, [pc, #16]	@ (80059cc <HAL_RCC_GetHCLKFreq+0x58>)
 80059ba:	681b      	ldr	r3, [r3, #0]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3708      	adds	r7, #8
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	58024400 	.word	0x58024400
 80059c8:	0800e294 	.word	0x0800e294
 80059cc:	24000004 	.word	0x24000004
 80059d0:	24000000 	.word	0x24000000

080059d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80059d8:	f7ff ffcc 	bl	8005974 <HAL_RCC_GetHCLKFreq>
 80059dc:	4602      	mov	r2, r0
 80059de:	4b06      	ldr	r3, [pc, #24]	@ (80059f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	091b      	lsrs	r3, r3, #4
 80059e4:	f003 0307 	and.w	r3, r3, #7
 80059e8:	4904      	ldr	r1, [pc, #16]	@ (80059fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80059ea:	5ccb      	ldrb	r3, [r1, r3]
 80059ec:	f003 031f 	and.w	r3, r3, #31
 80059f0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	58024400 	.word	0x58024400
 80059fc:	0800e294 	.word	0x0800e294

08005a00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8005a04:	f7ff ffb6 	bl	8005974 <HAL_RCC_GetHCLKFreq>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	4b06      	ldr	r3, [pc, #24]	@ (8005a24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	0a1b      	lsrs	r3, r3, #8
 8005a10:	f003 0307 	and.w	r3, r3, #7
 8005a14:	4904      	ldr	r1, [pc, #16]	@ (8005a28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a16:	5ccb      	ldrb	r3, [r1, r3]
 8005a18:	f003 031f 	and.w	r3, r3, #31
 8005a1c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	58024400 	.word	0x58024400
 8005a28:	0800e294 	.word	0x0800e294

08005a2c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a30:	b0c8      	sub	sp, #288	@ 0x120
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a38:	2300      	movs	r3, #0
 8005a3a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a3e:	2300      	movs	r3, #0
 8005a40:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005a50:	2500      	movs	r5, #0
 8005a52:	ea54 0305 	orrs.w	r3, r4, r5
 8005a56:	d049      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a5e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a62:	d02f      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005a64:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a68:	d828      	bhi.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005a6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a6e:	d01a      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005a70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a74:	d822      	bhi.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005a7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a7e:	d007      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a80:	e01c      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a82:	4ba7      	ldr	r3, [pc, #668]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a86:	4aa6      	ldr	r2, [pc, #664]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a8e:	e01a      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a94:	3308      	adds	r3, #8
 8005a96:	2102      	movs	r1, #2
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f002 fa6d 	bl	8007f78 <RCCEx_PLL2_Config>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005aa4:	e00f      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005aa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005aaa:	3328      	adds	r3, #40	@ 0x28
 8005aac:	2102      	movs	r1, #2
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f002 fb14 	bl	80080dc <RCCEx_PLL3_Config>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005aba:	e004      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005ac2:	e000      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005ac4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ac6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d10a      	bne.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005ace:	4b94      	ldr	r3, [pc, #592]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ad2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005ad6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ada:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005adc:	4a90      	ldr	r2, [pc, #576]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ade:	430b      	orrs	r3, r1
 8005ae0:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ae2:	e003      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005ae8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005aec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005af8:	f04f 0900 	mov.w	r9, #0
 8005afc:	ea58 0309 	orrs.w	r3, r8, r9
 8005b00:	d047      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005b02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b08:	2b04      	cmp	r3, #4
 8005b0a:	d82a      	bhi.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005b0c:	a201      	add	r2, pc, #4	@ (adr r2, 8005b14 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b12:	bf00      	nop
 8005b14:	08005b29 	.word	0x08005b29
 8005b18:	08005b37 	.word	0x08005b37
 8005b1c:	08005b4d 	.word	0x08005b4d
 8005b20:	08005b6b 	.word	0x08005b6b
 8005b24:	08005b6b 	.word	0x08005b6b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b28:	4b7d      	ldr	r3, [pc, #500]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b2c:	4a7c      	ldr	r2, [pc, #496]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b34:	e01a      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b3a:	3308      	adds	r3, #8
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f002 fa1a 	bl	8007f78 <RCCEx_PLL2_Config>
 8005b44:	4603      	mov	r3, r0
 8005b46:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b4a:	e00f      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b50:	3328      	adds	r3, #40	@ 0x28
 8005b52:	2100      	movs	r1, #0
 8005b54:	4618      	mov	r0, r3
 8005b56:	f002 fac1 	bl	80080dc <RCCEx_PLL3_Config>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b60:	e004      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005b68:	e000      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005b6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b6c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10a      	bne.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b74:	4b6a      	ldr	r3, [pc, #424]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b78:	f023 0107 	bic.w	r1, r3, #7
 8005b7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b82:	4a67      	ldr	r2, [pc, #412]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b84:	430b      	orrs	r3, r1
 8005b86:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b88:	e003      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b8a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b8e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8005b92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005b9e:	f04f 0b00 	mov.w	fp, #0
 8005ba2:	ea5a 030b 	orrs.w	r3, sl, fp
 8005ba6:	d054      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8005ba8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bae:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005bb2:	d036      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005bb4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005bb8:	d82f      	bhi.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005bba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bbe:	d032      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005bc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bc4:	d829      	bhi.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005bc6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005bc8:	d02f      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8005bca:	2bc0      	cmp	r3, #192	@ 0xc0
 8005bcc:	d825      	bhi.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005bce:	2b80      	cmp	r3, #128	@ 0x80
 8005bd0:	d018      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8005bd2:	2b80      	cmp	r3, #128	@ 0x80
 8005bd4:	d821      	bhi.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d002      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8005bda:	2b40      	cmp	r3, #64	@ 0x40
 8005bdc:	d007      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8005bde:	e01c      	b.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005be0:	4b4f      	ldr	r3, [pc, #316]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be4:	4a4e      	ldr	r2, [pc, #312]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005be6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005bec:	e01e      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005bf2:	3308      	adds	r3, #8
 8005bf4:	2100      	movs	r1, #0
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f002 f9be 	bl	8007f78 <RCCEx_PLL2_Config>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005c02:	e013      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c08:	3328      	adds	r3, #40	@ 0x28
 8005c0a:	2100      	movs	r1, #0
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f002 fa65 	bl	80080dc <RCCEx_PLL3_Config>
 8005c12:	4603      	mov	r3, r0
 8005c14:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005c18:	e008      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005c20:	e004      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005c22:	bf00      	nop
 8005c24:	e002      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005c26:	bf00      	nop
 8005c28:	e000      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005c2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c2c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10a      	bne.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8005c34:	4b3a      	ldr	r3, [pc, #232]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c38:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005c3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c42:	4a37      	ldr	r2, [pc, #220]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c44:	430b      	orrs	r3, r1
 8005c46:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c48:	e003      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c4a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c4e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8005c52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005c5e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005c62:	2300      	movs	r3, #0
 8005c64:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005c68:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	d05c      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8005c72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c78:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005c7c:	d03b      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005c7e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005c82:	d834      	bhi.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005c84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c88:	d037      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8005c8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c8e:	d82e      	bhi.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005c90:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005c94:	d033      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005c96:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005c9a:	d828      	bhi.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005c9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ca0:	d01a      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8005ca2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ca6:	d822      	bhi.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d003      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8005cac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cb0:	d007      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8005cb2:	e01c      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb8:	4a19      	ldr	r2, [pc, #100]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005cba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005cc0:	e01e      	b.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005cc6:	3308      	adds	r3, #8
 8005cc8:	2100      	movs	r1, #0
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f002 f954 	bl	8007f78 <RCCEx_PLL2_Config>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005cd6:	e013      	b.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005cd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005cdc:	3328      	adds	r3, #40	@ 0x28
 8005cde:	2100      	movs	r1, #0
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f002 f9fb 	bl	80080dc <RCCEx_PLL3_Config>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005cec:	e008      	b.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005cf4:	e004      	b.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005cf6:	bf00      	nop
 8005cf8:	e002      	b.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005cfa:	bf00      	nop
 8005cfc:	e000      	b.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005cfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10d      	bne.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8005d08:	4b05      	ldr	r3, [pc, #20]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d0c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8005d10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d16:	4a02      	ldr	r2, [pc, #8]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d18:	430b      	orrs	r3, r1
 8005d1a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d1c:	e006      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8005d1e:	bf00      	nop
 8005d20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d24:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005d28:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d34:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005d38:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005d42:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005d46:	460b      	mov	r3, r1
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	d03a      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005d4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d52:	2b30      	cmp	r3, #48	@ 0x30
 8005d54:	d01f      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8005d56:	2b30      	cmp	r3, #48	@ 0x30
 8005d58:	d819      	bhi.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005d5a:	2b20      	cmp	r3, #32
 8005d5c:	d00c      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005d5e:	2b20      	cmp	r3, #32
 8005d60:	d815      	bhi.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d019      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005d66:	2b10      	cmp	r3, #16
 8005d68:	d111      	bne.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d6a:	4bae      	ldr	r3, [pc, #696]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d6e:	4aad      	ldr	r2, [pc, #692]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005d70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005d76:	e011      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d7c:	3308      	adds	r3, #8
 8005d7e:	2102      	movs	r1, #2
 8005d80:	4618      	mov	r0, r3
 8005d82:	f002 f8f9 	bl	8007f78 <RCCEx_PLL2_Config>
 8005d86:	4603      	mov	r3, r0
 8005d88:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005d8c:	e006      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005d94:	e002      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8005d96:	bf00      	nop
 8005d98:	e000      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8005d9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10a      	bne.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005da4:	4b9f      	ldr	r3, [pc, #636]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005da6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005da8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005dac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005db2:	4a9c      	ldr	r2, [pc, #624]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005db4:	430b      	orrs	r3, r1
 8005db6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005db8:	e003      	b.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005dbe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dca:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005dce:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005dd8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005ddc:	460b      	mov	r3, r1
 8005dde:	4313      	orrs	r3, r2
 8005de0:	d051      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005de2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005de6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005de8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005dec:	d035      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005dee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005df2:	d82e      	bhi.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005df4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005df8:	d031      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x432>
 8005dfa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005dfe:	d828      	bhi.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005e00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e04:	d01a      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005e06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e0a:	d822      	bhi.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d003      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8005e10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e14:	d007      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8005e16:	e01c      	b.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e18:	4b82      	ldr	r3, [pc, #520]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e1c:	4a81      	ldr	r2, [pc, #516]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e24:	e01c      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e2a:	3308      	adds	r3, #8
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f002 f8a2 	bl	8007f78 <RCCEx_PLL2_Config>
 8005e34:	4603      	mov	r3, r0
 8005e36:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e3a:	e011      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e40:	3328      	adds	r3, #40	@ 0x28
 8005e42:	2100      	movs	r1, #0
 8005e44:	4618      	mov	r0, r3
 8005e46:	f002 f949 	bl	80080dc <RCCEx_PLL3_Config>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e50:	e006      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005e58:	e002      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8005e5a:	bf00      	nop
 8005e5c:	e000      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8005e5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e60:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10a      	bne.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005e68:	4b6e      	ldr	r3, [pc, #440]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e6c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005e70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e76:	4a6b      	ldr	r2, [pc, #428]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e78:	430b      	orrs	r3, r1
 8005e7a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e7c:	e003      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e7e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005e82:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005e86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005e92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e96:	2300      	movs	r3, #0
 8005e98:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005e9c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	d053      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005ea6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005eaa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005eac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005eb0:	d033      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8005eb2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005eb6:	d82c      	bhi.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005eb8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005ebc:	d02f      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8005ebe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005ec2:	d826      	bhi.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005ec4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005ec8:	d02b      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005eca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005ece:	d820      	bhi.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005ed0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ed4:	d012      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005ed6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005eda:	d81a      	bhi.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d022      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8005ee0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ee4:	d115      	bne.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005eea:	3308      	adds	r3, #8
 8005eec:	2101      	movs	r1, #1
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f002 f842 	bl	8007f78 <RCCEx_PLL2_Config>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005efa:	e015      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005efc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f00:	3328      	adds	r3, #40	@ 0x28
 8005f02:	2101      	movs	r1, #1
 8005f04:	4618      	mov	r0, r3
 8005f06:	f002 f8e9 	bl	80080dc <RCCEx_PLL3_Config>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f10:	e00a      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005f18:	e006      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005f1a:	bf00      	nop
 8005f1c:	e004      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005f1e:	bf00      	nop
 8005f20:	e002      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005f22:	bf00      	nop
 8005f24:	e000      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005f26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f28:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d10a      	bne.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005f30:	4b3c      	ldr	r3, [pc, #240]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f34:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005f38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f3e:	4a39      	ldr	r2, [pc, #228]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f40:	430b      	orrs	r3, r1
 8005f42:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f44:	e003      	b.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f46:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005f4a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005f4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f56:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005f5a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f5e:	2300      	movs	r3, #0
 8005f60:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f64:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005f68:	460b      	mov	r3, r1
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	d060      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005f6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005f76:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8005f7a:	d039      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8005f7c:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8005f80:	d832      	bhi.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005f82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f86:	d035      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005f88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f8c:	d82c      	bhi.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f92:	d031      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005f94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f98:	d826      	bhi.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005f9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005f9e:	d02d      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005fa0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005fa4:	d820      	bhi.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005fa6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005faa:	d012      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005fac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fb0:	d81a      	bhi.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d024      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005fb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fba:	d115      	bne.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fc0:	3308      	adds	r3, #8
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f001 ffd7 	bl	8007f78 <RCCEx_PLL2_Config>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005fd0:	e017      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fd6:	3328      	adds	r3, #40	@ 0x28
 8005fd8:	2101      	movs	r1, #1
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f002 f87e 	bl	80080dc <RCCEx_PLL3_Config>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005fe6:	e00c      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005fee:	e008      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005ff0:	bf00      	nop
 8005ff2:	e006      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005ff4:	bf00      	nop
 8005ff6:	e004      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005ff8:	bf00      	nop
 8005ffa:	e002      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005ffc:	bf00      	nop
 8005ffe:	e000      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006000:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006002:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10e      	bne.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800600a:	4b06      	ldr	r3, [pc, #24]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800600c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800600e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006012:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006016:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800601a:	4a02      	ldr	r2, [pc, #8]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800601c:	430b      	orrs	r3, r1
 800601e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006020:	e006      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006022:	bf00      	nop
 8006024:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006028:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800602c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006030:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006038:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800603c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006040:	2300      	movs	r3, #0
 8006042:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006046:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800604a:	460b      	mov	r3, r1
 800604c:	4313      	orrs	r3, r2
 800604e:	d037      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006050:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006054:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006056:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800605a:	d00e      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800605c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006060:	d816      	bhi.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006062:	2b00      	cmp	r3, #0
 8006064:	d018      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006066:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800606a:	d111      	bne.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800606c:	4bc4      	ldr	r3, [pc, #784]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800606e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006070:	4ac3      	ldr	r2, [pc, #780]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006072:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006076:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006078:	e00f      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800607a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800607e:	3308      	adds	r3, #8
 8006080:	2101      	movs	r1, #1
 8006082:	4618      	mov	r0, r3
 8006084:	f001 ff78 	bl	8007f78 <RCCEx_PLL2_Config>
 8006088:	4603      	mov	r3, r0
 800608a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800608e:	e004      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006096:	e000      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800609a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10a      	bne.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80060a2:	4bb7      	ldr	r3, [pc, #732]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060a6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80060aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80060b0:	4ab3      	ldr	r2, [pc, #716]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060b2:	430b      	orrs	r3, r1
 80060b4:	6513      	str	r3, [r2, #80]	@ 0x50
 80060b6:	e003      	b.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80060bc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80060c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80060cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80060d0:	2300      	movs	r3, #0
 80060d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80060d6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80060da:	460b      	mov	r3, r1
 80060dc:	4313      	orrs	r3, r2
 80060de:	d039      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80060e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060e6:	2b03      	cmp	r3, #3
 80060e8:	d81c      	bhi.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80060ea:	a201      	add	r2, pc, #4	@ (adr r2, 80060f0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80060ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f0:	0800612d 	.word	0x0800612d
 80060f4:	08006101 	.word	0x08006101
 80060f8:	0800610f 	.word	0x0800610f
 80060fc:	0800612d 	.word	0x0800612d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006100:	4b9f      	ldr	r3, [pc, #636]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006104:	4a9e      	ldr	r2, [pc, #632]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006106:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800610a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800610c:	e00f      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800610e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006112:	3308      	adds	r3, #8
 8006114:	2102      	movs	r1, #2
 8006116:	4618      	mov	r0, r3
 8006118:	f001 ff2e 	bl	8007f78 <RCCEx_PLL2_Config>
 800611c:	4603      	mov	r3, r0
 800611e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006122:	e004      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800612a:	e000      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800612c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800612e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10a      	bne.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006136:	4b92      	ldr	r3, [pc, #584]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800613a:	f023 0103 	bic.w	r1, r3, #3
 800613e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006142:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006144:	4a8e      	ldr	r2, [pc, #568]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006146:	430b      	orrs	r3, r1
 8006148:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800614a:	e003      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800614c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006150:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006154:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006160:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006164:	2300      	movs	r3, #0
 8006166:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800616a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800616e:	460b      	mov	r3, r1
 8006170:	4313      	orrs	r3, r2
 8006172:	f000 8099 	beq.w	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006176:	4b83      	ldr	r3, [pc, #524]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a82      	ldr	r2, [pc, #520]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800617c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006180:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006182:	f7fb f897 	bl	80012b4 <HAL_GetTick>
 8006186:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800618a:	e00b      	b.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800618c:	f7fb f892 	bl	80012b4 <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	2b64      	cmp	r3, #100	@ 0x64
 800619a:	d903      	bls.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80061a2:	e005      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061a4:	4b77      	ldr	r3, [pc, #476]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d0ed      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80061b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d173      	bne.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80061b8:	4b71      	ldr	r3, [pc, #452]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061ba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80061bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80061c4:	4053      	eors	r3, r2
 80061c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d015      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061ce:	4b6c      	ldr	r3, [pc, #432]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061d6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80061da:	4b69      	ldr	r3, [pc, #420]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061de:	4a68      	ldr	r2, [pc, #416]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061e4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061e6:	4b66      	ldr	r3, [pc, #408]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061ea:	4a65      	ldr	r2, [pc, #404]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061f0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80061f2:	4a63      	ldr	r2, [pc, #396]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061f8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80061fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006202:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006206:	d118      	bne.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006208:	f7fb f854 	bl	80012b4 <HAL_GetTick>
 800620c:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006210:	e00d      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006212:	f7fb f84f 	bl	80012b4 <HAL_GetTick>
 8006216:	4602      	mov	r2, r0
 8006218:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800621c:	1ad2      	subs	r2, r2, r3
 800621e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006222:	429a      	cmp	r2, r3
 8006224:	d903      	bls.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 800622c:	e005      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800622e:	4b54      	ldr	r3, [pc, #336]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006232:	f003 0302 	and.w	r3, r3, #2
 8006236:	2b00      	cmp	r3, #0
 8006238:	d0eb      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800623a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800623e:	2b00      	cmp	r3, #0
 8006240:	d129      	bne.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006242:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006246:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800624a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800624e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006252:	d10e      	bne.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006254:	4b4a      	ldr	r3, [pc, #296]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800625c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006260:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006264:	091a      	lsrs	r2, r3, #4
 8006266:	4b48      	ldr	r3, [pc, #288]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006268:	4013      	ands	r3, r2
 800626a:	4a45      	ldr	r2, [pc, #276]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800626c:	430b      	orrs	r3, r1
 800626e:	6113      	str	r3, [r2, #16]
 8006270:	e005      	b.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006272:	4b43      	ldr	r3, [pc, #268]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	4a42      	ldr	r2, [pc, #264]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006278:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800627c:	6113      	str	r3, [r2, #16]
 800627e:	4b40      	ldr	r3, [pc, #256]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006280:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006282:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006286:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800628a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800628e:	4a3c      	ldr	r2, [pc, #240]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006290:	430b      	orrs	r3, r1
 8006292:	6713      	str	r3, [r2, #112]	@ 0x70
 8006294:	e008      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006296:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800629a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800629e:	e003      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80062a4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80062a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b0:	f002 0301 	and.w	r3, r2, #1
 80062b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062b8:	2300      	movs	r3, #0
 80062ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80062be:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80062c2:	460b      	mov	r3, r1
 80062c4:	4313      	orrs	r3, r2
 80062c6:	f000 8090 	beq.w	80063ea <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80062ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062d2:	2b28      	cmp	r3, #40	@ 0x28
 80062d4:	d870      	bhi.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80062d6:	a201      	add	r2, pc, #4	@ (adr r2, 80062dc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80062d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062dc:	080063c1 	.word	0x080063c1
 80062e0:	080063b9 	.word	0x080063b9
 80062e4:	080063b9 	.word	0x080063b9
 80062e8:	080063b9 	.word	0x080063b9
 80062ec:	080063b9 	.word	0x080063b9
 80062f0:	080063b9 	.word	0x080063b9
 80062f4:	080063b9 	.word	0x080063b9
 80062f8:	080063b9 	.word	0x080063b9
 80062fc:	0800638d 	.word	0x0800638d
 8006300:	080063b9 	.word	0x080063b9
 8006304:	080063b9 	.word	0x080063b9
 8006308:	080063b9 	.word	0x080063b9
 800630c:	080063b9 	.word	0x080063b9
 8006310:	080063b9 	.word	0x080063b9
 8006314:	080063b9 	.word	0x080063b9
 8006318:	080063b9 	.word	0x080063b9
 800631c:	080063a3 	.word	0x080063a3
 8006320:	080063b9 	.word	0x080063b9
 8006324:	080063b9 	.word	0x080063b9
 8006328:	080063b9 	.word	0x080063b9
 800632c:	080063b9 	.word	0x080063b9
 8006330:	080063b9 	.word	0x080063b9
 8006334:	080063b9 	.word	0x080063b9
 8006338:	080063b9 	.word	0x080063b9
 800633c:	080063c1 	.word	0x080063c1
 8006340:	080063b9 	.word	0x080063b9
 8006344:	080063b9 	.word	0x080063b9
 8006348:	080063b9 	.word	0x080063b9
 800634c:	080063b9 	.word	0x080063b9
 8006350:	080063b9 	.word	0x080063b9
 8006354:	080063b9 	.word	0x080063b9
 8006358:	080063b9 	.word	0x080063b9
 800635c:	080063c1 	.word	0x080063c1
 8006360:	080063b9 	.word	0x080063b9
 8006364:	080063b9 	.word	0x080063b9
 8006368:	080063b9 	.word	0x080063b9
 800636c:	080063b9 	.word	0x080063b9
 8006370:	080063b9 	.word	0x080063b9
 8006374:	080063b9 	.word	0x080063b9
 8006378:	080063b9 	.word	0x080063b9
 800637c:	080063c1 	.word	0x080063c1
 8006380:	58024400 	.word	0x58024400
 8006384:	58024800 	.word	0x58024800
 8006388:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800638c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006390:	3308      	adds	r3, #8
 8006392:	2101      	movs	r1, #1
 8006394:	4618      	mov	r0, r3
 8006396:	f001 fdef 	bl	8007f78 <RCCEx_PLL2_Config>
 800639a:	4603      	mov	r3, r0
 800639c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80063a0:	e00f      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063a6:	3328      	adds	r3, #40	@ 0x28
 80063a8:	2101      	movs	r1, #1
 80063aa:	4618      	mov	r0, r3
 80063ac:	f001 fe96 	bl	80080dc <RCCEx_PLL3_Config>
 80063b0:	4603      	mov	r3, r0
 80063b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80063b6:	e004      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80063be:	e000      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80063c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d10b      	bne.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80063ca:	4bc0      	ldr	r3, [pc, #768]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80063cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ce:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80063d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063da:	4abc      	ldr	r2, [pc, #752]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80063dc:	430b      	orrs	r3, r1
 80063de:	6553      	str	r3, [r2, #84]	@ 0x54
 80063e0:	e003      	b.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80063e6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80063ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f2:	f002 0302 	and.w	r3, r2, #2
 80063f6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80063fa:	2300      	movs	r3, #0
 80063fc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006400:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006404:	460b      	mov	r3, r1
 8006406:	4313      	orrs	r3, r2
 8006408:	d043      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800640a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800640e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006412:	2b05      	cmp	r3, #5
 8006414:	d824      	bhi.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8006416:	a201      	add	r2, pc, #4	@ (adr r2, 800641c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8006418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641c:	08006469 	.word	0x08006469
 8006420:	08006435 	.word	0x08006435
 8006424:	0800644b 	.word	0x0800644b
 8006428:	08006469 	.word	0x08006469
 800642c:	08006469 	.word	0x08006469
 8006430:	08006469 	.word	0x08006469
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006434:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006438:	3308      	adds	r3, #8
 800643a:	2101      	movs	r1, #1
 800643c:	4618      	mov	r0, r3
 800643e:	f001 fd9b 	bl	8007f78 <RCCEx_PLL2_Config>
 8006442:	4603      	mov	r3, r0
 8006444:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006448:	e00f      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800644a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800644e:	3328      	adds	r3, #40	@ 0x28
 8006450:	2101      	movs	r1, #1
 8006452:	4618      	mov	r0, r3
 8006454:	f001 fe42 	bl	80080dc <RCCEx_PLL3_Config>
 8006458:	4603      	mov	r3, r0
 800645a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800645e:	e004      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006466:	e000      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8006468:	bf00      	nop
    }

    if (ret == HAL_OK)
 800646a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10b      	bne.n	800648a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006472:	4b96      	ldr	r3, [pc, #600]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006476:	f023 0107 	bic.w	r1, r3, #7
 800647a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800647e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006482:	4a92      	ldr	r2, [pc, #584]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006484:	430b      	orrs	r3, r1
 8006486:	6553      	str	r3, [r2, #84]	@ 0x54
 8006488:	e003      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800648a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800648e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006492:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649a:	f002 0304 	and.w	r3, r2, #4
 800649e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80064a2:	2300      	movs	r3, #0
 80064a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80064a8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80064ac:	460b      	mov	r3, r1
 80064ae:	4313      	orrs	r3, r2
 80064b0:	d043      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80064b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80064ba:	2b05      	cmp	r3, #5
 80064bc:	d824      	bhi.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80064be:	a201      	add	r2, pc, #4	@ (adr r2, 80064c4 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80064c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c4:	08006511 	.word	0x08006511
 80064c8:	080064dd 	.word	0x080064dd
 80064cc:	080064f3 	.word	0x080064f3
 80064d0:	08006511 	.word	0x08006511
 80064d4:	08006511 	.word	0x08006511
 80064d8:	08006511 	.word	0x08006511
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064e0:	3308      	adds	r3, #8
 80064e2:	2101      	movs	r1, #1
 80064e4:	4618      	mov	r0, r3
 80064e6:	f001 fd47 	bl	8007f78 <RCCEx_PLL2_Config>
 80064ea:	4603      	mov	r3, r0
 80064ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80064f0:	e00f      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064f6:	3328      	adds	r3, #40	@ 0x28
 80064f8:	2101      	movs	r1, #1
 80064fa:	4618      	mov	r0, r3
 80064fc:	f001 fdee 	bl	80080dc <RCCEx_PLL3_Config>
 8006500:	4603      	mov	r3, r0
 8006502:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006506:	e004      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800650e:	e000      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8006510:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006512:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10b      	bne.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800651a:	4b6c      	ldr	r3, [pc, #432]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800651c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800651e:	f023 0107 	bic.w	r1, r3, #7
 8006522:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006526:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800652a:	4a68      	ldr	r2, [pc, #416]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800652c:	430b      	orrs	r3, r1
 800652e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006530:	e003      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006532:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006536:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800653a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800653e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006542:	f002 0320 	and.w	r3, r2, #32
 8006546:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800654a:	2300      	movs	r3, #0
 800654c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006550:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006554:	460b      	mov	r3, r1
 8006556:	4313      	orrs	r3, r2
 8006558:	d055      	beq.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800655a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800655e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006562:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006566:	d033      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006568:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800656c:	d82c      	bhi.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800656e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006572:	d02f      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006574:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006578:	d826      	bhi.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800657a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800657e:	d02b      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006580:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006584:	d820      	bhi.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006586:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800658a:	d012      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800658c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006590:	d81a      	bhi.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006592:	2b00      	cmp	r3, #0
 8006594:	d022      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8006596:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800659a:	d115      	bne.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800659c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065a0:	3308      	adds	r3, #8
 80065a2:	2100      	movs	r1, #0
 80065a4:	4618      	mov	r0, r3
 80065a6:	f001 fce7 	bl	8007f78 <RCCEx_PLL2_Config>
 80065aa:	4603      	mov	r3, r0
 80065ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80065b0:	e015      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80065b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065b6:	3328      	adds	r3, #40	@ 0x28
 80065b8:	2102      	movs	r1, #2
 80065ba:	4618      	mov	r0, r3
 80065bc:	f001 fd8e 	bl	80080dc <RCCEx_PLL3_Config>
 80065c0:	4603      	mov	r3, r0
 80065c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80065c6:	e00a      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80065ce:	e006      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80065d0:	bf00      	nop
 80065d2:	e004      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80065d4:	bf00      	nop
 80065d6:	e002      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80065d8:	bf00      	nop
 80065da:	e000      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80065dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065de:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d10b      	bne.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065e6:	4b39      	ldr	r3, [pc, #228]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80065e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065ea:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80065ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80065f6:	4a35      	ldr	r2, [pc, #212]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80065f8:	430b      	orrs	r3, r1
 80065fa:	6553      	str	r3, [r2, #84]	@ 0x54
 80065fc:	e003      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006602:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006606:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800660a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006612:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006616:	2300      	movs	r3, #0
 8006618:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800661c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006620:	460b      	mov	r3, r1
 8006622:	4313      	orrs	r3, r2
 8006624:	d058      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006626:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800662a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800662e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006632:	d033      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006634:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006638:	d82c      	bhi.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800663a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800663e:	d02f      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006640:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006644:	d826      	bhi.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006646:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800664a:	d02b      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800664c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006650:	d820      	bhi.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006652:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006656:	d012      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8006658:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800665c:	d81a      	bhi.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800665e:	2b00      	cmp	r3, #0
 8006660:	d022      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8006662:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006666:	d115      	bne.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006668:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800666c:	3308      	adds	r3, #8
 800666e:	2100      	movs	r1, #0
 8006670:	4618      	mov	r0, r3
 8006672:	f001 fc81 	bl	8007f78 <RCCEx_PLL2_Config>
 8006676:	4603      	mov	r3, r0
 8006678:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800667c:	e015      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800667e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006682:	3328      	adds	r3, #40	@ 0x28
 8006684:	2102      	movs	r1, #2
 8006686:	4618      	mov	r0, r3
 8006688:	f001 fd28 	bl	80080dc <RCCEx_PLL3_Config>
 800668c:	4603      	mov	r3, r0
 800668e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006692:	e00a      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800669a:	e006      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800669c:	bf00      	nop
 800669e:	e004      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80066a0:	bf00      	nop
 80066a2:	e002      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80066a4:	bf00      	nop
 80066a6:	e000      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80066a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066aa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d10e      	bne.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80066b2:	4b06      	ldr	r3, [pc, #24]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80066b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066b6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80066ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80066c2:	4a02      	ldr	r2, [pc, #8]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80066c4:	430b      	orrs	r3, r1
 80066c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80066c8:	e006      	b.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80066ca:	bf00      	nop
 80066cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80066d4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80066d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80066e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80066e8:	2300      	movs	r3, #0
 80066ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80066ee:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80066f2:	460b      	mov	r3, r1
 80066f4:	4313      	orrs	r3, r2
 80066f6:	d055      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80066f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006700:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006704:	d033      	beq.n	800676e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006706:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800670a:	d82c      	bhi.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800670c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006710:	d02f      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006712:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006716:	d826      	bhi.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006718:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800671c:	d02b      	beq.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800671e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006722:	d820      	bhi.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006724:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006728:	d012      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800672a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800672e:	d81a      	bhi.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006730:	2b00      	cmp	r3, #0
 8006732:	d022      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8006734:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006738:	d115      	bne.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800673a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800673e:	3308      	adds	r3, #8
 8006740:	2100      	movs	r1, #0
 8006742:	4618      	mov	r0, r3
 8006744:	f001 fc18 	bl	8007f78 <RCCEx_PLL2_Config>
 8006748:	4603      	mov	r3, r0
 800674a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800674e:	e015      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006750:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006754:	3328      	adds	r3, #40	@ 0x28
 8006756:	2102      	movs	r1, #2
 8006758:	4618      	mov	r0, r3
 800675a:	f001 fcbf 	bl	80080dc <RCCEx_PLL3_Config>
 800675e:	4603      	mov	r3, r0
 8006760:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006764:	e00a      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800676c:	e006      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800676e:	bf00      	nop
 8006770:	e004      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006772:	bf00      	nop
 8006774:	e002      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006776:	bf00      	nop
 8006778:	e000      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800677a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800677c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006780:	2b00      	cmp	r3, #0
 8006782:	d10b      	bne.n	800679c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006784:	4ba1      	ldr	r3, [pc, #644]	@ (8006a0c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006788:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800678c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006790:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006794:	4a9d      	ldr	r2, [pc, #628]	@ (8006a0c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006796:	430b      	orrs	r3, r1
 8006798:	6593      	str	r3, [r2, #88]	@ 0x58
 800679a:	e003      	b.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800679c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80067a0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80067a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ac:	f002 0308 	and.w	r3, r2, #8
 80067b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80067b4:	2300      	movs	r3, #0
 80067b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80067ba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80067be:	460b      	mov	r3, r1
 80067c0:	4313      	orrs	r3, r2
 80067c2:	d01e      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80067c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067d0:	d10c      	bne.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80067d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067d6:	3328      	adds	r3, #40	@ 0x28
 80067d8:	2102      	movs	r1, #2
 80067da:	4618      	mov	r0, r3
 80067dc:	f001 fc7e 	bl	80080dc <RCCEx_PLL3_Config>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d002      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80067ec:	4b87      	ldr	r3, [pc, #540]	@ (8006a0c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80067ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067f0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80067f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067fc:	4a83      	ldr	r2, [pc, #524]	@ (8006a0c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80067fe:	430b      	orrs	r3, r1
 8006800:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006802:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680a:	f002 0310 	and.w	r3, r2, #16
 800680e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006812:	2300      	movs	r3, #0
 8006814:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006818:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800681c:	460b      	mov	r3, r1
 800681e:	4313      	orrs	r3, r2
 8006820:	d01e      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006822:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006826:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800682a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800682e:	d10c      	bne.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006830:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006834:	3328      	adds	r3, #40	@ 0x28
 8006836:	2102      	movs	r1, #2
 8006838:	4618      	mov	r0, r3
 800683a:	f001 fc4f 	bl	80080dc <RCCEx_PLL3_Config>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d002      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800684a:	4b70      	ldr	r3, [pc, #448]	@ (8006a0c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800684c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800684e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006852:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006856:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800685a:	4a6c      	ldr	r2, [pc, #432]	@ (8006a0c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800685c:	430b      	orrs	r3, r1
 800685e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006860:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006868:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800686c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006870:	2300      	movs	r3, #0
 8006872:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006876:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800687a:	460b      	mov	r3, r1
 800687c:	4313      	orrs	r3, r2
 800687e:	d03e      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006880:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006884:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006888:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800688c:	d022      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800688e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006892:	d81b      	bhi.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006894:	2b00      	cmp	r3, #0
 8006896:	d003      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8006898:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800689c:	d00b      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800689e:	e015      	b.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068a4:	3308      	adds	r3, #8
 80068a6:	2100      	movs	r1, #0
 80068a8:	4618      	mov	r0, r3
 80068aa:	f001 fb65 	bl	8007f78 <RCCEx_PLL2_Config>
 80068ae:	4603      	mov	r3, r0
 80068b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80068b4:	e00f      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068ba:	3328      	adds	r3, #40	@ 0x28
 80068bc:	2102      	movs	r1, #2
 80068be:	4618      	mov	r0, r3
 80068c0:	f001 fc0c 	bl	80080dc <RCCEx_PLL3_Config>
 80068c4:	4603      	mov	r3, r0
 80068c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80068ca:	e004      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80068d2:	e000      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80068d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068d6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10b      	bne.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80068de:	4b4b      	ldr	r3, [pc, #300]	@ (8006a0c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80068e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068e2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80068e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80068ee:	4a47      	ldr	r2, [pc, #284]	@ (8006a0c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80068f0:	430b      	orrs	r3, r1
 80068f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80068f4:	e003      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80068fa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80068fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006906:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800690a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800690c:	2300      	movs	r3, #0
 800690e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006910:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006914:	460b      	mov	r3, r1
 8006916:	4313      	orrs	r3, r2
 8006918:	d03b      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800691a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800691e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006922:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006926:	d01f      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8006928:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800692c:	d818      	bhi.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800692e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006932:	d003      	beq.n	800693c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8006934:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006938:	d007      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800693a:	e011      	b.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800693c:	4b33      	ldr	r3, [pc, #204]	@ (8006a0c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800693e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006940:	4a32      	ldr	r2, [pc, #200]	@ (8006a0c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006942:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006946:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006948:	e00f      	b.n	800696a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800694a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800694e:	3328      	adds	r3, #40	@ 0x28
 8006950:	2101      	movs	r1, #1
 8006952:	4618      	mov	r0, r3
 8006954:	f001 fbc2 	bl	80080dc <RCCEx_PLL3_Config>
 8006958:	4603      	mov	r3, r0
 800695a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800695e:	e004      	b.n	800696a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006966:	e000      	b.n	800696a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8006968:	bf00      	nop
    }

    if (ret == HAL_OK)
 800696a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10b      	bne.n	800698a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006972:	4b26      	ldr	r3, [pc, #152]	@ (8006a0c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006976:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800697a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800697e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006982:	4a22      	ldr	r2, [pc, #136]	@ (8006a0c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006984:	430b      	orrs	r3, r1
 8006986:	6553      	str	r3, [r2, #84]	@ 0x54
 8006988:	e003      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800698a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800698e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006992:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800699e:	673b      	str	r3, [r7, #112]	@ 0x70
 80069a0:	2300      	movs	r3, #0
 80069a2:	677b      	str	r3, [r7, #116]	@ 0x74
 80069a4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80069a8:	460b      	mov	r3, r1
 80069aa:	4313      	orrs	r3, r2
 80069ac:	d034      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80069ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d003      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80069b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069bc:	d007      	beq.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80069be:	e011      	b.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069c0:	4b12      	ldr	r3, [pc, #72]	@ (8006a0c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80069c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c4:	4a11      	ldr	r2, [pc, #68]	@ (8006a0c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80069c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80069cc:	e00e      	b.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80069ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069d2:	3308      	adds	r3, #8
 80069d4:	2102      	movs	r1, #2
 80069d6:	4618      	mov	r0, r3
 80069d8:	f001 face 	bl	8007f78 <RCCEx_PLL2_Config>
 80069dc:	4603      	mov	r3, r0
 80069de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80069e2:	e003      	b.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80069ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d10d      	bne.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80069f4:	4b05      	ldr	r3, [pc, #20]	@ (8006a0c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80069f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069f8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80069fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a02:	4a02      	ldr	r2, [pc, #8]	@ (8006a0c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006a04:	430b      	orrs	r3, r1
 8006a06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006a08:	e006      	b.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8006a0a:	bf00      	nop
 8006a0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a10:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a14:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006a18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a20:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006a24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a26:	2300      	movs	r3, #0
 8006a28:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a2a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006a2e:	460b      	mov	r3, r1
 8006a30:	4313      	orrs	r3, r2
 8006a32:	d00c      	beq.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a38:	3328      	adds	r3, #40	@ 0x28
 8006a3a:	2102      	movs	r1, #2
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f001 fb4d 	bl	80080dc <RCCEx_PLL3_Config>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d002      	beq.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006a4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a56:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006a5a:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a60:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006a64:	460b      	mov	r3, r1
 8006a66:	4313      	orrs	r3, r2
 8006a68:	d038      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006a6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a76:	d018      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8006a78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a7c:	d811      	bhi.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006a7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a82:	d014      	beq.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8006a84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a88:	d80b      	bhi.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d011      	beq.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8006a8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a92:	d106      	bne.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a94:	4bc3      	ldr	r3, [pc, #780]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a98:	4ac2      	ldr	r2, [pc, #776]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006a9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006aa0:	e008      	b.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006aa8:	e004      	b.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006aaa:	bf00      	nop
 8006aac:	e002      	b.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006aae:	bf00      	nop
 8006ab0:	e000      	b.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006ab2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ab4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10b      	bne.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006abc:	4bb9      	ldr	r3, [pc, #740]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006abe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ac0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006ac4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006acc:	4ab5      	ldr	r2, [pc, #724]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006ace:	430b      	orrs	r3, r1
 8006ad0:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ad2:	e003      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ad4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006ad8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006adc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006ae8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006aea:	2300      	movs	r3, #0
 8006aec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006aee:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006af2:	460b      	mov	r3, r1
 8006af4:	4313      	orrs	r3, r2
 8006af6:	d009      	beq.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006af8:	4baa      	ldr	r3, [pc, #680]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006afa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006afc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006b00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b06:	4aa7      	ldr	r2, [pc, #668]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006b08:	430b      	orrs	r3, r1
 8006b0a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006b0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b14:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006b18:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b1e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006b22:	460b      	mov	r3, r1
 8006b24:	4313      	orrs	r3, r2
 8006b26:	d009      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006b28:	4b9e      	ldr	r3, [pc, #632]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006b2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b2c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006b30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b36:	4a9b      	ldr	r2, [pc, #620]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006b38:	430b      	orrs	r3, r1
 8006b3a:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8006b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b44:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006b48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b4e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006b52:	460b      	mov	r3, r1
 8006b54:	4313      	orrs	r3, r2
 8006b56:	d009      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8006b58:	4b92      	ldr	r3, [pc, #584]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b5c:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8006b60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b66:	4a8f      	ldr	r2, [pc, #572]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006b68:	430b      	orrs	r3, r1
 8006b6a:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006b6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b74:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006b78:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b7e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006b82:	460b      	mov	r3, r1
 8006b84:	4313      	orrs	r3, r2
 8006b86:	d00e      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006b88:	4b86      	ldr	r3, [pc, #536]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	4a85      	ldr	r2, [pc, #532]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006b8e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006b92:	6113      	str	r3, [r2, #16]
 8006b94:	4b83      	ldr	r3, [pc, #524]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006b96:	6919      	ldr	r1, [r3, #16]
 8006b98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b9c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006ba0:	4a80      	ldr	r2, [pc, #512]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006ba2:	430b      	orrs	r3, r1
 8006ba4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bae:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bb8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	d009      	beq.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006bc2:	4b78      	ldr	r3, [pc, #480]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bc6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006bca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bd0:	4a74      	ldr	r2, [pc, #464]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006bd2:	430b      	orrs	r3, r1
 8006bd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006bd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bde:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006be2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006be4:	2300      	movs	r3, #0
 8006be6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006be8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006bec:	460b      	mov	r3, r1
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	d00a      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006bf2:	4b6c      	ldr	r3, [pc, #432]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bf6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006bfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c02:	4a68      	ldr	r2, [pc, #416]	@ (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006c04:	430b      	orrs	r3, r1
 8006c06:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006c08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c10:	2100      	movs	r1, #0
 8006c12:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006c14:	f003 0301 	and.w	r3, r3, #1
 8006c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c1a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006c1e:	460b      	mov	r3, r1
 8006c20:	4313      	orrs	r3, r2
 8006c22:	d011      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c28:	3308      	adds	r3, #8
 8006c2a:	2100      	movs	r1, #0
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f001 f9a3 	bl	8007f78 <RCCEx_PLL2_Config>
 8006c32:	4603      	mov	r3, r0
 8006c34:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006c38:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d003      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c40:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c44:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006c48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c50:	2100      	movs	r1, #0
 8006c52:	6239      	str	r1, [r7, #32]
 8006c54:	f003 0302 	and.w	r3, r3, #2
 8006c58:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c5a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006c5e:	460b      	mov	r3, r1
 8006c60:	4313      	orrs	r3, r2
 8006c62:	d011      	beq.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c68:	3308      	adds	r3, #8
 8006c6a:	2101      	movs	r1, #1
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f001 f983 	bl	8007f78 <RCCEx_PLL2_Config>
 8006c72:	4603      	mov	r3, r0
 8006c74:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006c78:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d003      	beq.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c80:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c84:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006c88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c90:	2100      	movs	r1, #0
 8006c92:	61b9      	str	r1, [r7, #24]
 8006c94:	f003 0304 	and.w	r3, r3, #4
 8006c98:	61fb      	str	r3, [r7, #28]
 8006c9a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	d011      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ca8:	3308      	adds	r3, #8
 8006caa:	2102      	movs	r1, #2
 8006cac:	4618      	mov	r0, r3
 8006cae:	f001 f963 	bl	8007f78 <RCCEx_PLL2_Config>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006cb8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d003      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006cc4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006cc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	6139      	str	r1, [r7, #16]
 8006cd4:	f003 0308 	and.w	r3, r3, #8
 8006cd8:	617b      	str	r3, [r7, #20]
 8006cda:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006cde:	460b      	mov	r3, r1
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	d011      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ce8:	3328      	adds	r3, #40	@ 0x28
 8006cea:	2100      	movs	r1, #0
 8006cec:	4618      	mov	r0, r3
 8006cee:	f001 f9f5 	bl	80080dc <RCCEx_PLL3_Config>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8006cf8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d003      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d04:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006d08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d10:	2100      	movs	r1, #0
 8006d12:	60b9      	str	r1, [r7, #8]
 8006d14:	f003 0310 	and.w	r3, r3, #16
 8006d18:	60fb      	str	r3, [r7, #12]
 8006d1a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006d1e:	460b      	mov	r3, r1
 8006d20:	4313      	orrs	r3, r2
 8006d22:	d011      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d28:	3328      	adds	r3, #40	@ 0x28
 8006d2a:	2101      	movs	r1, #1
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f001 f9d5 	bl	80080dc <RCCEx_PLL3_Config>
 8006d32:	4603      	mov	r3, r0
 8006d34:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006d38:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d003      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d40:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d44:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006d48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d50:	2100      	movs	r1, #0
 8006d52:	6039      	str	r1, [r7, #0]
 8006d54:	f003 0320 	and.w	r3, r3, #32
 8006d58:	607b      	str	r3, [r7, #4]
 8006d5a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006d5e:	460b      	mov	r3, r1
 8006d60:	4313      	orrs	r3, r2
 8006d62:	d011      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d68:	3328      	adds	r3, #40	@ 0x28
 8006d6a:	2102      	movs	r1, #2
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f001 f9b5 	bl	80080dc <RCCEx_PLL3_Config>
 8006d72:	4603      	mov	r3, r0
 8006d74:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006d78:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d003      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d80:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d84:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8006d88:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d101      	bne.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8006d90:	2300      	movs	r3, #0
 8006d92:	e000      	b.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006da2:	bf00      	nop
 8006da4:	58024400 	.word	0x58024400

08006da8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b090      	sub	sp, #64	@ 0x40
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006db2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006db6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006dba:	430b      	orrs	r3, r1
 8006dbc:	f040 8094 	bne.w	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006dc0:	4b97      	ldr	r3, [pc, #604]	@ (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006dc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dc4:	f003 0307 	and.w	r3, r3, #7
 8006dc8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dcc:	2b04      	cmp	r3, #4
 8006dce:	f200 8087 	bhi.w	8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd8:	08006ded 	.word	0x08006ded
 8006ddc:	08006e15 	.word	0x08006e15
 8006de0:	08006e3d 	.word	0x08006e3d
 8006de4:	08006ed9 	.word	0x08006ed9
 8006de8:	08006e65 	.word	0x08006e65
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006dec:	4b8c      	ldr	r3, [pc, #560]	@ (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006df4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006df8:	d108      	bne.n	8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006dfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f000 ff68 	bl	8007cd4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e08:	f000 bc97 	b.w	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e10:	f000 bc93 	b.w	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e14:	4b82      	ldr	r3, [pc, #520]	@ (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e20:	d108      	bne.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e22:	f107 0318 	add.w	r3, r7, #24
 8006e26:	4618      	mov	r0, r3
 8006e28:	f000 fcac 	bl	8007784 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e30:	f000 bc83 	b.w	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006e34:	2300      	movs	r3, #0
 8006e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e38:	f000 bc7f 	b.w	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e3c:	4b78      	ldr	r3, [pc, #480]	@ (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e48:	d108      	bne.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e4a:	f107 030c 	add.w	r3, r7, #12
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f000 fdec 	bl	8007a2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e58:	f000 bc6f 	b.w	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e60:	f000 bc6b 	b.w	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e64:	4b6e      	ldr	r3, [pc, #440]	@ (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006e66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e68:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006e6c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e6e:	4b6c      	ldr	r3, [pc, #432]	@ (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 0304 	and.w	r3, r3, #4
 8006e76:	2b04      	cmp	r3, #4
 8006e78:	d10c      	bne.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d109      	bne.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e80:	4b67      	ldr	r3, [pc, #412]	@ (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	08db      	lsrs	r3, r3, #3
 8006e86:	f003 0303 	and.w	r3, r3, #3
 8006e8a:	4a66      	ldr	r2, [pc, #408]	@ (8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e92:	e01f      	b.n	8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e94:	4b62      	ldr	r3, [pc, #392]	@ (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ea0:	d106      	bne.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ea4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ea8:	d102      	bne.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006eaa:	4b5f      	ldr	r3, [pc, #380]	@ (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006eae:	e011      	b.n	8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006eb0:	4b5b      	ldr	r3, [pc, #364]	@ (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ebc:	d106      	bne.n	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ec0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ec4:	d102      	bne.n	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006ec6:	4b59      	ldr	r3, [pc, #356]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006eca:	e003      	b.n	8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006ed0:	f000 bc33 	b.w	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006ed4:	f000 bc31 	b.w	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006ed8:	4b55      	ldr	r3, [pc, #340]	@ (8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006edc:	f000 bc2d 	b.w	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ee4:	f000 bc29 	b.w	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8006ee8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006eec:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006ef0:	430b      	orrs	r3, r1
 8006ef2:	f040 809f 	bne.w	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8006ef6:	4b4a      	ldr	r3, [pc, #296]	@ (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006ef8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006efa:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006efe:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f06:	d04d      	beq.n	8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8006f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f0e:	f200 8084 	bhi.w	800701a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8006f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f14:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f16:	d07d      	beq.n	8007014 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8006f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f1c:	d87d      	bhi.n	800701a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8006f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f20:	2b80      	cmp	r3, #128	@ 0x80
 8006f22:	d02d      	beq.n	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8006f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f26:	2b80      	cmp	r3, #128	@ 0x80
 8006f28:	d877      	bhi.n	800701a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8006f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d003      	beq.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8006f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f32:	2b40      	cmp	r3, #64	@ 0x40
 8006f34:	d012      	beq.n	8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8006f36:	e070      	b.n	800701a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f38:	4b39      	ldr	r3, [pc, #228]	@ (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f44:	d107      	bne.n	8006f56 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f000 fec2 	bl	8007cd4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f54:	e3f1      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006f56:	2300      	movs	r3, #0
 8006f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f5a:	e3ee      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f5c:	4b30      	ldr	r3, [pc, #192]	@ (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f68:	d107      	bne.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f6a:	f107 0318 	add.w	r3, r7, #24
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f000 fc08 	bl	8007784 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f78:	e3df      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f7e:	e3dc      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f80:	4b27      	ldr	r3, [pc, #156]	@ (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f8c:	d107      	bne.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f8e:	f107 030c 	add.w	r3, r7, #12
 8006f92:	4618      	mov	r0, r3
 8006f94:	f000 fd4a 	bl	8007a2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f9c:	e3cd      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fa2:	e3ca      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006fa4:	4b1e      	ldr	r3, [pc, #120]	@ (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fa8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006fac:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006fae:	4b1c      	ldr	r3, [pc, #112]	@ (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0304 	and.w	r3, r3, #4
 8006fb6:	2b04      	cmp	r3, #4
 8006fb8:	d10c      	bne.n	8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8006fba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d109      	bne.n	8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fc0:	4b17      	ldr	r3, [pc, #92]	@ (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	08db      	lsrs	r3, r3, #3
 8006fc6:	f003 0303 	and.w	r3, r3, #3
 8006fca:	4a16      	ldr	r2, [pc, #88]	@ (8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8006fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fd2:	e01e      	b.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006fd4:	4b12      	ldr	r3, [pc, #72]	@ (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fe0:	d106      	bne.n	8006ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8006fe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fe4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006fe8:	d102      	bne.n	8006ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006fea:	4b0f      	ldr	r3, [pc, #60]	@ (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fee:	e010      	b.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ff8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ffc:	d106      	bne.n	800700c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8006ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007000:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007004:	d102      	bne.n	800700c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007006:	4b09      	ldr	r3, [pc, #36]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007008:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800700a:	e002      	b.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800700c:	2300      	movs	r3, #0
 800700e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007010:	e393      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007012:	e392      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007014:	4b06      	ldr	r3, [pc, #24]	@ (8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007018:	e38f      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800701a:	2300      	movs	r3, #0
 800701c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800701e:	e38c      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007020:	58024400 	.word	0x58024400
 8007024:	03d09000 	.word	0x03d09000
 8007028:	003d0900 	.word	0x003d0900
 800702c:	00f42400 	.word	0x00f42400
 8007030:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8007034:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007038:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800703c:	430b      	orrs	r3, r1
 800703e:	f040 809c 	bne.w	800717a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8007042:	4b9e      	ldr	r3, [pc, #632]	@ (80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007044:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007046:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800704a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800704c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800704e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007052:	d054      	beq.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8007054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007056:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800705a:	f200 808b 	bhi.w	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800705e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007060:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007064:	f000 8083 	beq.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8007068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800706a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800706e:	f200 8081 	bhi.w	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8007072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007074:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007078:	d02f      	beq.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800707a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007080:	d878      	bhi.n	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8007082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007084:	2b00      	cmp	r3, #0
 8007086:	d004      	beq.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8007088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800708a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800708e:	d012      	beq.n	80070b6 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8007090:	e070      	b.n	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007092:	4b8a      	ldr	r3, [pc, #552]	@ (80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800709a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800709e:	d107      	bne.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80070a4:	4618      	mov	r0, r3
 80070a6:	f000 fe15 	bl	8007cd4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070ae:	e344      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80070b0:	2300      	movs	r3, #0
 80070b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070b4:	e341      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070b6:	4b81      	ldr	r3, [pc, #516]	@ (80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070c2:	d107      	bne.n	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070c4:	f107 0318 	add.w	r3, r7, #24
 80070c8:	4618      	mov	r0, r3
 80070ca:	f000 fb5b 	bl	8007784 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070d2:	e332      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80070d4:	2300      	movs	r3, #0
 80070d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070d8:	e32f      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80070da:	4b78      	ldr	r3, [pc, #480]	@ (80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070e6:	d107      	bne.n	80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070e8:	f107 030c 	add.w	r3, r7, #12
 80070ec:	4618      	mov	r0, r3
 80070ee:	f000 fc9d 	bl	8007a2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070f6:	e320      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80070f8:	2300      	movs	r3, #0
 80070fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070fc:	e31d      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80070fe:	4b6f      	ldr	r3, [pc, #444]	@ (80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007102:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007106:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007108:	4b6c      	ldr	r3, [pc, #432]	@ (80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 0304 	and.w	r3, r3, #4
 8007110:	2b04      	cmp	r3, #4
 8007112:	d10c      	bne.n	800712e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8007114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007116:	2b00      	cmp	r3, #0
 8007118:	d109      	bne.n	800712e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800711a:	4b68      	ldr	r3, [pc, #416]	@ (80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	08db      	lsrs	r3, r3, #3
 8007120:	f003 0303 	and.w	r3, r3, #3
 8007124:	4a66      	ldr	r2, [pc, #408]	@ (80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8007126:	fa22 f303 	lsr.w	r3, r2, r3
 800712a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800712c:	e01e      	b.n	800716c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800712e:	4b63      	ldr	r3, [pc, #396]	@ (80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007136:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800713a:	d106      	bne.n	800714a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800713c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800713e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007142:	d102      	bne.n	800714a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007144:	4b5f      	ldr	r3, [pc, #380]	@ (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8007146:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007148:	e010      	b.n	800716c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800714a:	4b5c      	ldr	r3, [pc, #368]	@ (80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007152:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007156:	d106      	bne.n	8007166 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800715a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800715e:	d102      	bne.n	8007166 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007160:	4b59      	ldr	r3, [pc, #356]	@ (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8007162:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007164:	e002      	b.n	800716c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007166:	2300      	movs	r3, #0
 8007168:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 800716a:	e2e6      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800716c:	e2e5      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800716e:	4b57      	ldr	r3, [pc, #348]	@ (80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007170:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007172:	e2e2      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8007174:	2300      	movs	r3, #0
 8007176:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007178:	e2df      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800717a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800717e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007182:	430b      	orrs	r3, r1
 8007184:	f040 80a7 	bne.w	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007188:	4b4c      	ldr	r3, [pc, #304]	@ (80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800718a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800718c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007190:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007194:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007198:	d055      	beq.n	8007246 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800719a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800719c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80071a0:	f200 8096 	bhi.w	80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80071a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80071aa:	f000 8084 	beq.w	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 80071ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80071b4:	f200 808c 	bhi.w	80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80071b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071be:	d030      	beq.n	8007222 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 80071c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071c6:	f200 8083 	bhi.w	80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80071ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d004      	beq.n	80071da <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80071d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071d6:	d012      	beq.n	80071fe <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 80071d8:	e07a      	b.n	80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80071da:	4b38      	ldr	r3, [pc, #224]	@ (80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80071e6:	d107      	bne.n	80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80071e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80071ec:	4618      	mov	r0, r3
 80071ee:	f000 fd71 	bl	8007cd4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80071f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071f6:	e2a0      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80071f8:	2300      	movs	r3, #0
 80071fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071fc:	e29d      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80071fe:	4b2f      	ldr	r3, [pc, #188]	@ (80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007206:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800720a:	d107      	bne.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800720c:	f107 0318 	add.w	r3, r7, #24
 8007210:	4618      	mov	r0, r3
 8007212:	f000 fab7 	bl	8007784 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800721a:	e28e      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800721c:	2300      	movs	r3, #0
 800721e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007220:	e28b      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007222:	4b26      	ldr	r3, [pc, #152]	@ (80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800722a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800722e:	d107      	bne.n	8007240 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007230:	f107 030c 	add.w	r3, r7, #12
 8007234:	4618      	mov	r0, r3
 8007236:	f000 fbf9 	bl	8007a2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800723e:	e27c      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007240:	2300      	movs	r3, #0
 8007242:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007244:	e279      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007246:	4b1d      	ldr	r3, [pc, #116]	@ (80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800724a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800724e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007250:	4b1a      	ldr	r3, [pc, #104]	@ (80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 0304 	and.w	r3, r3, #4
 8007258:	2b04      	cmp	r3, #4
 800725a:	d10c      	bne.n	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 800725c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800725e:	2b00      	cmp	r3, #0
 8007260:	d109      	bne.n	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007262:	4b16      	ldr	r3, [pc, #88]	@ (80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	08db      	lsrs	r3, r3, #3
 8007268:	f003 0303 	and.w	r3, r3, #3
 800726c:	4a14      	ldr	r2, [pc, #80]	@ (80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800726e:	fa22 f303 	lsr.w	r3, r2, r3
 8007272:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007274:	e01e      	b.n	80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007276:	4b11      	ldr	r3, [pc, #68]	@ (80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800727e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007282:	d106      	bne.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007286:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800728a:	d102      	bne.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800728c:	4b0d      	ldr	r3, [pc, #52]	@ (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800728e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007290:	e010      	b.n	80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007292:	4b0a      	ldr	r3, [pc, #40]	@ (80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800729a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800729e:	d106      	bne.n	80072ae <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80072a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072a6:	d102      	bne.n	80072ae <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80072a8:	4b07      	ldr	r3, [pc, #28]	@ (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80072aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072ac:	e002      	b.n	80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80072ae:	2300      	movs	r3, #0
 80072b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80072b2:	e242      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80072b4:	e241      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80072b6:	4b05      	ldr	r3, [pc, #20]	@ (80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80072b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072ba:	e23e      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80072bc:	58024400 	.word	0x58024400
 80072c0:	03d09000 	.word	0x03d09000
 80072c4:	003d0900 	.word	0x003d0900
 80072c8:	00f42400 	.word	0x00f42400
 80072cc:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80072d0:	2300      	movs	r3, #0
 80072d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072d4:	e231      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80072d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072da:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80072de:	430b      	orrs	r3, r1
 80072e0:	f040 8085 	bne.w	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80072e4:	4b9c      	ldr	r3, [pc, #624]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80072e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072e8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80072ec:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80072ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80072f4:	d06b      	beq.n	80073ce <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80072f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80072fc:	d874      	bhi.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80072fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007300:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007304:	d056      	beq.n	80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8007306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007308:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800730c:	d86c      	bhi.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800730e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007310:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007314:	d03b      	beq.n	800738e <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8007316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007318:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800731c:	d864      	bhi.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800731e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007320:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007324:	d021      	beq.n	800736a <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8007326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007328:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800732c:	d85c      	bhi.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800732e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007330:	2b00      	cmp	r3, #0
 8007332:	d004      	beq.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8007334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007336:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800733a:	d004      	beq.n	8007346 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 800733c:	e054      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800733e:	f7fe fb49 	bl	80059d4 <HAL_RCC_GetPCLK1Freq>
 8007342:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007344:	e1f9      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007346:	4b84      	ldr	r3, [pc, #528]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800734e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007352:	d107      	bne.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007354:	f107 0318 	add.w	r3, r7, #24
 8007358:	4618      	mov	r0, r3
 800735a:	f000 fa13 	bl	8007784 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007362:	e1ea      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007364:	2300      	movs	r3, #0
 8007366:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007368:	e1e7      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800736a:	4b7b      	ldr	r3, [pc, #492]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007372:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007376:	d107      	bne.n	8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007378:	f107 030c 	add.w	r3, r7, #12
 800737c:	4618      	mov	r0, r3
 800737e:	f000 fb55 	bl	8007a2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007386:	e1d8      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007388:	2300      	movs	r3, #0
 800738a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800738c:	e1d5      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800738e:	4b72      	ldr	r3, [pc, #456]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0304 	and.w	r3, r3, #4
 8007396:	2b04      	cmp	r3, #4
 8007398:	d109      	bne.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800739a:	4b6f      	ldr	r3, [pc, #444]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	08db      	lsrs	r3, r3, #3
 80073a0:	f003 0303 	and.w	r3, r3, #3
 80073a4:	4a6d      	ldr	r2, [pc, #436]	@ (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80073a6:	fa22 f303 	lsr.w	r3, r2, r3
 80073aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073ac:	e1c5      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80073ae:	2300      	movs	r3, #0
 80073b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073b2:	e1c2      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80073b4:	4b68      	ldr	r3, [pc, #416]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073c0:	d102      	bne.n	80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 80073c2:	4b67      	ldr	r3, [pc, #412]	@ (8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80073c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073c6:	e1b8      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80073c8:	2300      	movs	r3, #0
 80073ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073cc:	e1b5      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80073ce:	4b62      	ldr	r3, [pc, #392]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073da:	d102      	bne.n	80073e2 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 80073dc:	4b61      	ldr	r3, [pc, #388]	@ (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80073de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073e0:	e1ab      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80073e2:	2300      	movs	r3, #0
 80073e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073e6:	e1a8      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80073e8:	2300      	movs	r3, #0
 80073ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073ec:	e1a5      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80073ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073f2:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80073f6:	430b      	orrs	r3, r1
 80073f8:	d173      	bne.n	80074e2 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80073fa:	4b57      	ldr	r3, [pc, #348]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80073fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007402:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007406:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800740a:	d02f      	beq.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 800740c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800740e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007412:	d863      	bhi.n	80074dc <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8007414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007416:	2b00      	cmp	r3, #0
 8007418:	d004      	beq.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800741a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800741c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007420:	d012      	beq.n	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8007422:	e05b      	b.n	80074dc <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007424:	4b4c      	ldr	r3, [pc, #304]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800742c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007430:	d107      	bne.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007432:	f107 0318 	add.w	r3, r7, #24
 8007436:	4618      	mov	r0, r3
 8007438:	f000 f9a4 	bl	8007784 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007440:	e17b      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007442:	2300      	movs	r3, #0
 8007444:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007446:	e178      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007448:	4b43      	ldr	r3, [pc, #268]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007450:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007454:	d107      	bne.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007456:	f107 030c 	add.w	r3, r7, #12
 800745a:	4618      	mov	r0, r3
 800745c:	f000 fae6 	bl	8007a2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007464:	e169      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007466:	2300      	movs	r3, #0
 8007468:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800746a:	e166      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800746c:	4b3a      	ldr	r3, [pc, #232]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800746e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007470:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007474:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007476:	4b38      	ldr	r3, [pc, #224]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 0304 	and.w	r3, r3, #4
 800747e:	2b04      	cmp	r3, #4
 8007480:	d10c      	bne.n	800749c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8007482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007484:	2b00      	cmp	r3, #0
 8007486:	d109      	bne.n	800749c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007488:	4b33      	ldr	r3, [pc, #204]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	08db      	lsrs	r3, r3, #3
 800748e:	f003 0303 	and.w	r3, r3, #3
 8007492:	4a32      	ldr	r2, [pc, #200]	@ (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007494:	fa22 f303 	lsr.w	r3, r2, r3
 8007498:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800749a:	e01e      	b.n	80074da <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800749c:	4b2e      	ldr	r3, [pc, #184]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074a8:	d106      	bne.n	80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 80074aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074b0:	d102      	bne.n	80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80074b2:	4b2b      	ldr	r3, [pc, #172]	@ (8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80074b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074b6:	e010      	b.n	80074da <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80074b8:	4b27      	ldr	r3, [pc, #156]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074c4:	d106      	bne.n	80074d4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 80074c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074cc:	d102      	bne.n	80074d4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80074ce:	4b25      	ldr	r3, [pc, #148]	@ (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80074d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074d2:	e002      	b.n	80074da <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80074d4:	2300      	movs	r3, #0
 80074d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80074d8:	e12f      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80074da:	e12e      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80074dc:	2300      	movs	r3, #0
 80074de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074e0:	e12b      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80074e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074e6:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80074ea:	430b      	orrs	r3, r1
 80074ec:	d13c      	bne.n	8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80074ee:	4b1a      	ldr	r3, [pc, #104]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80074f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80074f6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80074f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d004      	beq.n	8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 80074fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007500:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007504:	d012      	beq.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8007506:	e023      	b.n	8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007508:	4b13      	ldr	r3, [pc, #76]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007510:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007514:	d107      	bne.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007516:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800751a:	4618      	mov	r0, r3
 800751c:	f000 fbda 	bl	8007cd4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007524:	e109      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007526:	2300      	movs	r3, #0
 8007528:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800752a:	e106      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800752c:	4b0a      	ldr	r3, [pc, #40]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007534:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007538:	d107      	bne.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800753a:	f107 0318 	add.w	r3, r7, #24
 800753e:	4618      	mov	r0, r3
 8007540:	f000 f920 	bl	8007784 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007544:	6a3b      	ldr	r3, [r7, #32]
 8007546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007548:	e0f7      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800754a:	2300      	movs	r3, #0
 800754c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800754e:	e0f4      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8007550:	2300      	movs	r3, #0
 8007552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007554:	e0f1      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007556:	bf00      	nop
 8007558:	58024400 	.word	0x58024400
 800755c:	03d09000 	.word	0x03d09000
 8007560:	003d0900 	.word	0x003d0900
 8007564:	00f42400 	.word	0x00f42400
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007568:	e9d7 2300 	ldrd	r2, r3, [r7]
 800756c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007570:	430b      	orrs	r3, r1
 8007572:	f040 8091 	bne.w	8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007576:	4b73      	ldr	r3, [pc, #460]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800757a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800757e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007582:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8007586:	f000 8081 	beq.w	800768c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800758a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800758c:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8007590:	d87f      	bhi.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007594:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007598:	d06b      	beq.n	8007672 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800759a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800759c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80075a0:	d877      	bhi.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80075a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075a8:	d056      	beq.n	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 80075aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075b0:	d86f      	bhi.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80075b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80075b8:	d03b      	beq.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80075ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80075c0:	d867      	bhi.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80075c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075c8:	d021      	beq.n	800760e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80075ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075d0:	d85f      	bhi.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80075d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d004      	beq.n	80075e2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80075d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075de:	d004      	beq.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 80075e0:	e057      	b.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80075e2:	f000 f8b9 	bl	8007758 <HAL_RCCEx_GetD3PCLK1Freq>
 80075e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80075e8:	e0a7      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80075ea:	4b56      	ldr	r3, [pc, #344]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075f6:	d107      	bne.n	8007608 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075f8:	f107 0318 	add.w	r3, r7, #24
 80075fc:	4618      	mov	r0, r3
 80075fe:	f000 f8c1 	bl	8007784 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007606:	e098      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007608:	2300      	movs	r3, #0
 800760a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800760c:	e095      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800760e:	4b4d      	ldr	r3, [pc, #308]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007616:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800761a:	d107      	bne.n	800762c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800761c:	f107 030c 	add.w	r3, r7, #12
 8007620:	4618      	mov	r0, r3
 8007622:	f000 fa03 	bl	8007a2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800762a:	e086      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800762c:	2300      	movs	r3, #0
 800762e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007630:	e083      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007632:	4b44      	ldr	r3, [pc, #272]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 0304 	and.w	r3, r3, #4
 800763a:	2b04      	cmp	r3, #4
 800763c:	d109      	bne.n	8007652 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800763e:	4b41      	ldr	r3, [pc, #260]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	08db      	lsrs	r3, r3, #3
 8007644:	f003 0303 	and.w	r3, r3, #3
 8007648:	4a3f      	ldr	r2, [pc, #252]	@ (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800764a:	fa22 f303 	lsr.w	r3, r2, r3
 800764e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007650:	e073      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007652:	2300      	movs	r3, #0
 8007654:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007656:	e070      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007658:	4b3a      	ldr	r3, [pc, #232]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007660:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007664:	d102      	bne.n	800766c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8007666:	4b39      	ldr	r3, [pc, #228]	@ (800774c <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8007668:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800766a:	e066      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800766c:	2300      	movs	r3, #0
 800766e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007670:	e063      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007672:	4b34      	ldr	r3, [pc, #208]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800767a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800767e:	d102      	bne.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8007680:	4b33      	ldr	r3, [pc, #204]	@ (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8007682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007684:	e059      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007686:	2300      	movs	r3, #0
 8007688:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800768a:	e056      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800768c:	4b31      	ldr	r3, [pc, #196]	@ (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 800768e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007690:	e053      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007692:	2300      	movs	r3, #0
 8007694:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007696:	e050      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007698:	e9d7 2300 	ldrd	r2, r3, [r7]
 800769c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80076a0:	430b      	orrs	r3, r1
 80076a2:	d148      	bne.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80076a4:	4b27      	ldr	r3, [pc, #156]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80076a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80076ac:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80076ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076b4:	d02a      	beq.n	800770c <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 80076b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076bc:	d838      	bhi.n	8007730 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80076be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d004      	beq.n	80076ce <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 80076c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076ca:	d00d      	beq.n	80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 80076cc:	e030      	b.n	8007730 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80076ce:	4b1d      	ldr	r3, [pc, #116]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076da:	d102      	bne.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 80076dc:	4b1c      	ldr	r3, [pc, #112]	@ (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80076de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076e0:	e02b      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80076e2:	2300      	movs	r3, #0
 80076e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076e6:	e028      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80076e8:	4b16      	ldr	r3, [pc, #88]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80076f4:	d107      	bne.n	8007706 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076fa:	4618      	mov	r0, r3
 80076fc:	f000 faea 	bl	8007cd4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007704:	e019      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007706:	2300      	movs	r3, #0
 8007708:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800770a:	e016      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800770c:	4b0d      	ldr	r3, [pc, #52]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007714:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007718:	d107      	bne.n	800772a <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800771a:	f107 0318 	add.w	r3, r7, #24
 800771e:	4618      	mov	r0, r3
 8007720:	f000 f830 	bl	8007784 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007728:	e007      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800772a:	2300      	movs	r3, #0
 800772c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800772e:	e004      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8007730:	2300      	movs	r3, #0
 8007732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007734:	e001      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8007736:	2300      	movs	r3, #0
 8007738:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800773a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800773c:	4618      	mov	r0, r3
 800773e:	3740      	adds	r7, #64	@ 0x40
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	58024400 	.word	0x58024400
 8007748:	03d09000 	.word	0x03d09000
 800774c:	003d0900 	.word	0x003d0900
 8007750:	00f42400 	.word	0x00f42400
 8007754:	00bb8000 	.word	0x00bb8000

08007758 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800775c:	f7fe f90a 	bl	8005974 <HAL_RCC_GetHCLKFreq>
 8007760:	4602      	mov	r2, r0
 8007762:	4b06      	ldr	r3, [pc, #24]	@ (800777c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007764:	6a1b      	ldr	r3, [r3, #32]
 8007766:	091b      	lsrs	r3, r3, #4
 8007768:	f003 0307 	and.w	r3, r3, #7
 800776c:	4904      	ldr	r1, [pc, #16]	@ (8007780 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800776e:	5ccb      	ldrb	r3, [r1, r3]
 8007770:	f003 031f 	and.w	r3, r3, #31
 8007774:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007778:	4618      	mov	r0, r3
 800777a:	bd80      	pop	{r7, pc}
 800777c:	58024400 	.word	0x58024400
 8007780:	0800e294 	.word	0x0800e294

08007784 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007784:	b480      	push	{r7}
 8007786:	b089      	sub	sp, #36	@ 0x24
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800778c:	4ba1      	ldr	r3, [pc, #644]	@ (8007a14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800778e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007790:	f003 0303 	and.w	r3, r3, #3
 8007794:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007796:	4b9f      	ldr	r3, [pc, #636]	@ (8007a14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800779a:	0b1b      	lsrs	r3, r3, #12
 800779c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077a0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80077a2:	4b9c      	ldr	r3, [pc, #624]	@ (8007a14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077a6:	091b      	lsrs	r3, r3, #4
 80077a8:	f003 0301 	and.w	r3, r3, #1
 80077ac:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80077ae:	4b99      	ldr	r3, [pc, #612]	@ (8007a14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077b2:	08db      	lsrs	r3, r3, #3
 80077b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077b8:	693a      	ldr	r2, [r7, #16]
 80077ba:	fb02 f303 	mul.w	r3, r2, r3
 80077be:	ee07 3a90 	vmov	s15, r3
 80077c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f000 8111 	beq.w	80079f4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	f000 8083 	beq.w	80078e0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80077da:	69bb      	ldr	r3, [r7, #24]
 80077dc:	2b02      	cmp	r3, #2
 80077de:	f200 80a1 	bhi.w	8007924 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d003      	beq.n	80077f0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d056      	beq.n	800789c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80077ee:	e099      	b.n	8007924 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077f0:	4b88      	ldr	r3, [pc, #544]	@ (8007a14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f003 0320 	and.w	r3, r3, #32
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d02d      	beq.n	8007858 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077fc:	4b85      	ldr	r3, [pc, #532]	@ (8007a14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	08db      	lsrs	r3, r3, #3
 8007802:	f003 0303 	and.w	r3, r3, #3
 8007806:	4a84      	ldr	r2, [pc, #528]	@ (8007a18 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007808:	fa22 f303 	lsr.w	r3, r2, r3
 800780c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	ee07 3a90 	vmov	s15, r3
 8007814:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	ee07 3a90 	vmov	s15, r3
 800781e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007826:	4b7b      	ldr	r3, [pc, #492]	@ (8007a14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800782a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800782e:	ee07 3a90 	vmov	s15, r3
 8007832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007836:	ed97 6a03 	vldr	s12, [r7, #12]
 800783a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007a1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800783e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007846:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800784a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800784e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007852:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007856:	e087      	b.n	8007968 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	ee07 3a90 	vmov	s15, r3
 800785e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007862:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007a20 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800786a:	4b6a      	ldr	r3, [pc, #424]	@ (8007a14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800786c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800786e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007872:	ee07 3a90 	vmov	s15, r3
 8007876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800787a:	ed97 6a03 	vldr	s12, [r7, #12]
 800787e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007a1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800788a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800788e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007896:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800789a:	e065      	b.n	8007968 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	ee07 3a90 	vmov	s15, r3
 80078a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078a6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007a24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80078aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078ae:	4b59      	ldr	r3, [pc, #356]	@ (8007a14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078b6:	ee07 3a90 	vmov	s15, r3
 80078ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078be:	ed97 6a03 	vldr	s12, [r7, #12]
 80078c2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007a1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80078c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078de:	e043      	b.n	8007968 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	ee07 3a90 	vmov	s15, r3
 80078e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007a28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80078ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078f2:	4b48      	ldr	r3, [pc, #288]	@ (8007a14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078fa:	ee07 3a90 	vmov	s15, r3
 80078fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007902:	ed97 6a03 	vldr	s12, [r7, #12]
 8007906:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007a1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800790a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800790e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007912:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800791a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800791e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007922:	e021      	b.n	8007968 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	ee07 3a90 	vmov	s15, r3
 800792a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800792e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007a24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007936:	4b37      	ldr	r3, [pc, #220]	@ (8007a14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800793a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800793e:	ee07 3a90 	vmov	s15, r3
 8007942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007946:	ed97 6a03 	vldr	s12, [r7, #12]
 800794a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007a1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800794e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007956:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800795a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800795e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007962:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007966:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007968:	4b2a      	ldr	r3, [pc, #168]	@ (8007a14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800796a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800796c:	0a5b      	lsrs	r3, r3, #9
 800796e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007972:	ee07 3a90 	vmov	s15, r3
 8007976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800797a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800797e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007982:	edd7 6a07 	vldr	s13, [r7, #28]
 8007986:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800798a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800798e:	ee17 2a90 	vmov	r2, s15
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007996:	4b1f      	ldr	r3, [pc, #124]	@ (8007a14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800799a:	0c1b      	lsrs	r3, r3, #16
 800799c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079a0:	ee07 3a90 	vmov	s15, r3
 80079a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80079ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80079b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079bc:	ee17 2a90 	vmov	r2, s15
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80079c4:	4b13      	ldr	r3, [pc, #76]	@ (8007a14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079c8:	0e1b      	lsrs	r3, r3, #24
 80079ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079ce:	ee07 3a90 	vmov	s15, r3
 80079d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80079da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079de:	edd7 6a07 	vldr	s13, [r7, #28]
 80079e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079ea:	ee17 2a90 	vmov	r2, s15
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80079f2:	e008      	b.n	8007a06 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	609a      	str	r2, [r3, #8]
}
 8007a06:	bf00      	nop
 8007a08:	3724      	adds	r7, #36	@ 0x24
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	58024400 	.word	0x58024400
 8007a18:	03d09000 	.word	0x03d09000
 8007a1c:	46000000 	.word	0x46000000
 8007a20:	4c742400 	.word	0x4c742400
 8007a24:	4a742400 	.word	0x4a742400
 8007a28:	4b742400 	.word	0x4b742400

08007a2c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b089      	sub	sp, #36	@ 0x24
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a34:	4ba1      	ldr	r3, [pc, #644]	@ (8007cbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a38:	f003 0303 	and.w	r3, r3, #3
 8007a3c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007a3e:	4b9f      	ldr	r3, [pc, #636]	@ (8007cbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a42:	0d1b      	lsrs	r3, r3, #20
 8007a44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a48:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007a4a:	4b9c      	ldr	r3, [pc, #624]	@ (8007cbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a4e:	0a1b      	lsrs	r3, r3, #8
 8007a50:	f003 0301 	and.w	r3, r3, #1
 8007a54:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007a56:	4b99      	ldr	r3, [pc, #612]	@ (8007cbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a5a:	08db      	lsrs	r3, r3, #3
 8007a5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a60:	693a      	ldr	r2, [r7, #16]
 8007a62:	fb02 f303 	mul.w	r3, r2, r3
 8007a66:	ee07 3a90 	vmov	s15, r3
 8007a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f000 8111 	beq.w	8007c9c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	f000 8083 	beq.w	8007b88 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	f200 80a1 	bhi.w	8007bcc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d003      	beq.n	8007a98 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d056      	beq.n	8007b44 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007a96:	e099      	b.n	8007bcc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a98:	4b88      	ldr	r3, [pc, #544]	@ (8007cbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 0320 	and.w	r3, r3, #32
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d02d      	beq.n	8007b00 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007aa4:	4b85      	ldr	r3, [pc, #532]	@ (8007cbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	08db      	lsrs	r3, r3, #3
 8007aaa:	f003 0303 	and.w	r3, r3, #3
 8007aae:	4a84      	ldr	r2, [pc, #528]	@ (8007cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ab4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	ee07 3a90 	vmov	s15, r3
 8007abc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	ee07 3a90 	vmov	s15, r3
 8007ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ace:	4b7b      	ldr	r3, [pc, #492]	@ (8007cbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ad6:	ee07 3a90 	vmov	s15, r3
 8007ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ade:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ae2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007aee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007afa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007afe:	e087      	b.n	8007c10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	ee07 3a90 	vmov	s15, r3
 8007b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b0a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b12:	4b6a      	ldr	r3, [pc, #424]	@ (8007cbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b1a:	ee07 3a90 	vmov	s15, r3
 8007b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b22:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b26:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b42:	e065      	b.n	8007c10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	ee07 3a90 	vmov	s15, r3
 8007b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b4e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007ccc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b56:	4b59      	ldr	r3, [pc, #356]	@ (8007cbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b5e:	ee07 3a90 	vmov	s15, r3
 8007b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b66:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b6a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b86:	e043      	b.n	8007c10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	ee07 3a90 	vmov	s15, r3
 8007b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b92:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b9a:	4b48      	ldr	r3, [pc, #288]	@ (8007cbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ba2:	ee07 3a90 	vmov	s15, r3
 8007ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007baa:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007bca:	e021      	b.n	8007c10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	ee07 3a90 	vmov	s15, r3
 8007bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bd6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007ccc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bde:	4b37      	ldr	r3, [pc, #220]	@ (8007cbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007be6:	ee07 3a90 	vmov	s15, r3
 8007bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bee:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bf2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c0e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007c10:	4b2a      	ldr	r3, [pc, #168]	@ (8007cbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c14:	0a5b      	lsrs	r3, r3, #9
 8007c16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c1a:	ee07 3a90 	vmov	s15, r3
 8007c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c36:	ee17 2a90 	vmov	r2, s15
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007c3e:	4b1f      	ldr	r3, [pc, #124]	@ (8007cbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c42:	0c1b      	lsrs	r3, r3, #16
 8007c44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c48:	ee07 3a90 	vmov	s15, r3
 8007c4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c50:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c58:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c64:	ee17 2a90 	vmov	r2, s15
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007c6c:	4b13      	ldr	r3, [pc, #76]	@ (8007cbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c70:	0e1b      	lsrs	r3, r3, #24
 8007c72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c76:	ee07 3a90 	vmov	s15, r3
 8007c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c86:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c92:	ee17 2a90 	vmov	r2, s15
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007c9a:	e008      	b.n	8007cae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	609a      	str	r2, [r3, #8]
}
 8007cae:	bf00      	nop
 8007cb0:	3724      	adds	r7, #36	@ 0x24
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	58024400 	.word	0x58024400
 8007cc0:	03d09000 	.word	0x03d09000
 8007cc4:	46000000 	.word	0x46000000
 8007cc8:	4c742400 	.word	0x4c742400
 8007ccc:	4a742400 	.word	0x4a742400
 8007cd0:	4b742400 	.word	0x4b742400

08007cd4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b089      	sub	sp, #36	@ 0x24
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007cdc:	4ba0      	ldr	r3, [pc, #640]	@ (8007f60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ce0:	f003 0303 	and.w	r3, r3, #3
 8007ce4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007ce6:	4b9e      	ldr	r3, [pc, #632]	@ (8007f60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cea:	091b      	lsrs	r3, r3, #4
 8007cec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007cf0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007cf2:	4b9b      	ldr	r3, [pc, #620]	@ (8007f60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007cfc:	4b98      	ldr	r3, [pc, #608]	@ (8007f60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007cfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d00:	08db      	lsrs	r3, r3, #3
 8007d02:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d06:	693a      	ldr	r2, [r7, #16]
 8007d08:	fb02 f303 	mul.w	r3, r2, r3
 8007d0c:	ee07 3a90 	vmov	s15, r3
 8007d10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d14:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f000 8111 	beq.w	8007f42 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	2b02      	cmp	r3, #2
 8007d24:	f000 8083 	beq.w	8007e2e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	f200 80a1 	bhi.w	8007e72 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d003      	beq.n	8007d3e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d056      	beq.n	8007dea <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007d3c:	e099      	b.n	8007e72 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d3e:	4b88      	ldr	r3, [pc, #544]	@ (8007f60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 0320 	and.w	r3, r3, #32
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d02d      	beq.n	8007da6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d4a:	4b85      	ldr	r3, [pc, #532]	@ (8007f60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	08db      	lsrs	r3, r3, #3
 8007d50:	f003 0303 	and.w	r3, r3, #3
 8007d54:	4a83      	ldr	r2, [pc, #524]	@ (8007f64 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007d56:	fa22 f303 	lsr.w	r3, r2, r3
 8007d5a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	ee07 3a90 	vmov	s15, r3
 8007d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	ee07 3a90 	vmov	s15, r3
 8007d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d74:	4b7a      	ldr	r3, [pc, #488]	@ (8007f60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d7c:	ee07 3a90 	vmov	s15, r3
 8007d80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d84:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d88:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8007f68 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007d8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007da0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007da4:	e087      	b.n	8007eb6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	ee07 3a90 	vmov	s15, r3
 8007dac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007db0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8007f6c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007db4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007db8:	4b69      	ldr	r3, [pc, #420]	@ (8007f60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dc0:	ee07 3a90 	vmov	s15, r3
 8007dc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dc8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dcc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8007f68 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007dd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dd8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ddc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007de4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007de8:	e065      	b.n	8007eb6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	ee07 3a90 	vmov	s15, r3
 8007df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007df4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8007f70 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007df8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dfc:	4b58      	ldr	r3, [pc, #352]	@ (8007f60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e04:	ee07 3a90 	vmov	s15, r3
 8007e08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e0c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e10:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8007f68 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007e14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e1c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e2c:	e043      	b.n	8007eb6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	ee07 3a90 	vmov	s15, r3
 8007e34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e38:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8007f74 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007e3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e40:	4b47      	ldr	r3, [pc, #284]	@ (8007f60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e48:	ee07 3a90 	vmov	s15, r3
 8007e4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e50:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e54:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8007f68 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007e58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e60:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e6c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e70:	e021      	b.n	8007eb6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	ee07 3a90 	vmov	s15, r3
 8007e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e7c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8007f6c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007e80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e84:	4b36      	ldr	r3, [pc, #216]	@ (8007f60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e8c:	ee07 3a90 	vmov	s15, r3
 8007e90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e94:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e98:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8007f68 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007e9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ea0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ea4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ea8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eb0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007eb4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007eb6:	4b2a      	ldr	r3, [pc, #168]	@ (8007f60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eba:	0a5b      	lsrs	r3, r3, #9
 8007ebc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ec0:	ee07 3a90 	vmov	s15, r3
 8007ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ec8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ecc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ed0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ed4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ed8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007edc:	ee17 2a90 	vmov	r2, s15
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007ee4:	4b1e      	ldr	r3, [pc, #120]	@ (8007f60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ee8:	0c1b      	lsrs	r3, r3, #16
 8007eea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007eee:	ee07 3a90 	vmov	s15, r3
 8007ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ef6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007efa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007efe:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f0a:	ee17 2a90 	vmov	r2, s15
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007f12:	4b13      	ldr	r3, [pc, #76]	@ (8007f60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f16:	0e1b      	lsrs	r3, r3, #24
 8007f18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f1c:	ee07 3a90 	vmov	s15, r3
 8007f20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007f28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f38:	ee17 2a90 	vmov	r2, s15
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007f40:	e008      	b.n	8007f54 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	609a      	str	r2, [r3, #8]
}
 8007f54:	bf00      	nop
 8007f56:	3724      	adds	r7, #36	@ 0x24
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr
 8007f60:	58024400 	.word	0x58024400
 8007f64:	03d09000 	.word	0x03d09000
 8007f68:	46000000 	.word	0x46000000
 8007f6c:	4c742400 	.word	0x4c742400
 8007f70:	4a742400 	.word	0x4a742400
 8007f74:	4b742400 	.word	0x4b742400

08007f78 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f82:	2300      	movs	r3, #0
 8007f84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007f86:	4b53      	ldr	r3, [pc, #332]	@ (80080d4 <RCCEx_PLL2_Config+0x15c>)
 8007f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f8a:	f003 0303 	and.w	r3, r3, #3
 8007f8e:	2b03      	cmp	r3, #3
 8007f90:	d101      	bne.n	8007f96 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e099      	b.n	80080ca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007f96:	4b4f      	ldr	r3, [pc, #316]	@ (80080d4 <RCCEx_PLL2_Config+0x15c>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a4e      	ldr	r2, [pc, #312]	@ (80080d4 <RCCEx_PLL2_Config+0x15c>)
 8007f9c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007fa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fa2:	f7f9 f987 	bl	80012b4 <HAL_GetTick>
 8007fa6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007fa8:	e008      	b.n	8007fbc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007faa:	f7f9 f983 	bl	80012b4 <HAL_GetTick>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	1ad3      	subs	r3, r2, r3
 8007fb4:	2b02      	cmp	r3, #2
 8007fb6:	d901      	bls.n	8007fbc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007fb8:	2303      	movs	r3, #3
 8007fba:	e086      	b.n	80080ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007fbc:	4b45      	ldr	r3, [pc, #276]	@ (80080d4 <RCCEx_PLL2_Config+0x15c>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d1f0      	bne.n	8007faa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007fc8:	4b42      	ldr	r3, [pc, #264]	@ (80080d4 <RCCEx_PLL2_Config+0x15c>)
 8007fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fcc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	031b      	lsls	r3, r3, #12
 8007fd6:	493f      	ldr	r1, [pc, #252]	@ (80080d4 <RCCEx_PLL2_Config+0x15c>)
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	628b      	str	r3, [r1, #40]	@ 0x28
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	3b01      	subs	r3, #1
 8007fe2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	3b01      	subs	r3, #1
 8007fec:	025b      	lsls	r3, r3, #9
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	431a      	orrs	r2, r3
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	3b01      	subs	r3, #1
 8007ff8:	041b      	lsls	r3, r3, #16
 8007ffa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007ffe:	431a      	orrs	r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	3b01      	subs	r3, #1
 8008006:	061b      	lsls	r3, r3, #24
 8008008:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800800c:	4931      	ldr	r1, [pc, #196]	@ (80080d4 <RCCEx_PLL2_Config+0x15c>)
 800800e:	4313      	orrs	r3, r2
 8008010:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008012:	4b30      	ldr	r3, [pc, #192]	@ (80080d4 <RCCEx_PLL2_Config+0x15c>)
 8008014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008016:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	695b      	ldr	r3, [r3, #20]
 800801e:	492d      	ldr	r1, [pc, #180]	@ (80080d4 <RCCEx_PLL2_Config+0x15c>)
 8008020:	4313      	orrs	r3, r2
 8008022:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008024:	4b2b      	ldr	r3, [pc, #172]	@ (80080d4 <RCCEx_PLL2_Config+0x15c>)
 8008026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008028:	f023 0220 	bic.w	r2, r3, #32
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	699b      	ldr	r3, [r3, #24]
 8008030:	4928      	ldr	r1, [pc, #160]	@ (80080d4 <RCCEx_PLL2_Config+0x15c>)
 8008032:	4313      	orrs	r3, r2
 8008034:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008036:	4b27      	ldr	r3, [pc, #156]	@ (80080d4 <RCCEx_PLL2_Config+0x15c>)
 8008038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800803a:	4a26      	ldr	r2, [pc, #152]	@ (80080d4 <RCCEx_PLL2_Config+0x15c>)
 800803c:	f023 0310 	bic.w	r3, r3, #16
 8008040:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008042:	4b24      	ldr	r3, [pc, #144]	@ (80080d4 <RCCEx_PLL2_Config+0x15c>)
 8008044:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008046:	4b24      	ldr	r3, [pc, #144]	@ (80080d8 <RCCEx_PLL2_Config+0x160>)
 8008048:	4013      	ands	r3, r2
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	69d2      	ldr	r2, [r2, #28]
 800804e:	00d2      	lsls	r2, r2, #3
 8008050:	4920      	ldr	r1, [pc, #128]	@ (80080d4 <RCCEx_PLL2_Config+0x15c>)
 8008052:	4313      	orrs	r3, r2
 8008054:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008056:	4b1f      	ldr	r3, [pc, #124]	@ (80080d4 <RCCEx_PLL2_Config+0x15c>)
 8008058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800805a:	4a1e      	ldr	r2, [pc, #120]	@ (80080d4 <RCCEx_PLL2_Config+0x15c>)
 800805c:	f043 0310 	orr.w	r3, r3, #16
 8008060:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d106      	bne.n	8008076 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008068:	4b1a      	ldr	r3, [pc, #104]	@ (80080d4 <RCCEx_PLL2_Config+0x15c>)
 800806a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800806c:	4a19      	ldr	r2, [pc, #100]	@ (80080d4 <RCCEx_PLL2_Config+0x15c>)
 800806e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008072:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008074:	e00f      	b.n	8008096 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	2b01      	cmp	r3, #1
 800807a:	d106      	bne.n	800808a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800807c:	4b15      	ldr	r3, [pc, #84]	@ (80080d4 <RCCEx_PLL2_Config+0x15c>)
 800807e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008080:	4a14      	ldr	r2, [pc, #80]	@ (80080d4 <RCCEx_PLL2_Config+0x15c>)
 8008082:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008086:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008088:	e005      	b.n	8008096 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800808a:	4b12      	ldr	r3, [pc, #72]	@ (80080d4 <RCCEx_PLL2_Config+0x15c>)
 800808c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800808e:	4a11      	ldr	r2, [pc, #68]	@ (80080d4 <RCCEx_PLL2_Config+0x15c>)
 8008090:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008094:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008096:	4b0f      	ldr	r3, [pc, #60]	@ (80080d4 <RCCEx_PLL2_Config+0x15c>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a0e      	ldr	r2, [pc, #56]	@ (80080d4 <RCCEx_PLL2_Config+0x15c>)
 800809c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80080a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080a2:	f7f9 f907 	bl	80012b4 <HAL_GetTick>
 80080a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80080a8:	e008      	b.n	80080bc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80080aa:	f7f9 f903 	bl	80012b4 <HAL_GetTick>
 80080ae:	4602      	mov	r2, r0
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	1ad3      	subs	r3, r2, r3
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d901      	bls.n	80080bc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80080b8:	2303      	movs	r3, #3
 80080ba:	e006      	b.n	80080ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80080bc:	4b05      	ldr	r3, [pc, #20]	@ (80080d4 <RCCEx_PLL2_Config+0x15c>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d0f0      	beq.n	80080aa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80080c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	58024400 	.word	0x58024400
 80080d8:	ffff0007 	.word	0xffff0007

080080dc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80080e6:	2300      	movs	r3, #0
 80080e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80080ea:	4b53      	ldr	r3, [pc, #332]	@ (8008238 <RCCEx_PLL3_Config+0x15c>)
 80080ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080ee:	f003 0303 	and.w	r3, r3, #3
 80080f2:	2b03      	cmp	r3, #3
 80080f4:	d101      	bne.n	80080fa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	e099      	b.n	800822e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80080fa:	4b4f      	ldr	r3, [pc, #316]	@ (8008238 <RCCEx_PLL3_Config+0x15c>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a4e      	ldr	r2, [pc, #312]	@ (8008238 <RCCEx_PLL3_Config+0x15c>)
 8008100:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008104:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008106:	f7f9 f8d5 	bl	80012b4 <HAL_GetTick>
 800810a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800810c:	e008      	b.n	8008120 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800810e:	f7f9 f8d1 	bl	80012b4 <HAL_GetTick>
 8008112:	4602      	mov	r2, r0
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	1ad3      	subs	r3, r2, r3
 8008118:	2b02      	cmp	r3, #2
 800811a:	d901      	bls.n	8008120 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800811c:	2303      	movs	r3, #3
 800811e:	e086      	b.n	800822e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008120:	4b45      	ldr	r3, [pc, #276]	@ (8008238 <RCCEx_PLL3_Config+0x15c>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008128:	2b00      	cmp	r3, #0
 800812a:	d1f0      	bne.n	800810e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800812c:	4b42      	ldr	r3, [pc, #264]	@ (8008238 <RCCEx_PLL3_Config+0x15c>)
 800812e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008130:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	051b      	lsls	r3, r3, #20
 800813a:	493f      	ldr	r1, [pc, #252]	@ (8008238 <RCCEx_PLL3_Config+0x15c>)
 800813c:	4313      	orrs	r3, r2
 800813e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	3b01      	subs	r3, #1
 8008146:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	3b01      	subs	r3, #1
 8008150:	025b      	lsls	r3, r3, #9
 8008152:	b29b      	uxth	r3, r3
 8008154:	431a      	orrs	r2, r3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	3b01      	subs	r3, #1
 800815c:	041b      	lsls	r3, r3, #16
 800815e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008162:	431a      	orrs	r2, r3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	691b      	ldr	r3, [r3, #16]
 8008168:	3b01      	subs	r3, #1
 800816a:	061b      	lsls	r3, r3, #24
 800816c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008170:	4931      	ldr	r1, [pc, #196]	@ (8008238 <RCCEx_PLL3_Config+0x15c>)
 8008172:	4313      	orrs	r3, r2
 8008174:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008176:	4b30      	ldr	r3, [pc, #192]	@ (8008238 <RCCEx_PLL3_Config+0x15c>)
 8008178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800817a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	695b      	ldr	r3, [r3, #20]
 8008182:	492d      	ldr	r1, [pc, #180]	@ (8008238 <RCCEx_PLL3_Config+0x15c>)
 8008184:	4313      	orrs	r3, r2
 8008186:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008188:	4b2b      	ldr	r3, [pc, #172]	@ (8008238 <RCCEx_PLL3_Config+0x15c>)
 800818a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800818c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	699b      	ldr	r3, [r3, #24]
 8008194:	4928      	ldr	r1, [pc, #160]	@ (8008238 <RCCEx_PLL3_Config+0x15c>)
 8008196:	4313      	orrs	r3, r2
 8008198:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800819a:	4b27      	ldr	r3, [pc, #156]	@ (8008238 <RCCEx_PLL3_Config+0x15c>)
 800819c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800819e:	4a26      	ldr	r2, [pc, #152]	@ (8008238 <RCCEx_PLL3_Config+0x15c>)
 80081a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80081a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80081a6:	4b24      	ldr	r3, [pc, #144]	@ (8008238 <RCCEx_PLL3_Config+0x15c>)
 80081a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80081aa:	4b24      	ldr	r3, [pc, #144]	@ (800823c <RCCEx_PLL3_Config+0x160>)
 80081ac:	4013      	ands	r3, r2
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	69d2      	ldr	r2, [r2, #28]
 80081b2:	00d2      	lsls	r2, r2, #3
 80081b4:	4920      	ldr	r1, [pc, #128]	@ (8008238 <RCCEx_PLL3_Config+0x15c>)
 80081b6:	4313      	orrs	r3, r2
 80081b8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80081ba:	4b1f      	ldr	r3, [pc, #124]	@ (8008238 <RCCEx_PLL3_Config+0x15c>)
 80081bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081be:	4a1e      	ldr	r2, [pc, #120]	@ (8008238 <RCCEx_PLL3_Config+0x15c>)
 80081c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d106      	bne.n	80081da <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80081cc:	4b1a      	ldr	r3, [pc, #104]	@ (8008238 <RCCEx_PLL3_Config+0x15c>)
 80081ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d0:	4a19      	ldr	r2, [pc, #100]	@ (8008238 <RCCEx_PLL3_Config+0x15c>)
 80081d2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80081d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80081d8:	e00f      	b.n	80081fa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d106      	bne.n	80081ee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80081e0:	4b15      	ldr	r3, [pc, #84]	@ (8008238 <RCCEx_PLL3_Config+0x15c>)
 80081e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e4:	4a14      	ldr	r2, [pc, #80]	@ (8008238 <RCCEx_PLL3_Config+0x15c>)
 80081e6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80081ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80081ec:	e005      	b.n	80081fa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80081ee:	4b12      	ldr	r3, [pc, #72]	@ (8008238 <RCCEx_PLL3_Config+0x15c>)
 80081f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081f2:	4a11      	ldr	r2, [pc, #68]	@ (8008238 <RCCEx_PLL3_Config+0x15c>)
 80081f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80081f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80081fa:	4b0f      	ldr	r3, [pc, #60]	@ (8008238 <RCCEx_PLL3_Config+0x15c>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a0e      	ldr	r2, [pc, #56]	@ (8008238 <RCCEx_PLL3_Config+0x15c>)
 8008200:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008204:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008206:	f7f9 f855 	bl	80012b4 <HAL_GetTick>
 800820a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800820c:	e008      	b.n	8008220 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800820e:	f7f9 f851 	bl	80012b4 <HAL_GetTick>
 8008212:	4602      	mov	r2, r0
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	1ad3      	subs	r3, r2, r3
 8008218:	2b02      	cmp	r3, #2
 800821a:	d901      	bls.n	8008220 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800821c:	2303      	movs	r3, #3
 800821e:	e006      	b.n	800822e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008220:	4b05      	ldr	r3, [pc, #20]	@ (8008238 <RCCEx_PLL3_Config+0x15c>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008228:	2b00      	cmp	r3, #0
 800822a:	d0f0      	beq.n	800820e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800822c:	7bfb      	ldrb	r3, [r7, #15]
}
 800822e:	4618      	mov	r0, r3
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	58024400 	.word	0x58024400
 800823c:	ffff0007 	.word	0xffff0007

08008240 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d101      	bne.n	8008252 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	e10f      	b.n	8008472 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a87      	ldr	r2, [pc, #540]	@ (800847c <HAL_SPI_Init+0x23c>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d00f      	beq.n	8008282 <HAL_SPI_Init+0x42>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a86      	ldr	r2, [pc, #536]	@ (8008480 <HAL_SPI_Init+0x240>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d00a      	beq.n	8008282 <HAL_SPI_Init+0x42>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a84      	ldr	r2, [pc, #528]	@ (8008484 <HAL_SPI_Init+0x244>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d005      	beq.n	8008282 <HAL_SPI_Init+0x42>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	2b0f      	cmp	r3, #15
 800827c:	d901      	bls.n	8008282 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	e0f7      	b.n	8008472 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f900 	bl	8008488 <SPI_GetPacketSize>
 8008288:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a7b      	ldr	r2, [pc, #492]	@ (800847c <HAL_SPI_Init+0x23c>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d00c      	beq.n	80082ae <HAL_SPI_Init+0x6e>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a79      	ldr	r2, [pc, #484]	@ (8008480 <HAL_SPI_Init+0x240>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d007      	beq.n	80082ae <HAL_SPI_Init+0x6e>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a78      	ldr	r2, [pc, #480]	@ (8008484 <HAL_SPI_Init+0x244>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d002      	beq.n	80082ae <HAL_SPI_Init+0x6e>
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2b08      	cmp	r3, #8
 80082ac:	d811      	bhi.n	80082d2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80082b2:	4a72      	ldr	r2, [pc, #456]	@ (800847c <HAL_SPI_Init+0x23c>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d009      	beq.n	80082cc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a70      	ldr	r2, [pc, #448]	@ (8008480 <HAL_SPI_Init+0x240>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d004      	beq.n	80082cc <HAL_SPI_Init+0x8c>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a6f      	ldr	r2, [pc, #444]	@ (8008484 <HAL_SPI_Init+0x244>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d104      	bne.n	80082d6 <HAL_SPI_Init+0x96>
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2b10      	cmp	r3, #16
 80082d0:	d901      	bls.n	80082d6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80082d2:	2301      	movs	r3, #1
 80082d4:	e0cd      	b.n	8008472 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d106      	bne.n	80082f0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f7f8 fcfe 	bl	8000cec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2202      	movs	r2, #2
 80082f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f022 0201 	bic.w	r2, r2, #1
 8008306:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008312:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	699b      	ldr	r3, [r3, #24]
 8008318:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800831c:	d119      	bne.n	8008352 <HAL_SPI_Init+0x112>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008326:	d103      	bne.n	8008330 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800832c:	2b00      	cmp	r3, #0
 800832e:	d008      	beq.n	8008342 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008334:	2b00      	cmp	r3, #0
 8008336:	d10c      	bne.n	8008352 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800833c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008340:	d107      	bne.n	8008352 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008350:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00f      	beq.n	800837e <HAL_SPI_Init+0x13e>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	2b06      	cmp	r3, #6
 8008364:	d90b      	bls.n	800837e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	430a      	orrs	r2, r1
 800837a:	601a      	str	r2, [r3, #0]
 800837c:	e007      	b.n	800838e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800838c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	69da      	ldr	r2, [r3, #28]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008396:	431a      	orrs	r2, r3
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	431a      	orrs	r2, r3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083a0:	ea42 0103 	orr.w	r1, r2, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	68da      	ldr	r2, [r3, #12]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	430a      	orrs	r2, r1
 80083ae:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083b8:	431a      	orrs	r2, r3
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083be:	431a      	orrs	r2, r3
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	699b      	ldr	r3, [r3, #24]
 80083c4:	431a      	orrs	r2, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	431a      	orrs	r2, r3
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	695b      	ldr	r3, [r3, #20]
 80083d0:	431a      	orrs	r2, r3
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a1b      	ldr	r3, [r3, #32]
 80083d6:	431a      	orrs	r2, r3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	431a      	orrs	r2, r3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083e2:	431a      	orrs	r2, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	431a      	orrs	r2, r3
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083ee:	ea42 0103 	orr.w	r1, r2, r3
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	430a      	orrs	r2, r1
 80083fc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d113      	bne.n	800842e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008418:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800842c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f022 0201 	bic.w	r2, r2, #1
 800843c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008446:	2b00      	cmp	r3, #0
 8008448:	d00a      	beq.n	8008460 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	430a      	orrs	r2, r1
 800845e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8008470:	2300      	movs	r3, #0
}
 8008472:	4618      	mov	r0, r3
 8008474:	3710      	adds	r7, #16
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop
 800847c:	40013000 	.word	0x40013000
 8008480:	40003800 	.word	0x40003800
 8008484:	40003c00 	.word	0x40003c00

08008488 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008488:	b480      	push	{r7}
 800848a:	b085      	sub	sp, #20
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008494:	095b      	lsrs	r3, r3, #5
 8008496:	3301      	adds	r3, #1
 8008498:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	3301      	adds	r3, #1
 80084a0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	3307      	adds	r3, #7
 80084a6:	08db      	lsrs	r3, r3, #3
 80084a8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	fb02 f303 	mul.w	r3, r2, r3
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3714      	adds	r7, #20
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr

080084be <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80084be:	b580      	push	{r7, lr}
 80084c0:	b082      	sub	sp, #8
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d101      	bne.n	80084d0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	e042      	b.n	8008556 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d106      	bne.n	80084e8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f7f8 fcb8 	bl	8000e58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2224      	movs	r2, #36	@ 0x24
 80084ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f022 0201 	bic.w	r2, r2, #1
 80084fe:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008504:	2b00      	cmp	r3, #0
 8008506:	d002      	beq.n	800850e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f001 fa6f 	bl	80099ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 fc00 	bl	8008d14 <UART_SetConfig>
 8008514:	4603      	mov	r3, r0
 8008516:	2b01      	cmp	r3, #1
 8008518:	d101      	bne.n	800851e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800851a:	2301      	movs	r3, #1
 800851c:	e01b      	b.n	8008556 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	685a      	ldr	r2, [r3, #4]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800852c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	689a      	ldr	r2, [r3, #8]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800853c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f042 0201 	orr.w	r2, r2, #1
 800854c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f001 faee 	bl	8009b30 <UART_CheckIdleState>
 8008554:	4603      	mov	r3, r0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3708      	adds	r7, #8
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
	...

08008560 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b0ba      	sub	sp, #232	@ 0xe8
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	69db      	ldr	r3, [r3, #28]
 800856e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008586:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800858a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800858e:	4013      	ands	r3, r2
 8008590:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008594:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008598:	2b00      	cmp	r3, #0
 800859a:	d11b      	bne.n	80085d4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800859c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085a0:	f003 0320 	and.w	r3, r3, #32
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d015      	beq.n	80085d4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80085a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085ac:	f003 0320 	and.w	r3, r3, #32
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d105      	bne.n	80085c0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80085b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d009      	beq.n	80085d4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	f000 8377 	beq.w	8008cb8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	4798      	blx	r3
      }
      return;
 80085d2:	e371      	b.n	8008cb8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80085d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f000 8123 	beq.w	8008824 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80085de:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80085e2:	4b8d      	ldr	r3, [pc, #564]	@ (8008818 <HAL_UART_IRQHandler+0x2b8>)
 80085e4:	4013      	ands	r3, r2
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d106      	bne.n	80085f8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80085ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80085ee:	4b8b      	ldr	r3, [pc, #556]	@ (800881c <HAL_UART_IRQHandler+0x2bc>)
 80085f0:	4013      	ands	r3, r2
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	f000 8116 	beq.w	8008824 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80085f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085fc:	f003 0301 	and.w	r3, r3, #1
 8008600:	2b00      	cmp	r3, #0
 8008602:	d011      	beq.n	8008628 <HAL_UART_IRQHandler+0xc8>
 8008604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800860c:	2b00      	cmp	r3, #0
 800860e:	d00b      	beq.n	8008628 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2201      	movs	r2, #1
 8008616:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800861e:	f043 0201 	orr.w	r2, r3, #1
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800862c:	f003 0302 	and.w	r3, r3, #2
 8008630:	2b00      	cmp	r3, #0
 8008632:	d011      	beq.n	8008658 <HAL_UART_IRQHandler+0xf8>
 8008634:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008638:	f003 0301 	and.w	r3, r3, #1
 800863c:	2b00      	cmp	r3, #0
 800863e:	d00b      	beq.n	8008658 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2202      	movs	r2, #2
 8008646:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800864e:	f043 0204 	orr.w	r2, r3, #4
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800865c:	f003 0304 	and.w	r3, r3, #4
 8008660:	2b00      	cmp	r3, #0
 8008662:	d011      	beq.n	8008688 <HAL_UART_IRQHandler+0x128>
 8008664:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008668:	f003 0301 	and.w	r3, r3, #1
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00b      	beq.n	8008688 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2204      	movs	r2, #4
 8008676:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800867e:	f043 0202 	orr.w	r2, r3, #2
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800868c:	f003 0308 	and.w	r3, r3, #8
 8008690:	2b00      	cmp	r3, #0
 8008692:	d017      	beq.n	80086c4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008698:	f003 0320 	and.w	r3, r3, #32
 800869c:	2b00      	cmp	r3, #0
 800869e:	d105      	bne.n	80086ac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80086a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80086a4:	4b5c      	ldr	r3, [pc, #368]	@ (8008818 <HAL_UART_IRQHandler+0x2b8>)
 80086a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00b      	beq.n	80086c4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2208      	movs	r2, #8
 80086b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086ba:	f043 0208 	orr.w	r2, r3, #8
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80086c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d012      	beq.n	80086f6 <HAL_UART_IRQHandler+0x196>
 80086d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d00c      	beq.n	80086f6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80086e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086ec:	f043 0220 	orr.w	r2, r3, #32
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	f000 82dd 	beq.w	8008cbc <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008706:	f003 0320 	and.w	r3, r3, #32
 800870a:	2b00      	cmp	r3, #0
 800870c:	d013      	beq.n	8008736 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800870e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008712:	f003 0320 	and.w	r3, r3, #32
 8008716:	2b00      	cmp	r3, #0
 8008718:	d105      	bne.n	8008726 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800871a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800871e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008722:	2b00      	cmp	r3, #0
 8008724:	d007      	beq.n	8008736 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800872a:	2b00      	cmp	r3, #0
 800872c:	d003      	beq.n	8008736 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800873c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800874a:	2b40      	cmp	r3, #64	@ 0x40
 800874c:	d005      	beq.n	800875a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800874e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008752:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008756:	2b00      	cmp	r3, #0
 8008758:	d054      	beq.n	8008804 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f001 fb00 	bl	8009d60 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800876a:	2b40      	cmp	r3, #64	@ 0x40
 800876c:	d146      	bne.n	80087fc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	3308      	adds	r3, #8
 8008774:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008778:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800877c:	e853 3f00 	ldrex	r3, [r3]
 8008780:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008784:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008788:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800878c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	3308      	adds	r3, #8
 8008796:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800879a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800879e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80087a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80087aa:	e841 2300 	strex	r3, r2, [r1]
 80087ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80087b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d1d9      	bne.n	800876e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d017      	beq.n	80087f4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087ca:	4a15      	ldr	r2, [pc, #84]	@ (8008820 <HAL_UART_IRQHandler+0x2c0>)
 80087cc:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087d4:	4618      	mov	r0, r3
 80087d6:	f7fa f9ef 	bl	8002bb8 <HAL_DMA_Abort_IT>
 80087da:	4603      	mov	r3, r0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d019      	beq.n	8008814 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80087ee:	4610      	mov	r0, r2
 80087f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087f2:	e00f      	b.n	8008814 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 fa77 	bl	8008ce8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087fa:	e00b      	b.n	8008814 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 fa73 	bl	8008ce8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008802:	e007      	b.n	8008814 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 fa6f 	bl	8008ce8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008812:	e253      	b.n	8008cbc <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008814:	bf00      	nop
    return;
 8008816:	e251      	b.n	8008cbc <HAL_UART_IRQHandler+0x75c>
 8008818:	10000001 	.word	0x10000001
 800881c:	04000120 	.word	0x04000120
 8008820:	08009e2d 	.word	0x08009e2d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008828:	2b01      	cmp	r3, #1
 800882a:	f040 81e7 	bne.w	8008bfc <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800882e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008832:	f003 0310 	and.w	r3, r3, #16
 8008836:	2b00      	cmp	r3, #0
 8008838:	f000 81e0 	beq.w	8008bfc <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800883c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008840:	f003 0310 	and.w	r3, r3, #16
 8008844:	2b00      	cmp	r3, #0
 8008846:	f000 81d9 	beq.w	8008bfc <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2210      	movs	r2, #16
 8008850:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800885c:	2b40      	cmp	r3, #64	@ 0x40
 800885e:	f040 8151 	bne.w	8008b04 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a96      	ldr	r2, [pc, #600]	@ (8008ac4 <HAL_UART_IRQHandler+0x564>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d068      	beq.n	8008942 <HAL_UART_IRQHandler+0x3e2>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a93      	ldr	r2, [pc, #588]	@ (8008ac8 <HAL_UART_IRQHandler+0x568>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d061      	beq.n	8008942 <HAL_UART_IRQHandler+0x3e2>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a91      	ldr	r2, [pc, #580]	@ (8008acc <HAL_UART_IRQHandler+0x56c>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d05a      	beq.n	8008942 <HAL_UART_IRQHandler+0x3e2>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a8e      	ldr	r2, [pc, #568]	@ (8008ad0 <HAL_UART_IRQHandler+0x570>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d053      	beq.n	8008942 <HAL_UART_IRQHandler+0x3e2>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a8c      	ldr	r2, [pc, #560]	@ (8008ad4 <HAL_UART_IRQHandler+0x574>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d04c      	beq.n	8008942 <HAL_UART_IRQHandler+0x3e2>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a89      	ldr	r2, [pc, #548]	@ (8008ad8 <HAL_UART_IRQHandler+0x578>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d045      	beq.n	8008942 <HAL_UART_IRQHandler+0x3e2>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a87      	ldr	r2, [pc, #540]	@ (8008adc <HAL_UART_IRQHandler+0x57c>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d03e      	beq.n	8008942 <HAL_UART_IRQHandler+0x3e2>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a84      	ldr	r2, [pc, #528]	@ (8008ae0 <HAL_UART_IRQHandler+0x580>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d037      	beq.n	8008942 <HAL_UART_IRQHandler+0x3e2>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a82      	ldr	r2, [pc, #520]	@ (8008ae4 <HAL_UART_IRQHandler+0x584>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d030      	beq.n	8008942 <HAL_UART_IRQHandler+0x3e2>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a7f      	ldr	r2, [pc, #508]	@ (8008ae8 <HAL_UART_IRQHandler+0x588>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d029      	beq.n	8008942 <HAL_UART_IRQHandler+0x3e2>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a7d      	ldr	r2, [pc, #500]	@ (8008aec <HAL_UART_IRQHandler+0x58c>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d022      	beq.n	8008942 <HAL_UART_IRQHandler+0x3e2>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a7a      	ldr	r2, [pc, #488]	@ (8008af0 <HAL_UART_IRQHandler+0x590>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d01b      	beq.n	8008942 <HAL_UART_IRQHandler+0x3e2>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a78      	ldr	r2, [pc, #480]	@ (8008af4 <HAL_UART_IRQHandler+0x594>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d014      	beq.n	8008942 <HAL_UART_IRQHandler+0x3e2>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a75      	ldr	r2, [pc, #468]	@ (8008af8 <HAL_UART_IRQHandler+0x598>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d00d      	beq.n	8008942 <HAL_UART_IRQHandler+0x3e2>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a73      	ldr	r2, [pc, #460]	@ (8008afc <HAL_UART_IRQHandler+0x59c>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d006      	beq.n	8008942 <HAL_UART_IRQHandler+0x3e2>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a70      	ldr	r2, [pc, #448]	@ (8008b00 <HAL_UART_IRQHandler+0x5a0>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d106      	bne.n	8008950 <HAL_UART_IRQHandler+0x3f0>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	b29b      	uxth	r3, r3
 800894e:	e005      	b.n	800895c <HAL_UART_IRQHandler+0x3fc>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	b29b      	uxth	r3, r3
 800895c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008960:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008964:	2b00      	cmp	r3, #0
 8008966:	f000 81ab 	beq.w	8008cc0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008970:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008974:	429a      	cmp	r2, r3
 8008976:	f080 81a3 	bcs.w	8008cc0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008980:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800898a:	69db      	ldr	r3, [r3, #28]
 800898c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008990:	f000 8087 	beq.w	8008aa2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800899c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80089a0:	e853 3f00 	ldrex	r3, [r3]
 80089a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80089a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80089ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80089b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	461a      	mov	r2, r3
 80089ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80089be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80089c2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80089ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80089ce:	e841 2300 	strex	r3, r2, [r1]
 80089d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80089d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d1da      	bne.n	8008994 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	3308      	adds	r3, #8
 80089e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80089e8:	e853 3f00 	ldrex	r3, [r3]
 80089ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80089ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80089f0:	f023 0301 	bic.w	r3, r3, #1
 80089f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	3308      	adds	r3, #8
 80089fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008a02:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008a06:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a08:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008a0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008a0e:	e841 2300 	strex	r3, r2, [r1]
 8008a12:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008a14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d1e1      	bne.n	80089de <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	3308      	adds	r3, #8
 8008a20:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008a24:	e853 3f00 	ldrex	r3, [r3]
 8008a28:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008a2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008a2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	3308      	adds	r3, #8
 8008a3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008a3e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008a40:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a42:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008a44:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008a46:	e841 2300 	strex	r3, r2, [r1]
 8008a4a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008a4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d1e3      	bne.n	8008a1a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2220      	movs	r2, #32
 8008a56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a68:	e853 3f00 	ldrex	r3, [r3]
 8008a6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008a6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a70:	f023 0310 	bic.w	r3, r3, #16
 8008a74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a82:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008a84:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a86:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008a88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008a8a:	e841 2300 	strex	r3, r2, [r1]
 8008a8e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008a90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d1e4      	bne.n	8008a60 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f7f9 fd6d 	bl	800257c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2202      	movs	r2, #2
 8008aa6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	1ad3      	subs	r3, r2, r3
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	4619      	mov	r1, r3
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 f91d 	bl	8008cfc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008ac2:	e0fd      	b.n	8008cc0 <HAL_UART_IRQHandler+0x760>
 8008ac4:	40020010 	.word	0x40020010
 8008ac8:	40020028 	.word	0x40020028
 8008acc:	40020040 	.word	0x40020040
 8008ad0:	40020058 	.word	0x40020058
 8008ad4:	40020070 	.word	0x40020070
 8008ad8:	40020088 	.word	0x40020088
 8008adc:	400200a0 	.word	0x400200a0
 8008ae0:	400200b8 	.word	0x400200b8
 8008ae4:	40020410 	.word	0x40020410
 8008ae8:	40020428 	.word	0x40020428
 8008aec:	40020440 	.word	0x40020440
 8008af0:	40020458 	.word	0x40020458
 8008af4:	40020470 	.word	0x40020470
 8008af8:	40020488 	.word	0x40020488
 8008afc:	400204a0 	.word	0x400204a0
 8008b00:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	1ad3      	subs	r3, r2, r3
 8008b14:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	f000 80cf 	beq.w	8008cc4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8008b26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	f000 80ca 	beq.w	8008cc4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b38:	e853 3f00 	ldrex	r3, [r3]
 8008b3c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008b52:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b54:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b56:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b5a:	e841 2300 	strex	r3, r2, [r1]
 8008b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d1e4      	bne.n	8008b30 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	3308      	adds	r3, #8
 8008b6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b70:	e853 3f00 	ldrex	r3, [r3]
 8008b74:	623b      	str	r3, [r7, #32]
   return(result);
 8008b76:	6a3a      	ldr	r2, [r7, #32]
 8008b78:	4b55      	ldr	r3, [pc, #340]	@ (8008cd0 <HAL_UART_IRQHandler+0x770>)
 8008b7a:	4013      	ands	r3, r2
 8008b7c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	3308      	adds	r3, #8
 8008b86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008b8a:	633a      	str	r2, [r7, #48]	@ 0x30
 8008b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b92:	e841 2300 	strex	r3, r2, [r1]
 8008b96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d1e3      	bne.n	8008b66 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2220      	movs	r2, #32
 8008ba2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	e853 3f00 	ldrex	r3, [r3]
 8008bbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f023 0310 	bic.w	r3, r3, #16
 8008bc6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	461a      	mov	r2, r3
 8008bd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008bd4:	61fb      	str	r3, [r7, #28]
 8008bd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd8:	69b9      	ldr	r1, [r7, #24]
 8008bda:	69fa      	ldr	r2, [r7, #28]
 8008bdc:	e841 2300 	strex	r3, r2, [r1]
 8008be0:	617b      	str	r3, [r7, #20]
   return(result);
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d1e4      	bne.n	8008bb2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2202      	movs	r2, #2
 8008bec:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008bee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 f881 	bl	8008cfc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008bfa:	e063      	b.n	8008cc4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d00e      	beq.n	8008c26 <HAL_UART_IRQHandler+0x6c6>
 8008c08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d008      	beq.n	8008c26 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008c1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f001 f945 	bl	8009eae <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008c24:	e051      	b.n	8008cca <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d014      	beq.n	8008c5c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d105      	bne.n	8008c4a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008c3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d008      	beq.n	8008c5c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d03a      	beq.n	8008cc8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	4798      	blx	r3
    }
    return;
 8008c5a:	e035      	b.n	8008cc8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d009      	beq.n	8008c7c <HAL_UART_IRQHandler+0x71c>
 8008c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d003      	beq.n	8008c7c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f001 f8ef 	bl	8009e58 <UART_EndTransmit_IT>
    return;
 8008c7a:	e026      	b.n	8008cca <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d009      	beq.n	8008c9c <HAL_UART_IRQHandler+0x73c>
 8008c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c8c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d003      	beq.n	8008c9c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f001 f91e 	bl	8009ed6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008c9a:	e016      	b.n	8008cca <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ca0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d010      	beq.n	8008cca <HAL_UART_IRQHandler+0x76a>
 8008ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	da0c      	bge.n	8008cca <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f001 f906 	bl	8009ec2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008cb6:	e008      	b.n	8008cca <HAL_UART_IRQHandler+0x76a>
      return;
 8008cb8:	bf00      	nop
 8008cba:	e006      	b.n	8008cca <HAL_UART_IRQHandler+0x76a>
    return;
 8008cbc:	bf00      	nop
 8008cbe:	e004      	b.n	8008cca <HAL_UART_IRQHandler+0x76a>
      return;
 8008cc0:	bf00      	nop
 8008cc2:	e002      	b.n	8008cca <HAL_UART_IRQHandler+0x76a>
      return;
 8008cc4:	bf00      	nop
 8008cc6:	e000      	b.n	8008cca <HAL_UART_IRQHandler+0x76a>
    return;
 8008cc8:	bf00      	nop
  }
}
 8008cca:	37e8      	adds	r7, #232	@ 0xe8
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}
 8008cd0:	effffffe 	.word	0xeffffffe

08008cd4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008cdc:	bf00      	nop
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008cf0:	bf00      	nop
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	460b      	mov	r3, r1
 8008d06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008d08:	bf00      	nop
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d18:	b092      	sub	sp, #72	@ 0x48
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	689a      	ldr	r2, [r3, #8]
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	691b      	ldr	r3, [r3, #16]
 8008d2c:	431a      	orrs	r2, r3
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	695b      	ldr	r3, [r3, #20]
 8008d32:	431a      	orrs	r2, r3
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	69db      	ldr	r3, [r3, #28]
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	4bbe      	ldr	r3, [pc, #760]	@ (800903c <UART_SetConfig+0x328>)
 8008d44:	4013      	ands	r3, r2
 8008d46:	697a      	ldr	r2, [r7, #20]
 8008d48:	6812      	ldr	r2, [r2, #0]
 8008d4a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008d4c:	430b      	orrs	r3, r1
 8008d4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	68da      	ldr	r2, [r3, #12]
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	430a      	orrs	r2, r1
 8008d64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	699b      	ldr	r3, [r3, #24]
 8008d6a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4ab3      	ldr	r2, [pc, #716]	@ (8009040 <UART_SetConfig+0x32c>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d004      	beq.n	8008d80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	6a1b      	ldr	r3, [r3, #32]
 8008d7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	689a      	ldr	r2, [r3, #8]
 8008d86:	4baf      	ldr	r3, [pc, #700]	@ (8009044 <UART_SetConfig+0x330>)
 8008d88:	4013      	ands	r3, r2
 8008d8a:	697a      	ldr	r2, [r7, #20]
 8008d8c:	6812      	ldr	r2, [r2, #0]
 8008d8e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008d90:	430b      	orrs	r3, r1
 8008d92:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d9a:	f023 010f 	bic.w	r1, r3, #15
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	430a      	orrs	r2, r1
 8008da8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4aa6      	ldr	r2, [pc, #664]	@ (8009048 <UART_SetConfig+0x334>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d177      	bne.n	8008ea4 <UART_SetConfig+0x190>
 8008db4:	4ba5      	ldr	r3, [pc, #660]	@ (800904c <UART_SetConfig+0x338>)
 8008db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008db8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008dbc:	2b28      	cmp	r3, #40	@ 0x28
 8008dbe:	d86d      	bhi.n	8008e9c <UART_SetConfig+0x188>
 8008dc0:	a201      	add	r2, pc, #4	@ (adr r2, 8008dc8 <UART_SetConfig+0xb4>)
 8008dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc6:	bf00      	nop
 8008dc8:	08008e6d 	.word	0x08008e6d
 8008dcc:	08008e9d 	.word	0x08008e9d
 8008dd0:	08008e9d 	.word	0x08008e9d
 8008dd4:	08008e9d 	.word	0x08008e9d
 8008dd8:	08008e9d 	.word	0x08008e9d
 8008ddc:	08008e9d 	.word	0x08008e9d
 8008de0:	08008e9d 	.word	0x08008e9d
 8008de4:	08008e9d 	.word	0x08008e9d
 8008de8:	08008e75 	.word	0x08008e75
 8008dec:	08008e9d 	.word	0x08008e9d
 8008df0:	08008e9d 	.word	0x08008e9d
 8008df4:	08008e9d 	.word	0x08008e9d
 8008df8:	08008e9d 	.word	0x08008e9d
 8008dfc:	08008e9d 	.word	0x08008e9d
 8008e00:	08008e9d 	.word	0x08008e9d
 8008e04:	08008e9d 	.word	0x08008e9d
 8008e08:	08008e7d 	.word	0x08008e7d
 8008e0c:	08008e9d 	.word	0x08008e9d
 8008e10:	08008e9d 	.word	0x08008e9d
 8008e14:	08008e9d 	.word	0x08008e9d
 8008e18:	08008e9d 	.word	0x08008e9d
 8008e1c:	08008e9d 	.word	0x08008e9d
 8008e20:	08008e9d 	.word	0x08008e9d
 8008e24:	08008e9d 	.word	0x08008e9d
 8008e28:	08008e85 	.word	0x08008e85
 8008e2c:	08008e9d 	.word	0x08008e9d
 8008e30:	08008e9d 	.word	0x08008e9d
 8008e34:	08008e9d 	.word	0x08008e9d
 8008e38:	08008e9d 	.word	0x08008e9d
 8008e3c:	08008e9d 	.word	0x08008e9d
 8008e40:	08008e9d 	.word	0x08008e9d
 8008e44:	08008e9d 	.word	0x08008e9d
 8008e48:	08008e8d 	.word	0x08008e8d
 8008e4c:	08008e9d 	.word	0x08008e9d
 8008e50:	08008e9d 	.word	0x08008e9d
 8008e54:	08008e9d 	.word	0x08008e9d
 8008e58:	08008e9d 	.word	0x08008e9d
 8008e5c:	08008e9d 	.word	0x08008e9d
 8008e60:	08008e9d 	.word	0x08008e9d
 8008e64:	08008e9d 	.word	0x08008e9d
 8008e68:	08008e95 	.word	0x08008e95
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e72:	e326      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8008e74:	2304      	movs	r3, #4
 8008e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e7a:	e322      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8008e7c:	2308      	movs	r3, #8
 8008e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e82:	e31e      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8008e84:	2310      	movs	r3, #16
 8008e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e8a:	e31a      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8008e8c:	2320      	movs	r3, #32
 8008e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e92:	e316      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8008e94:	2340      	movs	r3, #64	@ 0x40
 8008e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e9a:	e312      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8008e9c:	2380      	movs	r3, #128	@ 0x80
 8008e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ea2:	e30e      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a69      	ldr	r2, [pc, #420]	@ (8009050 <UART_SetConfig+0x33c>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d130      	bne.n	8008f10 <UART_SetConfig+0x1fc>
 8008eae:	4b67      	ldr	r3, [pc, #412]	@ (800904c <UART_SetConfig+0x338>)
 8008eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008eb2:	f003 0307 	and.w	r3, r3, #7
 8008eb6:	2b05      	cmp	r3, #5
 8008eb8:	d826      	bhi.n	8008f08 <UART_SetConfig+0x1f4>
 8008eba:	a201      	add	r2, pc, #4	@ (adr r2, 8008ec0 <UART_SetConfig+0x1ac>)
 8008ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec0:	08008ed9 	.word	0x08008ed9
 8008ec4:	08008ee1 	.word	0x08008ee1
 8008ec8:	08008ee9 	.word	0x08008ee9
 8008ecc:	08008ef1 	.word	0x08008ef1
 8008ed0:	08008ef9 	.word	0x08008ef9
 8008ed4:	08008f01 	.word	0x08008f01
 8008ed8:	2300      	movs	r3, #0
 8008eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ede:	e2f0      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8008ee0:	2304      	movs	r3, #4
 8008ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ee6:	e2ec      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8008ee8:	2308      	movs	r3, #8
 8008eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eee:	e2e8      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8008ef0:	2310      	movs	r3, #16
 8008ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ef6:	e2e4      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8008ef8:	2320      	movs	r3, #32
 8008efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008efe:	e2e0      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8008f00:	2340      	movs	r3, #64	@ 0x40
 8008f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f06:	e2dc      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8008f08:	2380      	movs	r3, #128	@ 0x80
 8008f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f0e:	e2d8      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a4f      	ldr	r2, [pc, #316]	@ (8009054 <UART_SetConfig+0x340>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d130      	bne.n	8008f7c <UART_SetConfig+0x268>
 8008f1a:	4b4c      	ldr	r3, [pc, #304]	@ (800904c <UART_SetConfig+0x338>)
 8008f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f1e:	f003 0307 	and.w	r3, r3, #7
 8008f22:	2b05      	cmp	r3, #5
 8008f24:	d826      	bhi.n	8008f74 <UART_SetConfig+0x260>
 8008f26:	a201      	add	r2, pc, #4	@ (adr r2, 8008f2c <UART_SetConfig+0x218>)
 8008f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f2c:	08008f45 	.word	0x08008f45
 8008f30:	08008f4d 	.word	0x08008f4d
 8008f34:	08008f55 	.word	0x08008f55
 8008f38:	08008f5d 	.word	0x08008f5d
 8008f3c:	08008f65 	.word	0x08008f65
 8008f40:	08008f6d 	.word	0x08008f6d
 8008f44:	2300      	movs	r3, #0
 8008f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f4a:	e2ba      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8008f4c:	2304      	movs	r3, #4
 8008f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f52:	e2b6      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8008f54:	2308      	movs	r3, #8
 8008f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f5a:	e2b2      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8008f5c:	2310      	movs	r3, #16
 8008f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f62:	e2ae      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8008f64:	2320      	movs	r3, #32
 8008f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f6a:	e2aa      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8008f6c:	2340      	movs	r3, #64	@ 0x40
 8008f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f72:	e2a6      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8008f74:	2380      	movs	r3, #128	@ 0x80
 8008f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f7a:	e2a2      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a35      	ldr	r2, [pc, #212]	@ (8009058 <UART_SetConfig+0x344>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d130      	bne.n	8008fe8 <UART_SetConfig+0x2d4>
 8008f86:	4b31      	ldr	r3, [pc, #196]	@ (800904c <UART_SetConfig+0x338>)
 8008f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f8a:	f003 0307 	and.w	r3, r3, #7
 8008f8e:	2b05      	cmp	r3, #5
 8008f90:	d826      	bhi.n	8008fe0 <UART_SetConfig+0x2cc>
 8008f92:	a201      	add	r2, pc, #4	@ (adr r2, 8008f98 <UART_SetConfig+0x284>)
 8008f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f98:	08008fb1 	.word	0x08008fb1
 8008f9c:	08008fb9 	.word	0x08008fb9
 8008fa0:	08008fc1 	.word	0x08008fc1
 8008fa4:	08008fc9 	.word	0x08008fc9
 8008fa8:	08008fd1 	.word	0x08008fd1
 8008fac:	08008fd9 	.word	0x08008fd9
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fb6:	e284      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8008fb8:	2304      	movs	r3, #4
 8008fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fbe:	e280      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8008fc0:	2308      	movs	r3, #8
 8008fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fc6:	e27c      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8008fc8:	2310      	movs	r3, #16
 8008fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fce:	e278      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8008fd0:	2320      	movs	r3, #32
 8008fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fd6:	e274      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8008fd8:	2340      	movs	r3, #64	@ 0x40
 8008fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fde:	e270      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8008fe0:	2380      	movs	r3, #128	@ 0x80
 8008fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fe6:	e26c      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a1b      	ldr	r2, [pc, #108]	@ (800905c <UART_SetConfig+0x348>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d142      	bne.n	8009078 <UART_SetConfig+0x364>
 8008ff2:	4b16      	ldr	r3, [pc, #88]	@ (800904c <UART_SetConfig+0x338>)
 8008ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ff6:	f003 0307 	and.w	r3, r3, #7
 8008ffa:	2b05      	cmp	r3, #5
 8008ffc:	d838      	bhi.n	8009070 <UART_SetConfig+0x35c>
 8008ffe:	a201      	add	r2, pc, #4	@ (adr r2, 8009004 <UART_SetConfig+0x2f0>)
 8009000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009004:	0800901d 	.word	0x0800901d
 8009008:	08009025 	.word	0x08009025
 800900c:	0800902d 	.word	0x0800902d
 8009010:	08009035 	.word	0x08009035
 8009014:	08009061 	.word	0x08009061
 8009018:	08009069 	.word	0x08009069
 800901c:	2300      	movs	r3, #0
 800901e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009022:	e24e      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8009024:	2304      	movs	r3, #4
 8009026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800902a:	e24a      	b.n	80094c2 <UART_SetConfig+0x7ae>
 800902c:	2308      	movs	r3, #8
 800902e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009032:	e246      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8009034:	2310      	movs	r3, #16
 8009036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800903a:	e242      	b.n	80094c2 <UART_SetConfig+0x7ae>
 800903c:	cfff69f3 	.word	0xcfff69f3
 8009040:	58000c00 	.word	0x58000c00
 8009044:	11fff4ff 	.word	0x11fff4ff
 8009048:	40011000 	.word	0x40011000
 800904c:	58024400 	.word	0x58024400
 8009050:	40004400 	.word	0x40004400
 8009054:	40004800 	.word	0x40004800
 8009058:	40004c00 	.word	0x40004c00
 800905c:	40005000 	.word	0x40005000
 8009060:	2320      	movs	r3, #32
 8009062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009066:	e22c      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8009068:	2340      	movs	r3, #64	@ 0x40
 800906a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800906e:	e228      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8009070:	2380      	movs	r3, #128	@ 0x80
 8009072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009076:	e224      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4ab1      	ldr	r2, [pc, #708]	@ (8009344 <UART_SetConfig+0x630>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d176      	bne.n	8009170 <UART_SetConfig+0x45c>
 8009082:	4bb1      	ldr	r3, [pc, #708]	@ (8009348 <UART_SetConfig+0x634>)
 8009084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009086:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800908a:	2b28      	cmp	r3, #40	@ 0x28
 800908c:	d86c      	bhi.n	8009168 <UART_SetConfig+0x454>
 800908e:	a201      	add	r2, pc, #4	@ (adr r2, 8009094 <UART_SetConfig+0x380>)
 8009090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009094:	08009139 	.word	0x08009139
 8009098:	08009169 	.word	0x08009169
 800909c:	08009169 	.word	0x08009169
 80090a0:	08009169 	.word	0x08009169
 80090a4:	08009169 	.word	0x08009169
 80090a8:	08009169 	.word	0x08009169
 80090ac:	08009169 	.word	0x08009169
 80090b0:	08009169 	.word	0x08009169
 80090b4:	08009141 	.word	0x08009141
 80090b8:	08009169 	.word	0x08009169
 80090bc:	08009169 	.word	0x08009169
 80090c0:	08009169 	.word	0x08009169
 80090c4:	08009169 	.word	0x08009169
 80090c8:	08009169 	.word	0x08009169
 80090cc:	08009169 	.word	0x08009169
 80090d0:	08009169 	.word	0x08009169
 80090d4:	08009149 	.word	0x08009149
 80090d8:	08009169 	.word	0x08009169
 80090dc:	08009169 	.word	0x08009169
 80090e0:	08009169 	.word	0x08009169
 80090e4:	08009169 	.word	0x08009169
 80090e8:	08009169 	.word	0x08009169
 80090ec:	08009169 	.word	0x08009169
 80090f0:	08009169 	.word	0x08009169
 80090f4:	08009151 	.word	0x08009151
 80090f8:	08009169 	.word	0x08009169
 80090fc:	08009169 	.word	0x08009169
 8009100:	08009169 	.word	0x08009169
 8009104:	08009169 	.word	0x08009169
 8009108:	08009169 	.word	0x08009169
 800910c:	08009169 	.word	0x08009169
 8009110:	08009169 	.word	0x08009169
 8009114:	08009159 	.word	0x08009159
 8009118:	08009169 	.word	0x08009169
 800911c:	08009169 	.word	0x08009169
 8009120:	08009169 	.word	0x08009169
 8009124:	08009169 	.word	0x08009169
 8009128:	08009169 	.word	0x08009169
 800912c:	08009169 	.word	0x08009169
 8009130:	08009169 	.word	0x08009169
 8009134:	08009161 	.word	0x08009161
 8009138:	2301      	movs	r3, #1
 800913a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800913e:	e1c0      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8009140:	2304      	movs	r3, #4
 8009142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009146:	e1bc      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8009148:	2308      	movs	r3, #8
 800914a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800914e:	e1b8      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8009150:	2310      	movs	r3, #16
 8009152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009156:	e1b4      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8009158:	2320      	movs	r3, #32
 800915a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800915e:	e1b0      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8009160:	2340      	movs	r3, #64	@ 0x40
 8009162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009166:	e1ac      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8009168:	2380      	movs	r3, #128	@ 0x80
 800916a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800916e:	e1a8      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a75      	ldr	r2, [pc, #468]	@ (800934c <UART_SetConfig+0x638>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d130      	bne.n	80091dc <UART_SetConfig+0x4c8>
 800917a:	4b73      	ldr	r3, [pc, #460]	@ (8009348 <UART_SetConfig+0x634>)
 800917c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800917e:	f003 0307 	and.w	r3, r3, #7
 8009182:	2b05      	cmp	r3, #5
 8009184:	d826      	bhi.n	80091d4 <UART_SetConfig+0x4c0>
 8009186:	a201      	add	r2, pc, #4	@ (adr r2, 800918c <UART_SetConfig+0x478>)
 8009188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800918c:	080091a5 	.word	0x080091a5
 8009190:	080091ad 	.word	0x080091ad
 8009194:	080091b5 	.word	0x080091b5
 8009198:	080091bd 	.word	0x080091bd
 800919c:	080091c5 	.word	0x080091c5
 80091a0:	080091cd 	.word	0x080091cd
 80091a4:	2300      	movs	r3, #0
 80091a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091aa:	e18a      	b.n	80094c2 <UART_SetConfig+0x7ae>
 80091ac:	2304      	movs	r3, #4
 80091ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091b2:	e186      	b.n	80094c2 <UART_SetConfig+0x7ae>
 80091b4:	2308      	movs	r3, #8
 80091b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ba:	e182      	b.n	80094c2 <UART_SetConfig+0x7ae>
 80091bc:	2310      	movs	r3, #16
 80091be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091c2:	e17e      	b.n	80094c2 <UART_SetConfig+0x7ae>
 80091c4:	2320      	movs	r3, #32
 80091c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ca:	e17a      	b.n	80094c2 <UART_SetConfig+0x7ae>
 80091cc:	2340      	movs	r3, #64	@ 0x40
 80091ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091d2:	e176      	b.n	80094c2 <UART_SetConfig+0x7ae>
 80091d4:	2380      	movs	r3, #128	@ 0x80
 80091d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091da:	e172      	b.n	80094c2 <UART_SetConfig+0x7ae>
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a5b      	ldr	r2, [pc, #364]	@ (8009350 <UART_SetConfig+0x63c>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d130      	bne.n	8009248 <UART_SetConfig+0x534>
 80091e6:	4b58      	ldr	r3, [pc, #352]	@ (8009348 <UART_SetConfig+0x634>)
 80091e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091ea:	f003 0307 	and.w	r3, r3, #7
 80091ee:	2b05      	cmp	r3, #5
 80091f0:	d826      	bhi.n	8009240 <UART_SetConfig+0x52c>
 80091f2:	a201      	add	r2, pc, #4	@ (adr r2, 80091f8 <UART_SetConfig+0x4e4>)
 80091f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f8:	08009211 	.word	0x08009211
 80091fc:	08009219 	.word	0x08009219
 8009200:	08009221 	.word	0x08009221
 8009204:	08009229 	.word	0x08009229
 8009208:	08009231 	.word	0x08009231
 800920c:	08009239 	.word	0x08009239
 8009210:	2300      	movs	r3, #0
 8009212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009216:	e154      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8009218:	2304      	movs	r3, #4
 800921a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800921e:	e150      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8009220:	2308      	movs	r3, #8
 8009222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009226:	e14c      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8009228:	2310      	movs	r3, #16
 800922a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800922e:	e148      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8009230:	2320      	movs	r3, #32
 8009232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009236:	e144      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8009238:	2340      	movs	r3, #64	@ 0x40
 800923a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800923e:	e140      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8009240:	2380      	movs	r3, #128	@ 0x80
 8009242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009246:	e13c      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4a41      	ldr	r2, [pc, #260]	@ (8009354 <UART_SetConfig+0x640>)
 800924e:	4293      	cmp	r3, r2
 8009250:	f040 8082 	bne.w	8009358 <UART_SetConfig+0x644>
 8009254:	4b3c      	ldr	r3, [pc, #240]	@ (8009348 <UART_SetConfig+0x634>)
 8009256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009258:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800925c:	2b28      	cmp	r3, #40	@ 0x28
 800925e:	d86d      	bhi.n	800933c <UART_SetConfig+0x628>
 8009260:	a201      	add	r2, pc, #4	@ (adr r2, 8009268 <UART_SetConfig+0x554>)
 8009262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009266:	bf00      	nop
 8009268:	0800930d 	.word	0x0800930d
 800926c:	0800933d 	.word	0x0800933d
 8009270:	0800933d 	.word	0x0800933d
 8009274:	0800933d 	.word	0x0800933d
 8009278:	0800933d 	.word	0x0800933d
 800927c:	0800933d 	.word	0x0800933d
 8009280:	0800933d 	.word	0x0800933d
 8009284:	0800933d 	.word	0x0800933d
 8009288:	08009315 	.word	0x08009315
 800928c:	0800933d 	.word	0x0800933d
 8009290:	0800933d 	.word	0x0800933d
 8009294:	0800933d 	.word	0x0800933d
 8009298:	0800933d 	.word	0x0800933d
 800929c:	0800933d 	.word	0x0800933d
 80092a0:	0800933d 	.word	0x0800933d
 80092a4:	0800933d 	.word	0x0800933d
 80092a8:	0800931d 	.word	0x0800931d
 80092ac:	0800933d 	.word	0x0800933d
 80092b0:	0800933d 	.word	0x0800933d
 80092b4:	0800933d 	.word	0x0800933d
 80092b8:	0800933d 	.word	0x0800933d
 80092bc:	0800933d 	.word	0x0800933d
 80092c0:	0800933d 	.word	0x0800933d
 80092c4:	0800933d 	.word	0x0800933d
 80092c8:	08009325 	.word	0x08009325
 80092cc:	0800933d 	.word	0x0800933d
 80092d0:	0800933d 	.word	0x0800933d
 80092d4:	0800933d 	.word	0x0800933d
 80092d8:	0800933d 	.word	0x0800933d
 80092dc:	0800933d 	.word	0x0800933d
 80092e0:	0800933d 	.word	0x0800933d
 80092e4:	0800933d 	.word	0x0800933d
 80092e8:	0800932d 	.word	0x0800932d
 80092ec:	0800933d 	.word	0x0800933d
 80092f0:	0800933d 	.word	0x0800933d
 80092f4:	0800933d 	.word	0x0800933d
 80092f8:	0800933d 	.word	0x0800933d
 80092fc:	0800933d 	.word	0x0800933d
 8009300:	0800933d 	.word	0x0800933d
 8009304:	0800933d 	.word	0x0800933d
 8009308:	08009335 	.word	0x08009335
 800930c:	2301      	movs	r3, #1
 800930e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009312:	e0d6      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8009314:	2304      	movs	r3, #4
 8009316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800931a:	e0d2      	b.n	80094c2 <UART_SetConfig+0x7ae>
 800931c:	2308      	movs	r3, #8
 800931e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009322:	e0ce      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8009324:	2310      	movs	r3, #16
 8009326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800932a:	e0ca      	b.n	80094c2 <UART_SetConfig+0x7ae>
 800932c:	2320      	movs	r3, #32
 800932e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009332:	e0c6      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8009334:	2340      	movs	r3, #64	@ 0x40
 8009336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800933a:	e0c2      	b.n	80094c2 <UART_SetConfig+0x7ae>
 800933c:	2380      	movs	r3, #128	@ 0x80
 800933e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009342:	e0be      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8009344:	40011400 	.word	0x40011400
 8009348:	58024400 	.word	0x58024400
 800934c:	40007800 	.word	0x40007800
 8009350:	40007c00 	.word	0x40007c00
 8009354:	40011800 	.word	0x40011800
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4aad      	ldr	r2, [pc, #692]	@ (8009614 <UART_SetConfig+0x900>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d176      	bne.n	8009450 <UART_SetConfig+0x73c>
 8009362:	4bad      	ldr	r3, [pc, #692]	@ (8009618 <UART_SetConfig+0x904>)
 8009364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009366:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800936a:	2b28      	cmp	r3, #40	@ 0x28
 800936c:	d86c      	bhi.n	8009448 <UART_SetConfig+0x734>
 800936e:	a201      	add	r2, pc, #4	@ (adr r2, 8009374 <UART_SetConfig+0x660>)
 8009370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009374:	08009419 	.word	0x08009419
 8009378:	08009449 	.word	0x08009449
 800937c:	08009449 	.word	0x08009449
 8009380:	08009449 	.word	0x08009449
 8009384:	08009449 	.word	0x08009449
 8009388:	08009449 	.word	0x08009449
 800938c:	08009449 	.word	0x08009449
 8009390:	08009449 	.word	0x08009449
 8009394:	08009421 	.word	0x08009421
 8009398:	08009449 	.word	0x08009449
 800939c:	08009449 	.word	0x08009449
 80093a0:	08009449 	.word	0x08009449
 80093a4:	08009449 	.word	0x08009449
 80093a8:	08009449 	.word	0x08009449
 80093ac:	08009449 	.word	0x08009449
 80093b0:	08009449 	.word	0x08009449
 80093b4:	08009429 	.word	0x08009429
 80093b8:	08009449 	.word	0x08009449
 80093bc:	08009449 	.word	0x08009449
 80093c0:	08009449 	.word	0x08009449
 80093c4:	08009449 	.word	0x08009449
 80093c8:	08009449 	.word	0x08009449
 80093cc:	08009449 	.word	0x08009449
 80093d0:	08009449 	.word	0x08009449
 80093d4:	08009431 	.word	0x08009431
 80093d8:	08009449 	.word	0x08009449
 80093dc:	08009449 	.word	0x08009449
 80093e0:	08009449 	.word	0x08009449
 80093e4:	08009449 	.word	0x08009449
 80093e8:	08009449 	.word	0x08009449
 80093ec:	08009449 	.word	0x08009449
 80093f0:	08009449 	.word	0x08009449
 80093f4:	08009439 	.word	0x08009439
 80093f8:	08009449 	.word	0x08009449
 80093fc:	08009449 	.word	0x08009449
 8009400:	08009449 	.word	0x08009449
 8009404:	08009449 	.word	0x08009449
 8009408:	08009449 	.word	0x08009449
 800940c:	08009449 	.word	0x08009449
 8009410:	08009449 	.word	0x08009449
 8009414:	08009441 	.word	0x08009441
 8009418:	2301      	movs	r3, #1
 800941a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800941e:	e050      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8009420:	2304      	movs	r3, #4
 8009422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009426:	e04c      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8009428:	2308      	movs	r3, #8
 800942a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800942e:	e048      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8009430:	2310      	movs	r3, #16
 8009432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009436:	e044      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8009438:	2320      	movs	r3, #32
 800943a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800943e:	e040      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8009440:	2340      	movs	r3, #64	@ 0x40
 8009442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009446:	e03c      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8009448:	2380      	movs	r3, #128	@ 0x80
 800944a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800944e:	e038      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a71      	ldr	r2, [pc, #452]	@ (800961c <UART_SetConfig+0x908>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d130      	bne.n	80094bc <UART_SetConfig+0x7a8>
 800945a:	4b6f      	ldr	r3, [pc, #444]	@ (8009618 <UART_SetConfig+0x904>)
 800945c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800945e:	f003 0307 	and.w	r3, r3, #7
 8009462:	2b05      	cmp	r3, #5
 8009464:	d826      	bhi.n	80094b4 <UART_SetConfig+0x7a0>
 8009466:	a201      	add	r2, pc, #4	@ (adr r2, 800946c <UART_SetConfig+0x758>)
 8009468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800946c:	08009485 	.word	0x08009485
 8009470:	0800948d 	.word	0x0800948d
 8009474:	08009495 	.word	0x08009495
 8009478:	0800949d 	.word	0x0800949d
 800947c:	080094a5 	.word	0x080094a5
 8009480:	080094ad 	.word	0x080094ad
 8009484:	2302      	movs	r3, #2
 8009486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800948a:	e01a      	b.n	80094c2 <UART_SetConfig+0x7ae>
 800948c:	2304      	movs	r3, #4
 800948e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009492:	e016      	b.n	80094c2 <UART_SetConfig+0x7ae>
 8009494:	2308      	movs	r3, #8
 8009496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800949a:	e012      	b.n	80094c2 <UART_SetConfig+0x7ae>
 800949c:	2310      	movs	r3, #16
 800949e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094a2:	e00e      	b.n	80094c2 <UART_SetConfig+0x7ae>
 80094a4:	2320      	movs	r3, #32
 80094a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094aa:	e00a      	b.n	80094c2 <UART_SetConfig+0x7ae>
 80094ac:	2340      	movs	r3, #64	@ 0x40
 80094ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094b2:	e006      	b.n	80094c2 <UART_SetConfig+0x7ae>
 80094b4:	2380      	movs	r3, #128	@ 0x80
 80094b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ba:	e002      	b.n	80094c2 <UART_SetConfig+0x7ae>
 80094bc:	2380      	movs	r3, #128	@ 0x80
 80094be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a55      	ldr	r2, [pc, #340]	@ (800961c <UART_SetConfig+0x908>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	f040 80f8 	bne.w	80096be <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80094ce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80094d2:	2b20      	cmp	r3, #32
 80094d4:	dc46      	bgt.n	8009564 <UART_SetConfig+0x850>
 80094d6:	2b02      	cmp	r3, #2
 80094d8:	db75      	blt.n	80095c6 <UART_SetConfig+0x8b2>
 80094da:	3b02      	subs	r3, #2
 80094dc:	2b1e      	cmp	r3, #30
 80094de:	d872      	bhi.n	80095c6 <UART_SetConfig+0x8b2>
 80094e0:	a201      	add	r2, pc, #4	@ (adr r2, 80094e8 <UART_SetConfig+0x7d4>)
 80094e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e6:	bf00      	nop
 80094e8:	0800956b 	.word	0x0800956b
 80094ec:	080095c7 	.word	0x080095c7
 80094f0:	08009573 	.word	0x08009573
 80094f4:	080095c7 	.word	0x080095c7
 80094f8:	080095c7 	.word	0x080095c7
 80094fc:	080095c7 	.word	0x080095c7
 8009500:	08009583 	.word	0x08009583
 8009504:	080095c7 	.word	0x080095c7
 8009508:	080095c7 	.word	0x080095c7
 800950c:	080095c7 	.word	0x080095c7
 8009510:	080095c7 	.word	0x080095c7
 8009514:	080095c7 	.word	0x080095c7
 8009518:	080095c7 	.word	0x080095c7
 800951c:	080095c7 	.word	0x080095c7
 8009520:	08009593 	.word	0x08009593
 8009524:	080095c7 	.word	0x080095c7
 8009528:	080095c7 	.word	0x080095c7
 800952c:	080095c7 	.word	0x080095c7
 8009530:	080095c7 	.word	0x080095c7
 8009534:	080095c7 	.word	0x080095c7
 8009538:	080095c7 	.word	0x080095c7
 800953c:	080095c7 	.word	0x080095c7
 8009540:	080095c7 	.word	0x080095c7
 8009544:	080095c7 	.word	0x080095c7
 8009548:	080095c7 	.word	0x080095c7
 800954c:	080095c7 	.word	0x080095c7
 8009550:	080095c7 	.word	0x080095c7
 8009554:	080095c7 	.word	0x080095c7
 8009558:	080095c7 	.word	0x080095c7
 800955c:	080095c7 	.word	0x080095c7
 8009560:	080095b9 	.word	0x080095b9
 8009564:	2b40      	cmp	r3, #64	@ 0x40
 8009566:	d02a      	beq.n	80095be <UART_SetConfig+0x8aa>
 8009568:	e02d      	b.n	80095c6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800956a:	f7fe f8f5 	bl	8007758 <HAL_RCCEx_GetD3PCLK1Freq>
 800956e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009570:	e02f      	b.n	80095d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009572:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009576:	4618      	mov	r0, r3
 8009578:	f7fe f904 	bl	8007784 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800957c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800957e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009580:	e027      	b.n	80095d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009582:	f107 0318 	add.w	r3, r7, #24
 8009586:	4618      	mov	r0, r3
 8009588:	f7fe fa50 	bl	8007a2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009590:	e01f      	b.n	80095d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009592:	4b21      	ldr	r3, [pc, #132]	@ (8009618 <UART_SetConfig+0x904>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f003 0320 	and.w	r3, r3, #32
 800959a:	2b00      	cmp	r3, #0
 800959c:	d009      	beq.n	80095b2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800959e:	4b1e      	ldr	r3, [pc, #120]	@ (8009618 <UART_SetConfig+0x904>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	08db      	lsrs	r3, r3, #3
 80095a4:	f003 0303 	and.w	r3, r3, #3
 80095a8:	4a1d      	ldr	r2, [pc, #116]	@ (8009620 <UART_SetConfig+0x90c>)
 80095aa:	fa22 f303 	lsr.w	r3, r2, r3
 80095ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80095b0:	e00f      	b.n	80095d2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80095b2:	4b1b      	ldr	r3, [pc, #108]	@ (8009620 <UART_SetConfig+0x90c>)
 80095b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095b6:	e00c      	b.n	80095d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80095b8:	4b1a      	ldr	r3, [pc, #104]	@ (8009624 <UART_SetConfig+0x910>)
 80095ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095bc:	e009      	b.n	80095d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095c4:	e005      	b.n	80095d2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80095c6:	2300      	movs	r3, #0
 80095c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80095ca:	2301      	movs	r3, #1
 80095cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80095d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80095d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	f000 81ee 	beq.w	80099b6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095de:	4a12      	ldr	r2, [pc, #72]	@ (8009628 <UART_SetConfig+0x914>)
 80095e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095e4:	461a      	mov	r2, r3
 80095e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80095ec:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	685a      	ldr	r2, [r3, #4]
 80095f2:	4613      	mov	r3, r2
 80095f4:	005b      	lsls	r3, r3, #1
 80095f6:	4413      	add	r3, r2
 80095f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d305      	bcc.n	800960a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009604:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009606:	429a      	cmp	r2, r3
 8009608:	d910      	bls.n	800962c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800960a:	2301      	movs	r3, #1
 800960c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009610:	e1d1      	b.n	80099b6 <UART_SetConfig+0xca2>
 8009612:	bf00      	nop
 8009614:	40011c00 	.word	0x40011c00
 8009618:	58024400 	.word	0x58024400
 800961c:	58000c00 	.word	0x58000c00
 8009620:	03d09000 	.word	0x03d09000
 8009624:	003d0900 	.word	0x003d0900
 8009628:	0800e2a4 	.word	0x0800e2a4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800962c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800962e:	2200      	movs	r2, #0
 8009630:	60bb      	str	r3, [r7, #8]
 8009632:	60fa      	str	r2, [r7, #12]
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009638:	4ac0      	ldr	r2, [pc, #768]	@ (800993c <UART_SetConfig+0xc28>)
 800963a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800963e:	b29b      	uxth	r3, r3
 8009640:	2200      	movs	r2, #0
 8009642:	603b      	str	r3, [r7, #0]
 8009644:	607a      	str	r2, [r7, #4]
 8009646:	e9d7 2300 	ldrd	r2, r3, [r7]
 800964a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800964e:	f7f6 fe4d 	bl	80002ec <__aeabi_uldivmod>
 8009652:	4602      	mov	r2, r0
 8009654:	460b      	mov	r3, r1
 8009656:	4610      	mov	r0, r2
 8009658:	4619      	mov	r1, r3
 800965a:	f04f 0200 	mov.w	r2, #0
 800965e:	f04f 0300 	mov.w	r3, #0
 8009662:	020b      	lsls	r3, r1, #8
 8009664:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009668:	0202      	lsls	r2, r0, #8
 800966a:	6979      	ldr	r1, [r7, #20]
 800966c:	6849      	ldr	r1, [r1, #4]
 800966e:	0849      	lsrs	r1, r1, #1
 8009670:	2000      	movs	r0, #0
 8009672:	460c      	mov	r4, r1
 8009674:	4605      	mov	r5, r0
 8009676:	eb12 0804 	adds.w	r8, r2, r4
 800967a:	eb43 0905 	adc.w	r9, r3, r5
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	469a      	mov	sl, r3
 8009686:	4693      	mov	fp, r2
 8009688:	4652      	mov	r2, sl
 800968a:	465b      	mov	r3, fp
 800968c:	4640      	mov	r0, r8
 800968e:	4649      	mov	r1, r9
 8009690:	f7f6 fe2c 	bl	80002ec <__aeabi_uldivmod>
 8009694:	4602      	mov	r2, r0
 8009696:	460b      	mov	r3, r1
 8009698:	4613      	mov	r3, r2
 800969a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800969c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800969e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80096a2:	d308      	bcc.n	80096b6 <UART_SetConfig+0x9a2>
 80096a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80096aa:	d204      	bcs.n	80096b6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80096b2:	60da      	str	r2, [r3, #12]
 80096b4:	e17f      	b.n	80099b6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80096b6:	2301      	movs	r3, #1
 80096b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80096bc:	e17b      	b.n	80099b6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	69db      	ldr	r3, [r3, #28]
 80096c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80096c6:	f040 80bd 	bne.w	8009844 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80096ca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80096ce:	2b20      	cmp	r3, #32
 80096d0:	dc48      	bgt.n	8009764 <UART_SetConfig+0xa50>
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	db7b      	blt.n	80097ce <UART_SetConfig+0xaba>
 80096d6:	2b20      	cmp	r3, #32
 80096d8:	d879      	bhi.n	80097ce <UART_SetConfig+0xaba>
 80096da:	a201      	add	r2, pc, #4	@ (adr r2, 80096e0 <UART_SetConfig+0x9cc>)
 80096dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e0:	0800976b 	.word	0x0800976b
 80096e4:	08009773 	.word	0x08009773
 80096e8:	080097cf 	.word	0x080097cf
 80096ec:	080097cf 	.word	0x080097cf
 80096f0:	0800977b 	.word	0x0800977b
 80096f4:	080097cf 	.word	0x080097cf
 80096f8:	080097cf 	.word	0x080097cf
 80096fc:	080097cf 	.word	0x080097cf
 8009700:	0800978b 	.word	0x0800978b
 8009704:	080097cf 	.word	0x080097cf
 8009708:	080097cf 	.word	0x080097cf
 800970c:	080097cf 	.word	0x080097cf
 8009710:	080097cf 	.word	0x080097cf
 8009714:	080097cf 	.word	0x080097cf
 8009718:	080097cf 	.word	0x080097cf
 800971c:	080097cf 	.word	0x080097cf
 8009720:	0800979b 	.word	0x0800979b
 8009724:	080097cf 	.word	0x080097cf
 8009728:	080097cf 	.word	0x080097cf
 800972c:	080097cf 	.word	0x080097cf
 8009730:	080097cf 	.word	0x080097cf
 8009734:	080097cf 	.word	0x080097cf
 8009738:	080097cf 	.word	0x080097cf
 800973c:	080097cf 	.word	0x080097cf
 8009740:	080097cf 	.word	0x080097cf
 8009744:	080097cf 	.word	0x080097cf
 8009748:	080097cf 	.word	0x080097cf
 800974c:	080097cf 	.word	0x080097cf
 8009750:	080097cf 	.word	0x080097cf
 8009754:	080097cf 	.word	0x080097cf
 8009758:	080097cf 	.word	0x080097cf
 800975c:	080097cf 	.word	0x080097cf
 8009760:	080097c1 	.word	0x080097c1
 8009764:	2b40      	cmp	r3, #64	@ 0x40
 8009766:	d02e      	beq.n	80097c6 <UART_SetConfig+0xab2>
 8009768:	e031      	b.n	80097ce <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800976a:	f7fc f933 	bl	80059d4 <HAL_RCC_GetPCLK1Freq>
 800976e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009770:	e033      	b.n	80097da <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009772:	f7fc f945 	bl	8005a00 <HAL_RCC_GetPCLK2Freq>
 8009776:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009778:	e02f      	b.n	80097da <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800977a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800977e:	4618      	mov	r0, r3
 8009780:	f7fe f800 	bl	8007784 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009788:	e027      	b.n	80097da <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800978a:	f107 0318 	add.w	r3, r7, #24
 800978e:	4618      	mov	r0, r3
 8009790:	f7fe f94c 	bl	8007a2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009794:	69fb      	ldr	r3, [r7, #28]
 8009796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009798:	e01f      	b.n	80097da <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800979a:	4b69      	ldr	r3, [pc, #420]	@ (8009940 <UART_SetConfig+0xc2c>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f003 0320 	and.w	r3, r3, #32
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d009      	beq.n	80097ba <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80097a6:	4b66      	ldr	r3, [pc, #408]	@ (8009940 <UART_SetConfig+0xc2c>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	08db      	lsrs	r3, r3, #3
 80097ac:	f003 0303 	and.w	r3, r3, #3
 80097b0:	4a64      	ldr	r2, [pc, #400]	@ (8009944 <UART_SetConfig+0xc30>)
 80097b2:	fa22 f303 	lsr.w	r3, r2, r3
 80097b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80097b8:	e00f      	b.n	80097da <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80097ba:	4b62      	ldr	r3, [pc, #392]	@ (8009944 <UART_SetConfig+0xc30>)
 80097bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097be:	e00c      	b.n	80097da <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80097c0:	4b61      	ldr	r3, [pc, #388]	@ (8009948 <UART_SetConfig+0xc34>)
 80097c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097c4:	e009      	b.n	80097da <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80097ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097cc:	e005      	b.n	80097da <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80097ce:	2300      	movs	r3, #0
 80097d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80097d2:	2301      	movs	r3, #1
 80097d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80097d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80097da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097dc:	2b00      	cmp	r3, #0
 80097de:	f000 80ea 	beq.w	80099b6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097e6:	4a55      	ldr	r2, [pc, #340]	@ (800993c <UART_SetConfig+0xc28>)
 80097e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097ec:	461a      	mov	r2, r3
 80097ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80097f4:	005a      	lsls	r2, r3, #1
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	085b      	lsrs	r3, r3, #1
 80097fc:	441a      	add	r2, r3
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	fbb2 f3f3 	udiv	r3, r2, r3
 8009806:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800980a:	2b0f      	cmp	r3, #15
 800980c:	d916      	bls.n	800983c <UART_SetConfig+0xb28>
 800980e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009810:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009814:	d212      	bcs.n	800983c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009818:	b29b      	uxth	r3, r3
 800981a:	f023 030f 	bic.w	r3, r3, #15
 800981e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009822:	085b      	lsrs	r3, r3, #1
 8009824:	b29b      	uxth	r3, r3
 8009826:	f003 0307 	and.w	r3, r3, #7
 800982a:	b29a      	uxth	r2, r3
 800982c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800982e:	4313      	orrs	r3, r2
 8009830:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009838:	60da      	str	r2, [r3, #12]
 800983a:	e0bc      	b.n	80099b6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800983c:	2301      	movs	r3, #1
 800983e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009842:	e0b8      	b.n	80099b6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009844:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009848:	2b20      	cmp	r3, #32
 800984a:	dc4b      	bgt.n	80098e4 <UART_SetConfig+0xbd0>
 800984c:	2b00      	cmp	r3, #0
 800984e:	f2c0 8087 	blt.w	8009960 <UART_SetConfig+0xc4c>
 8009852:	2b20      	cmp	r3, #32
 8009854:	f200 8084 	bhi.w	8009960 <UART_SetConfig+0xc4c>
 8009858:	a201      	add	r2, pc, #4	@ (adr r2, 8009860 <UART_SetConfig+0xb4c>)
 800985a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800985e:	bf00      	nop
 8009860:	080098eb 	.word	0x080098eb
 8009864:	080098f3 	.word	0x080098f3
 8009868:	08009961 	.word	0x08009961
 800986c:	08009961 	.word	0x08009961
 8009870:	080098fb 	.word	0x080098fb
 8009874:	08009961 	.word	0x08009961
 8009878:	08009961 	.word	0x08009961
 800987c:	08009961 	.word	0x08009961
 8009880:	0800990b 	.word	0x0800990b
 8009884:	08009961 	.word	0x08009961
 8009888:	08009961 	.word	0x08009961
 800988c:	08009961 	.word	0x08009961
 8009890:	08009961 	.word	0x08009961
 8009894:	08009961 	.word	0x08009961
 8009898:	08009961 	.word	0x08009961
 800989c:	08009961 	.word	0x08009961
 80098a0:	0800991b 	.word	0x0800991b
 80098a4:	08009961 	.word	0x08009961
 80098a8:	08009961 	.word	0x08009961
 80098ac:	08009961 	.word	0x08009961
 80098b0:	08009961 	.word	0x08009961
 80098b4:	08009961 	.word	0x08009961
 80098b8:	08009961 	.word	0x08009961
 80098bc:	08009961 	.word	0x08009961
 80098c0:	08009961 	.word	0x08009961
 80098c4:	08009961 	.word	0x08009961
 80098c8:	08009961 	.word	0x08009961
 80098cc:	08009961 	.word	0x08009961
 80098d0:	08009961 	.word	0x08009961
 80098d4:	08009961 	.word	0x08009961
 80098d8:	08009961 	.word	0x08009961
 80098dc:	08009961 	.word	0x08009961
 80098e0:	08009953 	.word	0x08009953
 80098e4:	2b40      	cmp	r3, #64	@ 0x40
 80098e6:	d037      	beq.n	8009958 <UART_SetConfig+0xc44>
 80098e8:	e03a      	b.n	8009960 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098ea:	f7fc f873 	bl	80059d4 <HAL_RCC_GetPCLK1Freq>
 80098ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80098f0:	e03c      	b.n	800996c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80098f2:	f7fc f885 	bl	8005a00 <HAL_RCC_GetPCLK2Freq>
 80098f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80098f8:	e038      	b.n	800996c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80098fe:	4618      	mov	r0, r3
 8009900:	f7fd ff40 	bl	8007784 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009908:	e030      	b.n	800996c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800990a:	f107 0318 	add.w	r3, r7, #24
 800990e:	4618      	mov	r0, r3
 8009910:	f7fe f88c 	bl	8007a2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009914:	69fb      	ldr	r3, [r7, #28]
 8009916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009918:	e028      	b.n	800996c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800991a:	4b09      	ldr	r3, [pc, #36]	@ (8009940 <UART_SetConfig+0xc2c>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f003 0320 	and.w	r3, r3, #32
 8009922:	2b00      	cmp	r3, #0
 8009924:	d012      	beq.n	800994c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009926:	4b06      	ldr	r3, [pc, #24]	@ (8009940 <UART_SetConfig+0xc2c>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	08db      	lsrs	r3, r3, #3
 800992c:	f003 0303 	and.w	r3, r3, #3
 8009930:	4a04      	ldr	r2, [pc, #16]	@ (8009944 <UART_SetConfig+0xc30>)
 8009932:	fa22 f303 	lsr.w	r3, r2, r3
 8009936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009938:	e018      	b.n	800996c <UART_SetConfig+0xc58>
 800993a:	bf00      	nop
 800993c:	0800e2a4 	.word	0x0800e2a4
 8009940:	58024400 	.word	0x58024400
 8009944:	03d09000 	.word	0x03d09000
 8009948:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800994c:	4b24      	ldr	r3, [pc, #144]	@ (80099e0 <UART_SetConfig+0xccc>)
 800994e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009950:	e00c      	b.n	800996c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009952:	4b24      	ldr	r3, [pc, #144]	@ (80099e4 <UART_SetConfig+0xcd0>)
 8009954:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009956:	e009      	b.n	800996c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009958:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800995c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800995e:	e005      	b.n	800996c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009960:	2300      	movs	r3, #0
 8009962:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009964:	2301      	movs	r3, #1
 8009966:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800996a:	bf00      	nop
    }

    if (pclk != 0U)
 800996c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800996e:	2b00      	cmp	r3, #0
 8009970:	d021      	beq.n	80099b6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009976:	4a1c      	ldr	r2, [pc, #112]	@ (80099e8 <UART_SetConfig+0xcd4>)
 8009978:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800997c:	461a      	mov	r2, r3
 800997e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009980:	fbb3 f2f2 	udiv	r2, r3, r2
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	085b      	lsrs	r3, r3, #1
 800998a:	441a      	add	r2, r3
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	fbb2 f3f3 	udiv	r3, r2, r3
 8009994:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009998:	2b0f      	cmp	r3, #15
 800999a:	d909      	bls.n	80099b0 <UART_SetConfig+0xc9c>
 800999c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800999e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099a2:	d205      	bcs.n	80099b0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80099a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a6:	b29a      	uxth	r2, r3
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	60da      	str	r2, [r3, #12]
 80099ae:	e002      	b.n	80099b6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80099b0:	2301      	movs	r3, #1
 80099b2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	2201      	movs	r2, #1
 80099ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	2201      	movs	r2, #1
 80099c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	2200      	movs	r2, #0
 80099ca:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	2200      	movs	r2, #0
 80099d0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80099d2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3748      	adds	r7, #72	@ 0x48
 80099da:	46bd      	mov	sp, r7
 80099dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80099e0:	03d09000 	.word	0x03d09000
 80099e4:	003d0900 	.word	0x003d0900
 80099e8:	0800e2a4 	.word	0x0800e2a4

080099ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b083      	sub	sp, #12
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099f8:	f003 0308 	and.w	r3, r3, #8
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d00a      	beq.n	8009a16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	430a      	orrs	r2, r1
 8009a14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a1a:	f003 0301 	and.w	r3, r3, #1
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d00a      	beq.n	8009a38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	430a      	orrs	r2, r1
 8009a36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a3c:	f003 0302 	and.w	r3, r3, #2
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d00a      	beq.n	8009a5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	430a      	orrs	r2, r1
 8009a58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a5e:	f003 0304 	and.w	r3, r3, #4
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d00a      	beq.n	8009a7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	430a      	orrs	r2, r1
 8009a7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a80:	f003 0310 	and.w	r3, r3, #16
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d00a      	beq.n	8009a9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	430a      	orrs	r2, r1
 8009a9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aa2:	f003 0320 	and.w	r3, r3, #32
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d00a      	beq.n	8009ac0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	430a      	orrs	r2, r1
 8009abe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d01a      	beq.n	8009b02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	430a      	orrs	r2, r1
 8009ae0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ae6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009aea:	d10a      	bne.n	8009b02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	430a      	orrs	r2, r1
 8009b00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d00a      	beq.n	8009b24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	430a      	orrs	r2, r1
 8009b22:	605a      	str	r2, [r3, #4]
  }
}
 8009b24:	bf00      	nop
 8009b26:	370c      	adds	r7, #12
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b098      	sub	sp, #96	@ 0x60
 8009b34:	af02      	add	r7, sp, #8
 8009b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009b40:	f7f7 fbb8 	bl	80012b4 <HAL_GetTick>
 8009b44:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f003 0308 	and.w	r3, r3, #8
 8009b50:	2b08      	cmp	r3, #8
 8009b52:	d12f      	bne.n	8009bb4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009b58:	9300      	str	r3, [sp, #0]
 8009b5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 f88e 	bl	8009c84 <UART_WaitOnFlagUntilTimeout>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d022      	beq.n	8009bb4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b76:	e853 3f00 	ldrex	r3, [r3]
 8009b7a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b82:	653b      	str	r3, [r7, #80]	@ 0x50
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	461a      	mov	r2, r3
 8009b8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b8e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009b92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b94:	e841 2300 	strex	r3, r2, [r1]
 8009b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009b9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d1e6      	bne.n	8009b6e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2220      	movs	r2, #32
 8009ba4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2200      	movs	r2, #0
 8009bac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009bb0:	2303      	movs	r3, #3
 8009bb2:	e063      	b.n	8009c7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f003 0304 	and.w	r3, r3, #4
 8009bbe:	2b04      	cmp	r3, #4
 8009bc0:	d149      	bne.n	8009c56 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009bc2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009bc6:	9300      	str	r3, [sp, #0]
 8009bc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009bca:	2200      	movs	r2, #0
 8009bcc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 f857 	bl	8009c84 <UART_WaitOnFlagUntilTimeout>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d03c      	beq.n	8009c56 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009be4:	e853 3f00 	ldrex	r3, [r3]
 8009be8:	623b      	str	r3, [r7, #32]
   return(result);
 8009bea:	6a3b      	ldr	r3, [r7, #32]
 8009bec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009bf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009bfa:	633b      	str	r3, [r7, #48]	@ 0x30
 8009bfc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c02:	e841 2300 	strex	r3, r2, [r1]
 8009c06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d1e6      	bne.n	8009bdc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	3308      	adds	r3, #8
 8009c14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	e853 3f00 	ldrex	r3, [r3]
 8009c1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	f023 0301 	bic.w	r3, r3, #1
 8009c24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	3308      	adds	r3, #8
 8009c2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c2e:	61fa      	str	r2, [r7, #28]
 8009c30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c32:	69b9      	ldr	r1, [r7, #24]
 8009c34:	69fa      	ldr	r2, [r7, #28]
 8009c36:	e841 2300 	strex	r3, r2, [r1]
 8009c3a:	617b      	str	r3, [r7, #20]
   return(result);
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d1e5      	bne.n	8009c0e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2220      	movs	r2, #32
 8009c46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c52:	2303      	movs	r3, #3
 8009c54:	e012      	b.n	8009c7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2220      	movs	r2, #32
 8009c5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2220      	movs	r2, #32
 8009c62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2200      	movs	r2, #0
 8009c76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c7a:	2300      	movs	r3, #0
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3758      	adds	r7, #88	@ 0x58
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b084      	sub	sp, #16
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	60f8      	str	r0, [r7, #12]
 8009c8c:	60b9      	str	r1, [r7, #8]
 8009c8e:	603b      	str	r3, [r7, #0]
 8009c90:	4613      	mov	r3, r2
 8009c92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c94:	e04f      	b.n	8009d36 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c96:	69bb      	ldr	r3, [r7, #24]
 8009c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c9c:	d04b      	beq.n	8009d36 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c9e:	f7f7 fb09 	bl	80012b4 <HAL_GetTick>
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	1ad3      	subs	r3, r2, r3
 8009ca8:	69ba      	ldr	r2, [r7, #24]
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d302      	bcc.n	8009cb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8009cae:	69bb      	ldr	r3, [r7, #24]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d101      	bne.n	8009cb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009cb4:	2303      	movs	r3, #3
 8009cb6:	e04e      	b.n	8009d56 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f003 0304 	and.w	r3, r3, #4
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d037      	beq.n	8009d36 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	2b80      	cmp	r3, #128	@ 0x80
 8009cca:	d034      	beq.n	8009d36 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	2b40      	cmp	r3, #64	@ 0x40
 8009cd0:	d031      	beq.n	8009d36 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	69db      	ldr	r3, [r3, #28]
 8009cd8:	f003 0308 	and.w	r3, r3, #8
 8009cdc:	2b08      	cmp	r3, #8
 8009cde:	d110      	bne.n	8009d02 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2208      	movs	r2, #8
 8009ce6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009ce8:	68f8      	ldr	r0, [r7, #12]
 8009cea:	f000 f839 	bl	8009d60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2208      	movs	r2, #8
 8009cf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	e029      	b.n	8009d56 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	69db      	ldr	r3, [r3, #28]
 8009d08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009d0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d10:	d111      	bne.n	8009d36 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009d1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009d1c:	68f8      	ldr	r0, [r7, #12]
 8009d1e:	f000 f81f 	bl	8009d60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2220      	movs	r2, #32
 8009d26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009d32:	2303      	movs	r3, #3
 8009d34:	e00f      	b.n	8009d56 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	69da      	ldr	r2, [r3, #28]
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	4013      	ands	r3, r2
 8009d40:	68ba      	ldr	r2, [r7, #8]
 8009d42:	429a      	cmp	r2, r3
 8009d44:	bf0c      	ite	eq
 8009d46:	2301      	moveq	r3, #1
 8009d48:	2300      	movne	r3, #0
 8009d4a:	b2db      	uxtb	r3, r3
 8009d4c:	461a      	mov	r2, r3
 8009d4e:	79fb      	ldrb	r3, [r7, #7]
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d0a0      	beq.n	8009c96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d54:	2300      	movs	r3, #0
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3710      	adds	r7, #16
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
	...

08009d60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b095      	sub	sp, #84	@ 0x54
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d70:	e853 3f00 	ldrex	r3, [r3]
 8009d74:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	461a      	mov	r2, r3
 8009d84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d86:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d88:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009d8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009d8e:	e841 2300 	strex	r3, r2, [r1]
 8009d92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d1e6      	bne.n	8009d68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	3308      	adds	r3, #8
 8009da0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da2:	6a3b      	ldr	r3, [r7, #32]
 8009da4:	e853 3f00 	ldrex	r3, [r3]
 8009da8:	61fb      	str	r3, [r7, #28]
   return(result);
 8009daa:	69fa      	ldr	r2, [r7, #28]
 8009dac:	4b1e      	ldr	r3, [pc, #120]	@ (8009e28 <UART_EndRxTransfer+0xc8>)
 8009dae:	4013      	ands	r3, r2
 8009db0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	3308      	adds	r3, #8
 8009db8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009dba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dbe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009dc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009dc2:	e841 2300 	strex	r3, r2, [r1]
 8009dc6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d1e5      	bne.n	8009d9a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d118      	bne.n	8009e08 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	e853 3f00 	ldrex	r3, [r3]
 8009de2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	f023 0310 	bic.w	r3, r3, #16
 8009dea:	647b      	str	r3, [r7, #68]	@ 0x44
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	461a      	mov	r2, r3
 8009df2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009df4:	61bb      	str	r3, [r7, #24]
 8009df6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009df8:	6979      	ldr	r1, [r7, #20]
 8009dfa:	69ba      	ldr	r2, [r7, #24]
 8009dfc:	e841 2300 	strex	r3, r2, [r1]
 8009e00:	613b      	str	r3, [r7, #16]
   return(result);
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d1e6      	bne.n	8009dd6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2220      	movs	r2, #32
 8009e0c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2200      	movs	r2, #0
 8009e14:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009e1c:	bf00      	nop
 8009e1e:	3754      	adds	r7, #84	@ 0x54
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr
 8009e28:	effffffe 	.word	0xeffffffe

08009e2c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2200      	movs	r2, #0
 8009e46:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009e4a:	68f8      	ldr	r0, [r7, #12]
 8009e4c:	f7fe ff4c 	bl	8008ce8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e50:	bf00      	nop
 8009e52:	3710      	adds	r7, #16
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}

08009e58 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b088      	sub	sp, #32
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	e853 3f00 	ldrex	r3, [r3]
 8009e6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e74:	61fb      	str	r3, [r7, #28]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	69fb      	ldr	r3, [r7, #28]
 8009e7e:	61bb      	str	r3, [r7, #24]
 8009e80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e82:	6979      	ldr	r1, [r7, #20]
 8009e84:	69ba      	ldr	r2, [r7, #24]
 8009e86:	e841 2300 	strex	r3, r2, [r1]
 8009e8a:	613b      	str	r3, [r7, #16]
   return(result);
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d1e6      	bne.n	8009e60 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2220      	movs	r2, #32
 8009e96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f7fe ff17 	bl	8008cd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ea6:	bf00      	nop
 8009ea8:	3720      	adds	r7, #32
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}

08009eae <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009eae:	b480      	push	{r7}
 8009eb0:	b083      	sub	sp, #12
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009eb6:	bf00      	nop
 8009eb8:	370c      	adds	r7, #12
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr

08009ec2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009ec2:	b480      	push	{r7}
 8009ec4:	b083      	sub	sp, #12
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009eca:	bf00      	nop
 8009ecc:	370c      	adds	r7, #12
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr

08009ed6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009ed6:	b480      	push	{r7}
 8009ed8:	b083      	sub	sp, #12
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009ede:	bf00      	nop
 8009ee0:	370c      	adds	r7, #12
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr

08009eea <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8009eea:	b580      	push	{r7, lr}
 8009eec:	b084      	sub	sp, #16
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d101      	bne.n	8009f00 <HAL_UARTEx_EnableFifoMode+0x16>
 8009efc:	2302      	movs	r3, #2
 8009efe:	e02b      	b.n	8009f58 <HAL_UARTEx_EnableFifoMode+0x6e>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2201      	movs	r2, #1
 8009f04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2224      	movs	r2, #36	@ 0x24
 8009f0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f022 0201 	bic.w	r2, r2, #1
 8009f26:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009f2e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8009f36:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	68fa      	ldr	r2, [r7, #12]
 8009f3e:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f000 f8c3 	bl	800a0cc <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2220      	movs	r2, #32
 8009f4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2200      	movs	r2, #0
 8009f52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f56:	2300      	movs	r3, #0
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3710      	adds	r7, #16
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b085      	sub	sp, #20
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d101      	bne.n	8009f76 <HAL_UARTEx_DisableFifoMode+0x16>
 8009f72:	2302      	movs	r3, #2
 8009f74:	e027      	b.n	8009fc6 <HAL_UARTEx_DisableFifoMode+0x66>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2201      	movs	r2, #1
 8009f7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2224      	movs	r2, #36	@ 0x24
 8009f82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f022 0201 	bic.w	r2, r2, #1
 8009f9c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009fa4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	68fa      	ldr	r2, [r7, #12]
 8009fb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2220      	movs	r2, #32
 8009fb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009fc4:	2300      	movs	r3, #0
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3714      	adds	r7, #20
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr

08009fd2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009fd2:	b580      	push	{r7, lr}
 8009fd4:	b084      	sub	sp, #16
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
 8009fda:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d101      	bne.n	8009fea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009fe6:	2302      	movs	r3, #2
 8009fe8:	e02d      	b.n	800a046 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2201      	movs	r2, #1
 8009fee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2224      	movs	r2, #36	@ 0x24
 8009ff6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	681a      	ldr	r2, [r3, #0]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f022 0201 	bic.w	r2, r2, #1
 800a010:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	689b      	ldr	r3, [r3, #8]
 800a018:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	683a      	ldr	r2, [r7, #0]
 800a022:	430a      	orrs	r2, r1
 800a024:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 f850 	bl	800a0cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	68fa      	ldr	r2, [r7, #12]
 800a032:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2220      	movs	r2, #32
 800a038:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a044:	2300      	movs	r3, #0
}
 800a046:	4618      	mov	r0, r3
 800a048:	3710      	adds	r7, #16
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}

0800a04e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a04e:	b580      	push	{r7, lr}
 800a050:	b084      	sub	sp, #16
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
 800a056:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d101      	bne.n	800a066 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a062:	2302      	movs	r3, #2
 800a064:	e02d      	b.n	800a0c2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2201      	movs	r2, #1
 800a06a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2224      	movs	r2, #36	@ 0x24
 800a072:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f022 0201 	bic.w	r2, r2, #1
 800a08c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	683a      	ldr	r2, [r7, #0]
 800a09e:	430a      	orrs	r2, r1
 800a0a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 f812 	bl	800a0cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	68fa      	ldr	r2, [r7, #12]
 800a0ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2220      	movs	r2, #32
 800a0b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a0c0:	2300      	movs	r3, #0
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3710      	adds	r7, #16
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
	...

0800a0cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b085      	sub	sp, #20
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d108      	bne.n	800a0ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2201      	movs	r2, #1
 800a0e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a0ec:	e031      	b.n	800a152 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a0ee:	2310      	movs	r3, #16
 800a0f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a0f2:	2310      	movs	r3, #16
 800a0f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	689b      	ldr	r3, [r3, #8]
 800a0fc:	0e5b      	lsrs	r3, r3, #25
 800a0fe:	b2db      	uxtb	r3, r3
 800a100:	f003 0307 	and.w	r3, r3, #7
 800a104:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	0f5b      	lsrs	r3, r3, #29
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	f003 0307 	and.w	r3, r3, #7
 800a114:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a116:	7bbb      	ldrb	r3, [r7, #14]
 800a118:	7b3a      	ldrb	r2, [r7, #12]
 800a11a:	4911      	ldr	r1, [pc, #68]	@ (800a160 <UARTEx_SetNbDataToProcess+0x94>)
 800a11c:	5c8a      	ldrb	r2, [r1, r2]
 800a11e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a122:	7b3a      	ldrb	r2, [r7, #12]
 800a124:	490f      	ldr	r1, [pc, #60]	@ (800a164 <UARTEx_SetNbDataToProcess+0x98>)
 800a126:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a128:	fb93 f3f2 	sdiv	r3, r3, r2
 800a12c:	b29a      	uxth	r2, r3
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a134:	7bfb      	ldrb	r3, [r7, #15]
 800a136:	7b7a      	ldrb	r2, [r7, #13]
 800a138:	4909      	ldr	r1, [pc, #36]	@ (800a160 <UARTEx_SetNbDataToProcess+0x94>)
 800a13a:	5c8a      	ldrb	r2, [r1, r2]
 800a13c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a140:	7b7a      	ldrb	r2, [r7, #13]
 800a142:	4908      	ldr	r1, [pc, #32]	@ (800a164 <UARTEx_SetNbDataToProcess+0x98>)
 800a144:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a146:	fb93 f3f2 	sdiv	r3, r3, r2
 800a14a:	b29a      	uxth	r2, r3
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a152:	bf00      	nop
 800a154:	3714      	adds	r7, #20
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr
 800a15e:	bf00      	nop
 800a160:	0800e2bc 	.word	0x0800e2bc
 800a164:	0800e2c4 	.word	0x0800e2c4

0800a168 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a168:	b084      	sub	sp, #16
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b084      	sub	sp, #16
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
 800a172:	f107 001c 	add.w	r0, r7, #28
 800a176:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a17a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a17e:	2b01      	cmp	r3, #1
 800a180:	d121      	bne.n	800a1c6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a186:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	68da      	ldr	r2, [r3, #12]
 800a192:	4b2c      	ldr	r3, [pc, #176]	@ (800a244 <USB_CoreInit+0xdc>)
 800a194:	4013      	ands	r3, r2
 800a196:	687a      	ldr	r2, [r7, #4]
 800a198:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	68db      	ldr	r3, [r3, #12]
 800a19e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a1a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	d105      	bne.n	800a1ba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	68db      	ldr	r3, [r3, #12]
 800a1b2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f001 faf6 	bl	800b7ac <USB_CoreReset>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	73fb      	strb	r3, [r7, #15]
 800a1c4:	e01b      	b.n	800a1fe <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	68db      	ldr	r3, [r3, #12]
 800a1ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f001 faea 	bl	800b7ac <USB_CoreReset>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a1dc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d106      	bne.n	800a1f2 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1e8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	639a      	str	r2, [r3, #56]	@ 0x38
 800a1f0:	e005      	b.n	800a1fe <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1f6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a1fe:	7fbb      	ldrb	r3, [r7, #30]
 800a200:	2b01      	cmp	r3, #1
 800a202:	d116      	bne.n	800a232 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a208:	b29a      	uxth	r2, r3
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a212:	4b0d      	ldr	r3, [pc, #52]	@ (800a248 <USB_CoreInit+0xe0>)
 800a214:	4313      	orrs	r3, r2
 800a216:	687a      	ldr	r2, [r7, #4]
 800a218:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	689b      	ldr	r3, [r3, #8]
 800a21e:	f043 0206 	orr.w	r2, r3, #6
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	689b      	ldr	r3, [r3, #8]
 800a22a:	f043 0220 	orr.w	r2, r3, #32
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a232:	7bfb      	ldrb	r3, [r7, #15]
}
 800a234:	4618      	mov	r0, r3
 800a236:	3710      	adds	r7, #16
 800a238:	46bd      	mov	sp, r7
 800a23a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a23e:	b004      	add	sp, #16
 800a240:	4770      	bx	lr
 800a242:	bf00      	nop
 800a244:	ffbdffbf 	.word	0xffbdffbf
 800a248:	03ee0000 	.word	0x03ee0000

0800a24c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b087      	sub	sp, #28
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	4613      	mov	r3, r2
 800a258:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a25a:	79fb      	ldrb	r3, [r7, #7]
 800a25c:	2b02      	cmp	r3, #2
 800a25e:	d165      	bne.n	800a32c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	4a41      	ldr	r2, [pc, #260]	@ (800a368 <USB_SetTurnaroundTime+0x11c>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d906      	bls.n	800a276 <USB_SetTurnaroundTime+0x2a>
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	4a40      	ldr	r2, [pc, #256]	@ (800a36c <USB_SetTurnaroundTime+0x120>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d202      	bcs.n	800a276 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a270:	230f      	movs	r3, #15
 800a272:	617b      	str	r3, [r7, #20]
 800a274:	e062      	b.n	800a33c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	4a3c      	ldr	r2, [pc, #240]	@ (800a36c <USB_SetTurnaroundTime+0x120>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d306      	bcc.n	800a28c <USB_SetTurnaroundTime+0x40>
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	4a3b      	ldr	r2, [pc, #236]	@ (800a370 <USB_SetTurnaroundTime+0x124>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d202      	bcs.n	800a28c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a286:	230e      	movs	r3, #14
 800a288:	617b      	str	r3, [r7, #20]
 800a28a:	e057      	b.n	800a33c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	4a38      	ldr	r2, [pc, #224]	@ (800a370 <USB_SetTurnaroundTime+0x124>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d306      	bcc.n	800a2a2 <USB_SetTurnaroundTime+0x56>
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	4a37      	ldr	r2, [pc, #220]	@ (800a374 <USB_SetTurnaroundTime+0x128>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d202      	bcs.n	800a2a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a29c:	230d      	movs	r3, #13
 800a29e:	617b      	str	r3, [r7, #20]
 800a2a0:	e04c      	b.n	800a33c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	4a33      	ldr	r2, [pc, #204]	@ (800a374 <USB_SetTurnaroundTime+0x128>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d306      	bcc.n	800a2b8 <USB_SetTurnaroundTime+0x6c>
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	4a32      	ldr	r2, [pc, #200]	@ (800a378 <USB_SetTurnaroundTime+0x12c>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d802      	bhi.n	800a2b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a2b2:	230c      	movs	r3, #12
 800a2b4:	617b      	str	r3, [r7, #20]
 800a2b6:	e041      	b.n	800a33c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	4a2f      	ldr	r2, [pc, #188]	@ (800a378 <USB_SetTurnaroundTime+0x12c>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d906      	bls.n	800a2ce <USB_SetTurnaroundTime+0x82>
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	4a2e      	ldr	r2, [pc, #184]	@ (800a37c <USB_SetTurnaroundTime+0x130>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d802      	bhi.n	800a2ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a2c8:	230b      	movs	r3, #11
 800a2ca:	617b      	str	r3, [r7, #20]
 800a2cc:	e036      	b.n	800a33c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	4a2a      	ldr	r2, [pc, #168]	@ (800a37c <USB_SetTurnaroundTime+0x130>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d906      	bls.n	800a2e4 <USB_SetTurnaroundTime+0x98>
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	4a29      	ldr	r2, [pc, #164]	@ (800a380 <USB_SetTurnaroundTime+0x134>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d802      	bhi.n	800a2e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a2de:	230a      	movs	r3, #10
 800a2e0:	617b      	str	r3, [r7, #20]
 800a2e2:	e02b      	b.n	800a33c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	4a26      	ldr	r2, [pc, #152]	@ (800a380 <USB_SetTurnaroundTime+0x134>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d906      	bls.n	800a2fa <USB_SetTurnaroundTime+0xae>
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	4a25      	ldr	r2, [pc, #148]	@ (800a384 <USB_SetTurnaroundTime+0x138>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d202      	bcs.n	800a2fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a2f4:	2309      	movs	r3, #9
 800a2f6:	617b      	str	r3, [r7, #20]
 800a2f8:	e020      	b.n	800a33c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	4a21      	ldr	r2, [pc, #132]	@ (800a384 <USB_SetTurnaroundTime+0x138>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d306      	bcc.n	800a310 <USB_SetTurnaroundTime+0xc4>
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	4a20      	ldr	r2, [pc, #128]	@ (800a388 <USB_SetTurnaroundTime+0x13c>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d802      	bhi.n	800a310 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a30a:	2308      	movs	r3, #8
 800a30c:	617b      	str	r3, [r7, #20]
 800a30e:	e015      	b.n	800a33c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	4a1d      	ldr	r2, [pc, #116]	@ (800a388 <USB_SetTurnaroundTime+0x13c>)
 800a314:	4293      	cmp	r3, r2
 800a316:	d906      	bls.n	800a326 <USB_SetTurnaroundTime+0xda>
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	4a1c      	ldr	r2, [pc, #112]	@ (800a38c <USB_SetTurnaroundTime+0x140>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d202      	bcs.n	800a326 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a320:	2307      	movs	r3, #7
 800a322:	617b      	str	r3, [r7, #20]
 800a324:	e00a      	b.n	800a33c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a326:	2306      	movs	r3, #6
 800a328:	617b      	str	r3, [r7, #20]
 800a32a:	e007      	b.n	800a33c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a32c:	79fb      	ldrb	r3, [r7, #7]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d102      	bne.n	800a338 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a332:	2309      	movs	r3, #9
 800a334:	617b      	str	r3, [r7, #20]
 800a336:	e001      	b.n	800a33c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a338:	2309      	movs	r3, #9
 800a33a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	68db      	ldr	r3, [r3, #12]
 800a340:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	68da      	ldr	r2, [r3, #12]
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	029b      	lsls	r3, r3, #10
 800a350:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a354:	431a      	orrs	r2, r3
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a35a:	2300      	movs	r3, #0
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	371c      	adds	r7, #28
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr
 800a368:	00d8acbf 	.word	0x00d8acbf
 800a36c:	00e4e1c0 	.word	0x00e4e1c0
 800a370:	00f42400 	.word	0x00f42400
 800a374:	01067380 	.word	0x01067380
 800a378:	011a499f 	.word	0x011a499f
 800a37c:	01312cff 	.word	0x01312cff
 800a380:	014ca43f 	.word	0x014ca43f
 800a384:	016e3600 	.word	0x016e3600
 800a388:	01a6ab1f 	.word	0x01a6ab1f
 800a38c:	01e84800 	.word	0x01e84800

0800a390 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a390:	b480      	push	{r7}
 800a392:	b083      	sub	sp, #12
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	689b      	ldr	r3, [r3, #8]
 800a39c:	f043 0201 	orr.w	r2, r3, #1
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a3a4:	2300      	movs	r3, #0
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	370c      	adds	r7, #12
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b0:	4770      	bx	lr

0800a3b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a3b2:	b480      	push	{r7}
 800a3b4:	b083      	sub	sp, #12
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	689b      	ldr	r3, [r3, #8]
 800a3be:	f023 0201 	bic.w	r2, r3, #1
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a3c6:	2300      	movs	r3, #0
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	370c      	adds	r7, #12
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b084      	sub	sp, #16
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	460b      	mov	r3, r1
 800a3de:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	68db      	ldr	r3, [r3, #12]
 800a3e8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a3f0:	78fb      	ldrb	r3, [r7, #3]
 800a3f2:	2b01      	cmp	r3, #1
 800a3f4:	d115      	bne.n	800a422 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	68db      	ldr	r3, [r3, #12]
 800a3fa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a402:	200a      	movs	r0, #10
 800a404:	f7f6 ff62 	bl	80012cc <HAL_Delay>
      ms += 10U;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	330a      	adds	r3, #10
 800a40c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f001 f93b 	bl	800b68a <USB_GetMode>
 800a414:	4603      	mov	r3, r0
 800a416:	2b01      	cmp	r3, #1
 800a418:	d01e      	beq.n	800a458 <USB_SetCurrentMode+0x84>
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2bc7      	cmp	r3, #199	@ 0xc7
 800a41e:	d9f0      	bls.n	800a402 <USB_SetCurrentMode+0x2e>
 800a420:	e01a      	b.n	800a458 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a422:	78fb      	ldrb	r3, [r7, #3]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d115      	bne.n	800a454 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	68db      	ldr	r3, [r3, #12]
 800a42c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a434:	200a      	movs	r0, #10
 800a436:	f7f6 ff49 	bl	80012cc <HAL_Delay>
      ms += 10U;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	330a      	adds	r3, #10
 800a43e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f001 f922 	bl	800b68a <USB_GetMode>
 800a446:	4603      	mov	r3, r0
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d005      	beq.n	800a458 <USB_SetCurrentMode+0x84>
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2bc7      	cmp	r3, #199	@ 0xc7
 800a450:	d9f0      	bls.n	800a434 <USB_SetCurrentMode+0x60>
 800a452:	e001      	b.n	800a458 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a454:	2301      	movs	r3, #1
 800a456:	e005      	b.n	800a464 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2bc8      	cmp	r3, #200	@ 0xc8
 800a45c:	d101      	bne.n	800a462 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a45e:	2301      	movs	r3, #1
 800a460:	e000      	b.n	800a464 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a462:	2300      	movs	r3, #0
}
 800a464:	4618      	mov	r0, r3
 800a466:	3710      	adds	r7, #16
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a46c:	b084      	sub	sp, #16
 800a46e:	b580      	push	{r7, lr}
 800a470:	b086      	sub	sp, #24
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
 800a476:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a47a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a47e:	2300      	movs	r3, #0
 800a480:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a486:	2300      	movs	r3, #0
 800a488:	613b      	str	r3, [r7, #16]
 800a48a:	e009      	b.n	800a4a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a48c:	687a      	ldr	r2, [r7, #4]
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	3340      	adds	r3, #64	@ 0x40
 800a492:	009b      	lsls	r3, r3, #2
 800a494:	4413      	add	r3, r2
 800a496:	2200      	movs	r2, #0
 800a498:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	3301      	adds	r3, #1
 800a49e:	613b      	str	r3, [r7, #16]
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	2b0e      	cmp	r3, #14
 800a4a4:	d9f2      	bls.n	800a48c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a4a6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d11c      	bne.n	800a4e8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	68fa      	ldr	r2, [r7, #12]
 800a4b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a4bc:	f043 0302 	orr.w	r3, r3, #2
 800a4c0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4c6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	601a      	str	r2, [r3, #0]
 800a4e6:	e005      	b.n	800a4f4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4ec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a500:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a504:	2b01      	cmp	r3, #1
 800a506:	d10d      	bne.n	800a524 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a508:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d104      	bne.n	800a51a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a510:	2100      	movs	r1, #0
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f000 f968 	bl	800a7e8 <USB_SetDevSpeed>
 800a518:	e008      	b.n	800a52c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a51a:	2101      	movs	r1, #1
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f000 f963 	bl	800a7e8 <USB_SetDevSpeed>
 800a522:	e003      	b.n	800a52c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a524:	2103      	movs	r1, #3
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 f95e 	bl	800a7e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a52c:	2110      	movs	r1, #16
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f000 f8fa 	bl	800a728 <USB_FlushTxFifo>
 800a534:	4603      	mov	r3, r0
 800a536:	2b00      	cmp	r3, #0
 800a538:	d001      	beq.n	800a53e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800a53a:	2301      	movs	r3, #1
 800a53c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f000 f924 	bl	800a78c <USB_FlushRxFifo>
 800a544:	4603      	mov	r3, r0
 800a546:	2b00      	cmp	r3, #0
 800a548:	d001      	beq.n	800a54e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800a54a:	2301      	movs	r3, #1
 800a54c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a554:	461a      	mov	r2, r3
 800a556:	2300      	movs	r3, #0
 800a558:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a560:	461a      	mov	r2, r3
 800a562:	2300      	movs	r3, #0
 800a564:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a56c:	461a      	mov	r2, r3
 800a56e:	2300      	movs	r3, #0
 800a570:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a572:	2300      	movs	r3, #0
 800a574:	613b      	str	r3, [r7, #16]
 800a576:	e043      	b.n	800a600 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	015a      	lsls	r2, r3, #5
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	4413      	add	r3, r2
 800a580:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a58a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a58e:	d118      	bne.n	800a5c2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d10a      	bne.n	800a5ac <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	015a      	lsls	r2, r3, #5
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	4413      	add	r3, r2
 800a59e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a5a8:	6013      	str	r3, [r2, #0]
 800a5aa:	e013      	b.n	800a5d4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	015a      	lsls	r2, r3, #5
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	4413      	add	r3, r2
 800a5b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5b8:	461a      	mov	r2, r3
 800a5ba:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a5be:	6013      	str	r3, [r2, #0]
 800a5c0:	e008      	b.n	800a5d4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	015a      	lsls	r2, r3, #5
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	4413      	add	r3, r2
 800a5ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	015a      	lsls	r2, r3, #5
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	4413      	add	r3, r2
 800a5dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	015a      	lsls	r2, r3, #5
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	4413      	add	r3, r2
 800a5ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a5f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	613b      	str	r3, [r7, #16]
 800a600:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a604:	461a      	mov	r2, r3
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	4293      	cmp	r3, r2
 800a60a:	d3b5      	bcc.n	800a578 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a60c:	2300      	movs	r3, #0
 800a60e:	613b      	str	r3, [r7, #16]
 800a610:	e043      	b.n	800a69a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	015a      	lsls	r2, r3, #5
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	4413      	add	r3, r2
 800a61a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a624:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a628:	d118      	bne.n	800a65c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d10a      	bne.n	800a646 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	015a      	lsls	r2, r3, #5
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	4413      	add	r3, r2
 800a638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a63c:	461a      	mov	r2, r3
 800a63e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a642:	6013      	str	r3, [r2, #0]
 800a644:	e013      	b.n	800a66e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	015a      	lsls	r2, r3, #5
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	4413      	add	r3, r2
 800a64e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a652:	461a      	mov	r2, r3
 800a654:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a658:	6013      	str	r3, [r2, #0]
 800a65a:	e008      	b.n	800a66e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	015a      	lsls	r2, r3, #5
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	4413      	add	r3, r2
 800a664:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a668:	461a      	mov	r2, r3
 800a66a:	2300      	movs	r3, #0
 800a66c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	015a      	lsls	r2, r3, #5
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	4413      	add	r3, r2
 800a676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a67a:	461a      	mov	r2, r3
 800a67c:	2300      	movs	r3, #0
 800a67e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	015a      	lsls	r2, r3, #5
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	4413      	add	r3, r2
 800a688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a68c:	461a      	mov	r2, r3
 800a68e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a692:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	3301      	adds	r3, #1
 800a698:	613b      	str	r3, [r7, #16]
 800a69a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a69e:	461a      	mov	r2, r3
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d3b5      	bcc.n	800a612 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6ac:	691b      	ldr	r3, [r3, #16]
 800a6ae:	68fa      	ldr	r2, [r7, #12]
 800a6b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a6b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a6b8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a6c6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a6c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d105      	bne.n	800a6dc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	699b      	ldr	r3, [r3, #24]
 800a6d4:	f043 0210 	orr.w	r2, r3, #16
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	699a      	ldr	r2, [r3, #24]
 800a6e0:	4b0f      	ldr	r3, [pc, #60]	@ (800a720 <USB_DevInit+0x2b4>)
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	687a      	ldr	r2, [r7, #4]
 800a6e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a6e8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d005      	beq.n	800a6fc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	699b      	ldr	r3, [r3, #24]
 800a6f4:	f043 0208 	orr.w	r2, r3, #8
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a6fc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a700:	2b01      	cmp	r3, #1
 800a702:	d105      	bne.n	800a710 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	699a      	ldr	r2, [r3, #24]
 800a708:	4b06      	ldr	r3, [pc, #24]	@ (800a724 <USB_DevInit+0x2b8>)
 800a70a:	4313      	orrs	r3, r2
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a710:	7dfb      	ldrb	r3, [r7, #23]
}
 800a712:	4618      	mov	r0, r3
 800a714:	3718      	adds	r7, #24
 800a716:	46bd      	mov	sp, r7
 800a718:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a71c:	b004      	add	sp, #16
 800a71e:	4770      	bx	lr
 800a720:	803c3800 	.word	0x803c3800
 800a724:	40000004 	.word	0x40000004

0800a728 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a728:	b480      	push	{r7}
 800a72a:	b085      	sub	sp, #20
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a732:	2300      	movs	r3, #0
 800a734:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	3301      	adds	r3, #1
 800a73a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a742:	d901      	bls.n	800a748 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a744:	2303      	movs	r3, #3
 800a746:	e01b      	b.n	800a780 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	691b      	ldr	r3, [r3, #16]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	daf2      	bge.n	800a736 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a750:	2300      	movs	r3, #0
 800a752:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	019b      	lsls	r3, r3, #6
 800a758:	f043 0220 	orr.w	r2, r3, #32
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	3301      	adds	r3, #1
 800a764:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a76c:	d901      	bls.n	800a772 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a76e:	2303      	movs	r3, #3
 800a770:	e006      	b.n	800a780 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	691b      	ldr	r3, [r3, #16]
 800a776:	f003 0320 	and.w	r3, r3, #32
 800a77a:	2b20      	cmp	r3, #32
 800a77c:	d0f0      	beq.n	800a760 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a77e:	2300      	movs	r3, #0
}
 800a780:	4618      	mov	r0, r3
 800a782:	3714      	adds	r7, #20
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr

0800a78c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b085      	sub	sp, #20
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a794:	2300      	movs	r3, #0
 800a796:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	3301      	adds	r3, #1
 800a79c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a7a4:	d901      	bls.n	800a7aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a7a6:	2303      	movs	r3, #3
 800a7a8:	e018      	b.n	800a7dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	691b      	ldr	r3, [r3, #16]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	daf2      	bge.n	800a798 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2210      	movs	r2, #16
 800a7ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	3301      	adds	r3, #1
 800a7c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a7c8:	d901      	bls.n	800a7ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a7ca:	2303      	movs	r3, #3
 800a7cc:	e006      	b.n	800a7dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	691b      	ldr	r3, [r3, #16]
 800a7d2:	f003 0310 	and.w	r3, r3, #16
 800a7d6:	2b10      	cmp	r3, #16
 800a7d8:	d0f0      	beq.n	800a7bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a7da:	2300      	movs	r3, #0
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3714      	adds	r7, #20
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr

0800a7e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b085      	sub	sp, #20
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	78fb      	ldrb	r3, [r7, #3]
 800a802:	68f9      	ldr	r1, [r7, #12]
 800a804:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a808:	4313      	orrs	r3, r2
 800a80a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a80c:	2300      	movs	r3, #0
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3714      	adds	r7, #20
 800a812:	46bd      	mov	sp, r7
 800a814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a818:	4770      	bx	lr

0800a81a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800a81a:	b480      	push	{r7}
 800a81c:	b087      	sub	sp, #28
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a82c:	689b      	ldr	r3, [r3, #8]
 800a82e:	f003 0306 	and.w	r3, r3, #6
 800a832:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d102      	bne.n	800a840 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a83a:	2300      	movs	r3, #0
 800a83c:	75fb      	strb	r3, [r7, #23]
 800a83e:	e00a      	b.n	800a856 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2b02      	cmp	r3, #2
 800a844:	d002      	beq.n	800a84c <USB_GetDevSpeed+0x32>
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2b06      	cmp	r3, #6
 800a84a:	d102      	bne.n	800a852 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a84c:	2302      	movs	r3, #2
 800a84e:	75fb      	strb	r3, [r7, #23]
 800a850:	e001      	b.n	800a856 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a852:	230f      	movs	r3, #15
 800a854:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a856:	7dfb      	ldrb	r3, [r7, #23]
}
 800a858:	4618      	mov	r0, r3
 800a85a:	371c      	adds	r7, #28
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr

0800a864 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a864:	b480      	push	{r7}
 800a866:	b085      	sub	sp, #20
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	785b      	ldrb	r3, [r3, #1]
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d139      	bne.n	800a8f4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a886:	69da      	ldr	r2, [r3, #28]
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	f003 030f 	and.w	r3, r3, #15
 800a890:	2101      	movs	r1, #1
 800a892:	fa01 f303 	lsl.w	r3, r1, r3
 800a896:	b29b      	uxth	r3, r3
 800a898:	68f9      	ldr	r1, [r7, #12]
 800a89a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	015a      	lsls	r2, r3, #5
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	4413      	add	r3, r2
 800a8aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d153      	bne.n	800a960 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	015a      	lsls	r2, r3, #5
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	4413      	add	r3, r2
 800a8c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8c4:	681a      	ldr	r2, [r3, #0]
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	689b      	ldr	r3, [r3, #8]
 800a8ca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	791b      	ldrb	r3, [r3, #4]
 800a8d2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a8d4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	059b      	lsls	r3, r3, #22
 800a8da:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a8dc:	431a      	orrs	r2, r3
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	0159      	lsls	r1, r3, #5
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	440b      	add	r3, r1
 800a8e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	4b20      	ldr	r3, [pc, #128]	@ (800a970 <USB_ActivateEndpoint+0x10c>)
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	600b      	str	r3, [r1, #0]
 800a8f2:	e035      	b.n	800a960 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8fa:	69da      	ldr	r2, [r3, #28]
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	781b      	ldrb	r3, [r3, #0]
 800a900:	f003 030f 	and.w	r3, r3, #15
 800a904:	2101      	movs	r1, #1
 800a906:	fa01 f303 	lsl.w	r3, r1, r3
 800a90a:	041b      	lsls	r3, r3, #16
 800a90c:	68f9      	ldr	r1, [r7, #12]
 800a90e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a912:	4313      	orrs	r3, r2
 800a914:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	015a      	lsls	r2, r3, #5
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	4413      	add	r3, r2
 800a91e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d119      	bne.n	800a960 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	015a      	lsls	r2, r3, #5
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	4413      	add	r3, r2
 800a934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	689b      	ldr	r3, [r3, #8]
 800a93e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	791b      	ldrb	r3, [r3, #4]
 800a946:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a948:	430b      	orrs	r3, r1
 800a94a:	431a      	orrs	r2, r3
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	0159      	lsls	r1, r3, #5
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	440b      	add	r3, r1
 800a954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a958:	4619      	mov	r1, r3
 800a95a:	4b05      	ldr	r3, [pc, #20]	@ (800a970 <USB_ActivateEndpoint+0x10c>)
 800a95c:	4313      	orrs	r3, r2
 800a95e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a960:	2300      	movs	r3, #0
}
 800a962:	4618      	mov	r0, r3
 800a964:	3714      	adds	r7, #20
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr
 800a96e:	bf00      	nop
 800a970:	10008000 	.word	0x10008000

0800a974 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a974:	b480      	push	{r7}
 800a976:	b085      	sub	sp, #20
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	785b      	ldrb	r3, [r3, #1]
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d161      	bne.n	800aa54 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	015a      	lsls	r2, r3, #5
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	4413      	add	r3, r2
 800a998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a9a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a9a6:	d11f      	bne.n	800a9e8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	015a      	lsls	r2, r3, #5
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	4413      	add	r3, r2
 800a9b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	68ba      	ldr	r2, [r7, #8]
 800a9b8:	0151      	lsls	r1, r2, #5
 800a9ba:	68fa      	ldr	r2, [r7, #12]
 800a9bc:	440a      	add	r2, r1
 800a9be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a9c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a9c6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	015a      	lsls	r2, r3, #5
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	4413      	add	r3, r2
 800a9d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	68ba      	ldr	r2, [r7, #8]
 800a9d8:	0151      	lsls	r1, r2, #5
 800a9da:	68fa      	ldr	r2, [r7, #12]
 800a9dc:	440a      	add	r2, r1
 800a9de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a9e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a9e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	781b      	ldrb	r3, [r3, #0]
 800a9f4:	f003 030f 	and.w	r3, r3, #15
 800a9f8:	2101      	movs	r1, #1
 800a9fa:	fa01 f303 	lsl.w	r3, r1, r3
 800a9fe:	b29b      	uxth	r3, r3
 800aa00:	43db      	mvns	r3, r3
 800aa02:	68f9      	ldr	r1, [r7, #12]
 800aa04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aa08:	4013      	ands	r3, r2
 800aa0a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa12:	69da      	ldr	r2, [r3, #28]
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	f003 030f 	and.w	r3, r3, #15
 800aa1c:	2101      	movs	r1, #1
 800aa1e:	fa01 f303 	lsl.w	r3, r1, r3
 800aa22:	b29b      	uxth	r3, r3
 800aa24:	43db      	mvns	r3, r3
 800aa26:	68f9      	ldr	r1, [r7, #12]
 800aa28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aa2c:	4013      	ands	r3, r2
 800aa2e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	015a      	lsls	r2, r3, #5
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	4413      	add	r3, r2
 800aa38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa3c:	681a      	ldr	r2, [r3, #0]
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	0159      	lsls	r1, r3, #5
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	440b      	add	r3, r1
 800aa46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa4a:	4619      	mov	r1, r3
 800aa4c:	4b35      	ldr	r3, [pc, #212]	@ (800ab24 <USB_DeactivateEndpoint+0x1b0>)
 800aa4e:	4013      	ands	r3, r2
 800aa50:	600b      	str	r3, [r1, #0]
 800aa52:	e060      	b.n	800ab16 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	015a      	lsls	r2, r3, #5
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	4413      	add	r3, r2
 800aa5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aa66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aa6a:	d11f      	bne.n	800aaac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	015a      	lsls	r2, r3, #5
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	4413      	add	r3, r2
 800aa74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	68ba      	ldr	r2, [r7, #8]
 800aa7c:	0151      	lsls	r1, r2, #5
 800aa7e:	68fa      	ldr	r2, [r7, #12]
 800aa80:	440a      	add	r2, r1
 800aa82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa86:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800aa8a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	015a      	lsls	r2, r3, #5
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	4413      	add	r3, r2
 800aa94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	68ba      	ldr	r2, [r7, #8]
 800aa9c:	0151      	lsls	r1, r2, #5
 800aa9e:	68fa      	ldr	r2, [r7, #12]
 800aaa0:	440a      	add	r2, r1
 800aaa2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aaa6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800aaaa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aab2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	781b      	ldrb	r3, [r3, #0]
 800aab8:	f003 030f 	and.w	r3, r3, #15
 800aabc:	2101      	movs	r1, #1
 800aabe:	fa01 f303 	lsl.w	r3, r1, r3
 800aac2:	041b      	lsls	r3, r3, #16
 800aac4:	43db      	mvns	r3, r3
 800aac6:	68f9      	ldr	r1, [r7, #12]
 800aac8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aacc:	4013      	ands	r3, r2
 800aace:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aad6:	69da      	ldr	r2, [r3, #28]
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	f003 030f 	and.w	r3, r3, #15
 800aae0:	2101      	movs	r1, #1
 800aae2:	fa01 f303 	lsl.w	r3, r1, r3
 800aae6:	041b      	lsls	r3, r3, #16
 800aae8:	43db      	mvns	r3, r3
 800aaea:	68f9      	ldr	r1, [r7, #12]
 800aaec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aaf0:	4013      	ands	r3, r2
 800aaf2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	015a      	lsls	r2, r3, #5
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	4413      	add	r3, r2
 800aafc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab00:	681a      	ldr	r2, [r3, #0]
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	0159      	lsls	r1, r3, #5
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	440b      	add	r3, r1
 800ab0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab0e:	4619      	mov	r1, r3
 800ab10:	4b05      	ldr	r3, [pc, #20]	@ (800ab28 <USB_DeactivateEndpoint+0x1b4>)
 800ab12:	4013      	ands	r3, r2
 800ab14:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ab16:	2300      	movs	r3, #0
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3714      	adds	r7, #20
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr
 800ab24:	ec337800 	.word	0xec337800
 800ab28:	eff37800 	.word	0xeff37800

0800ab2c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b08a      	sub	sp, #40	@ 0x28
 800ab30:	af02      	add	r7, sp, #8
 800ab32:	60f8      	str	r0, [r7, #12]
 800ab34:	60b9      	str	r1, [r7, #8]
 800ab36:	4613      	mov	r3, r2
 800ab38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	781b      	ldrb	r3, [r3, #0]
 800ab42:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	785b      	ldrb	r3, [r3, #1]
 800ab48:	2b01      	cmp	r3, #1
 800ab4a:	f040 8181 	bne.w	800ae50 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	691b      	ldr	r3, [r3, #16]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d132      	bne.n	800abbc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ab56:	69bb      	ldr	r3, [r7, #24]
 800ab58:	015a      	lsls	r2, r3, #5
 800ab5a:	69fb      	ldr	r3, [r7, #28]
 800ab5c:	4413      	add	r3, r2
 800ab5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab62:	691a      	ldr	r2, [r3, #16]
 800ab64:	69bb      	ldr	r3, [r7, #24]
 800ab66:	0159      	lsls	r1, r3, #5
 800ab68:	69fb      	ldr	r3, [r7, #28]
 800ab6a:	440b      	add	r3, r1
 800ab6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab70:	4619      	mov	r1, r3
 800ab72:	4ba5      	ldr	r3, [pc, #660]	@ (800ae08 <USB_EPStartXfer+0x2dc>)
 800ab74:	4013      	ands	r3, r2
 800ab76:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ab78:	69bb      	ldr	r3, [r7, #24]
 800ab7a:	015a      	lsls	r2, r3, #5
 800ab7c:	69fb      	ldr	r3, [r7, #28]
 800ab7e:	4413      	add	r3, r2
 800ab80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab84:	691b      	ldr	r3, [r3, #16]
 800ab86:	69ba      	ldr	r2, [r7, #24]
 800ab88:	0151      	lsls	r1, r2, #5
 800ab8a:	69fa      	ldr	r2, [r7, #28]
 800ab8c:	440a      	add	r2, r1
 800ab8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab92:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ab96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ab98:	69bb      	ldr	r3, [r7, #24]
 800ab9a:	015a      	lsls	r2, r3, #5
 800ab9c:	69fb      	ldr	r3, [r7, #28]
 800ab9e:	4413      	add	r3, r2
 800aba0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aba4:	691a      	ldr	r2, [r3, #16]
 800aba6:	69bb      	ldr	r3, [r7, #24]
 800aba8:	0159      	lsls	r1, r3, #5
 800abaa:	69fb      	ldr	r3, [r7, #28]
 800abac:	440b      	add	r3, r1
 800abae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abb2:	4619      	mov	r1, r3
 800abb4:	4b95      	ldr	r3, [pc, #596]	@ (800ae0c <USB_EPStartXfer+0x2e0>)
 800abb6:	4013      	ands	r3, r2
 800abb8:	610b      	str	r3, [r1, #16]
 800abba:	e092      	b.n	800ace2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800abbc:	69bb      	ldr	r3, [r7, #24]
 800abbe:	015a      	lsls	r2, r3, #5
 800abc0:	69fb      	ldr	r3, [r7, #28]
 800abc2:	4413      	add	r3, r2
 800abc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abc8:	691a      	ldr	r2, [r3, #16]
 800abca:	69bb      	ldr	r3, [r7, #24]
 800abcc:	0159      	lsls	r1, r3, #5
 800abce:	69fb      	ldr	r3, [r7, #28]
 800abd0:	440b      	add	r3, r1
 800abd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abd6:	4619      	mov	r1, r3
 800abd8:	4b8c      	ldr	r3, [pc, #560]	@ (800ae0c <USB_EPStartXfer+0x2e0>)
 800abda:	4013      	ands	r3, r2
 800abdc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800abde:	69bb      	ldr	r3, [r7, #24]
 800abe0:	015a      	lsls	r2, r3, #5
 800abe2:	69fb      	ldr	r3, [r7, #28]
 800abe4:	4413      	add	r3, r2
 800abe6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abea:	691a      	ldr	r2, [r3, #16]
 800abec:	69bb      	ldr	r3, [r7, #24]
 800abee:	0159      	lsls	r1, r3, #5
 800abf0:	69fb      	ldr	r3, [r7, #28]
 800abf2:	440b      	add	r3, r1
 800abf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abf8:	4619      	mov	r1, r3
 800abfa:	4b83      	ldr	r3, [pc, #524]	@ (800ae08 <USB_EPStartXfer+0x2dc>)
 800abfc:	4013      	ands	r3, r2
 800abfe:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800ac00:	69bb      	ldr	r3, [r7, #24]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d11a      	bne.n	800ac3c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	691a      	ldr	r2, [r3, #16]
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	689b      	ldr	r3, [r3, #8]
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d903      	bls.n	800ac1a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	689a      	ldr	r2, [r3, #8]
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ac1a:	69bb      	ldr	r3, [r7, #24]
 800ac1c:	015a      	lsls	r2, r3, #5
 800ac1e:	69fb      	ldr	r3, [r7, #28]
 800ac20:	4413      	add	r3, r2
 800ac22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac26:	691b      	ldr	r3, [r3, #16]
 800ac28:	69ba      	ldr	r2, [r7, #24]
 800ac2a:	0151      	lsls	r1, r2, #5
 800ac2c:	69fa      	ldr	r2, [r7, #28]
 800ac2e:	440a      	add	r2, r1
 800ac30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac34:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ac38:	6113      	str	r3, [r2, #16]
 800ac3a:	e01b      	b.n	800ac74 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ac3c:	69bb      	ldr	r3, [r7, #24]
 800ac3e:	015a      	lsls	r2, r3, #5
 800ac40:	69fb      	ldr	r3, [r7, #28]
 800ac42:	4413      	add	r3, r2
 800ac44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac48:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	6919      	ldr	r1, [r3, #16]
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	689b      	ldr	r3, [r3, #8]
 800ac52:	440b      	add	r3, r1
 800ac54:	1e59      	subs	r1, r3, #1
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	689b      	ldr	r3, [r3, #8]
 800ac5a:	fbb1 f3f3 	udiv	r3, r1, r3
 800ac5e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ac60:	4b6b      	ldr	r3, [pc, #428]	@ (800ae10 <USB_EPStartXfer+0x2e4>)
 800ac62:	400b      	ands	r3, r1
 800ac64:	69b9      	ldr	r1, [r7, #24]
 800ac66:	0148      	lsls	r0, r1, #5
 800ac68:	69f9      	ldr	r1, [r7, #28]
 800ac6a:	4401      	add	r1, r0
 800ac6c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ac70:	4313      	orrs	r3, r2
 800ac72:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ac74:	69bb      	ldr	r3, [r7, #24]
 800ac76:	015a      	lsls	r2, r3, #5
 800ac78:	69fb      	ldr	r3, [r7, #28]
 800ac7a:	4413      	add	r3, r2
 800ac7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac80:	691a      	ldr	r2, [r3, #16]
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	691b      	ldr	r3, [r3, #16]
 800ac86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac8a:	69b9      	ldr	r1, [r7, #24]
 800ac8c:	0148      	lsls	r0, r1, #5
 800ac8e:	69f9      	ldr	r1, [r7, #28]
 800ac90:	4401      	add	r1, r0
 800ac92:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ac96:	4313      	orrs	r3, r2
 800ac98:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	791b      	ldrb	r3, [r3, #4]
 800ac9e:	2b01      	cmp	r3, #1
 800aca0:	d11f      	bne.n	800ace2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800aca2:	69bb      	ldr	r3, [r7, #24]
 800aca4:	015a      	lsls	r2, r3, #5
 800aca6:	69fb      	ldr	r3, [r7, #28]
 800aca8:	4413      	add	r3, r2
 800acaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acae:	691b      	ldr	r3, [r3, #16]
 800acb0:	69ba      	ldr	r2, [r7, #24]
 800acb2:	0151      	lsls	r1, r2, #5
 800acb4:	69fa      	ldr	r2, [r7, #28]
 800acb6:	440a      	add	r2, r1
 800acb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800acbc:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800acc0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800acc2:	69bb      	ldr	r3, [r7, #24]
 800acc4:	015a      	lsls	r2, r3, #5
 800acc6:	69fb      	ldr	r3, [r7, #28]
 800acc8:	4413      	add	r3, r2
 800acca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acce:	691b      	ldr	r3, [r3, #16]
 800acd0:	69ba      	ldr	r2, [r7, #24]
 800acd2:	0151      	lsls	r1, r2, #5
 800acd4:	69fa      	ldr	r2, [r7, #28]
 800acd6:	440a      	add	r2, r1
 800acd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800acdc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ace0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ace2:	79fb      	ldrb	r3, [r7, #7]
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	d14b      	bne.n	800ad80 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	69db      	ldr	r3, [r3, #28]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d009      	beq.n	800ad04 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800acf0:	69bb      	ldr	r3, [r7, #24]
 800acf2:	015a      	lsls	r2, r3, #5
 800acf4:	69fb      	ldr	r3, [r7, #28]
 800acf6:	4413      	add	r3, r2
 800acf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acfc:	461a      	mov	r2, r3
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	69db      	ldr	r3, [r3, #28]
 800ad02:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	791b      	ldrb	r3, [r3, #4]
 800ad08:	2b01      	cmp	r3, #1
 800ad0a:	d128      	bne.n	800ad5e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ad0c:	69fb      	ldr	r3, [r7, #28]
 800ad0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad12:	689b      	ldr	r3, [r3, #8]
 800ad14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d110      	bne.n	800ad3e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ad1c:	69bb      	ldr	r3, [r7, #24]
 800ad1e:	015a      	lsls	r2, r3, #5
 800ad20:	69fb      	ldr	r3, [r7, #28]
 800ad22:	4413      	add	r3, r2
 800ad24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	69ba      	ldr	r2, [r7, #24]
 800ad2c:	0151      	lsls	r1, r2, #5
 800ad2e:	69fa      	ldr	r2, [r7, #28]
 800ad30:	440a      	add	r2, r1
 800ad32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad36:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ad3a:	6013      	str	r3, [r2, #0]
 800ad3c:	e00f      	b.n	800ad5e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ad3e:	69bb      	ldr	r3, [r7, #24]
 800ad40:	015a      	lsls	r2, r3, #5
 800ad42:	69fb      	ldr	r3, [r7, #28]
 800ad44:	4413      	add	r3, r2
 800ad46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	69ba      	ldr	r2, [r7, #24]
 800ad4e:	0151      	lsls	r1, r2, #5
 800ad50:	69fa      	ldr	r2, [r7, #28]
 800ad52:	440a      	add	r2, r1
 800ad54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ad5c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ad5e:	69bb      	ldr	r3, [r7, #24]
 800ad60:	015a      	lsls	r2, r3, #5
 800ad62:	69fb      	ldr	r3, [r7, #28]
 800ad64:	4413      	add	r3, r2
 800ad66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	69ba      	ldr	r2, [r7, #24]
 800ad6e:	0151      	lsls	r1, r2, #5
 800ad70:	69fa      	ldr	r2, [r7, #28]
 800ad72:	440a      	add	r2, r1
 800ad74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad78:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ad7c:	6013      	str	r3, [r2, #0]
 800ad7e:	e16a      	b.n	800b056 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ad80:	69bb      	ldr	r3, [r7, #24]
 800ad82:	015a      	lsls	r2, r3, #5
 800ad84:	69fb      	ldr	r3, [r7, #28]
 800ad86:	4413      	add	r3, r2
 800ad88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	69ba      	ldr	r2, [r7, #24]
 800ad90:	0151      	lsls	r1, r2, #5
 800ad92:	69fa      	ldr	r2, [r7, #28]
 800ad94:	440a      	add	r2, r1
 800ad96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad9a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ad9e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	791b      	ldrb	r3, [r3, #4]
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	d015      	beq.n	800add4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	691b      	ldr	r3, [r3, #16]
 800adac:	2b00      	cmp	r3, #0
 800adae:	f000 8152 	beq.w	800b056 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800adb2:	69fb      	ldr	r3, [r7, #28]
 800adb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	f003 030f 	and.w	r3, r3, #15
 800adc2:	2101      	movs	r1, #1
 800adc4:	fa01 f303 	lsl.w	r3, r1, r3
 800adc8:	69f9      	ldr	r1, [r7, #28]
 800adca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800adce:	4313      	orrs	r3, r2
 800add0:	634b      	str	r3, [r1, #52]	@ 0x34
 800add2:	e140      	b.n	800b056 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800add4:	69fb      	ldr	r3, [r7, #28]
 800add6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adda:	689b      	ldr	r3, [r3, #8]
 800addc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d117      	bne.n	800ae14 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ade4:	69bb      	ldr	r3, [r7, #24]
 800ade6:	015a      	lsls	r2, r3, #5
 800ade8:	69fb      	ldr	r3, [r7, #28]
 800adea:	4413      	add	r3, r2
 800adec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	69ba      	ldr	r2, [r7, #24]
 800adf4:	0151      	lsls	r1, r2, #5
 800adf6:	69fa      	ldr	r2, [r7, #28]
 800adf8:	440a      	add	r2, r1
 800adfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800adfe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ae02:	6013      	str	r3, [r2, #0]
 800ae04:	e016      	b.n	800ae34 <USB_EPStartXfer+0x308>
 800ae06:	bf00      	nop
 800ae08:	e007ffff 	.word	0xe007ffff
 800ae0c:	fff80000 	.word	0xfff80000
 800ae10:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ae14:	69bb      	ldr	r3, [r7, #24]
 800ae16:	015a      	lsls	r2, r3, #5
 800ae18:	69fb      	ldr	r3, [r7, #28]
 800ae1a:	4413      	add	r3, r2
 800ae1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	69ba      	ldr	r2, [r7, #24]
 800ae24:	0151      	lsls	r1, r2, #5
 800ae26:	69fa      	ldr	r2, [r7, #28]
 800ae28:	440a      	add	r2, r1
 800ae2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ae32:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	68d9      	ldr	r1, [r3, #12]
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	781a      	ldrb	r2, [r3, #0]
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	691b      	ldr	r3, [r3, #16]
 800ae40:	b298      	uxth	r0, r3
 800ae42:	79fb      	ldrb	r3, [r7, #7]
 800ae44:	9300      	str	r3, [sp, #0]
 800ae46:	4603      	mov	r3, r0
 800ae48:	68f8      	ldr	r0, [r7, #12]
 800ae4a:	f000 f9b9 	bl	800b1c0 <USB_WritePacket>
 800ae4e:	e102      	b.n	800b056 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ae50:	69bb      	ldr	r3, [r7, #24]
 800ae52:	015a      	lsls	r2, r3, #5
 800ae54:	69fb      	ldr	r3, [r7, #28]
 800ae56:	4413      	add	r3, r2
 800ae58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae5c:	691a      	ldr	r2, [r3, #16]
 800ae5e:	69bb      	ldr	r3, [r7, #24]
 800ae60:	0159      	lsls	r1, r3, #5
 800ae62:	69fb      	ldr	r3, [r7, #28]
 800ae64:	440b      	add	r3, r1
 800ae66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae6a:	4619      	mov	r1, r3
 800ae6c:	4b7c      	ldr	r3, [pc, #496]	@ (800b060 <USB_EPStartXfer+0x534>)
 800ae6e:	4013      	ands	r3, r2
 800ae70:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ae72:	69bb      	ldr	r3, [r7, #24]
 800ae74:	015a      	lsls	r2, r3, #5
 800ae76:	69fb      	ldr	r3, [r7, #28]
 800ae78:	4413      	add	r3, r2
 800ae7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae7e:	691a      	ldr	r2, [r3, #16]
 800ae80:	69bb      	ldr	r3, [r7, #24]
 800ae82:	0159      	lsls	r1, r3, #5
 800ae84:	69fb      	ldr	r3, [r7, #28]
 800ae86:	440b      	add	r3, r1
 800ae88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	4b75      	ldr	r3, [pc, #468]	@ (800b064 <USB_EPStartXfer+0x538>)
 800ae90:	4013      	ands	r3, r2
 800ae92:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800ae94:	69bb      	ldr	r3, [r7, #24]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d12f      	bne.n	800aefa <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	691b      	ldr	r3, [r3, #16]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d003      	beq.n	800aeaa <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	689a      	ldr	r2, [r3, #8]
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	689a      	ldr	r2, [r3, #8]
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800aeb2:	69bb      	ldr	r3, [r7, #24]
 800aeb4:	015a      	lsls	r2, r3, #5
 800aeb6:	69fb      	ldr	r3, [r7, #28]
 800aeb8:	4413      	add	r3, r2
 800aeba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aebe:	691a      	ldr	r2, [r3, #16]
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	6a1b      	ldr	r3, [r3, #32]
 800aec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aec8:	69b9      	ldr	r1, [r7, #24]
 800aeca:	0148      	lsls	r0, r1, #5
 800aecc:	69f9      	ldr	r1, [r7, #28]
 800aece:	4401      	add	r1, r0
 800aed0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800aed4:	4313      	orrs	r3, r2
 800aed6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aed8:	69bb      	ldr	r3, [r7, #24]
 800aeda:	015a      	lsls	r2, r3, #5
 800aedc:	69fb      	ldr	r3, [r7, #28]
 800aede:	4413      	add	r3, r2
 800aee0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aee4:	691b      	ldr	r3, [r3, #16]
 800aee6:	69ba      	ldr	r2, [r7, #24]
 800aee8:	0151      	lsls	r1, r2, #5
 800aeea:	69fa      	ldr	r2, [r7, #28]
 800aeec:	440a      	add	r2, r1
 800aeee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aef2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aef6:	6113      	str	r3, [r2, #16]
 800aef8:	e05f      	b.n	800afba <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	691b      	ldr	r3, [r3, #16]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d123      	bne.n	800af4a <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800af02:	69bb      	ldr	r3, [r7, #24]
 800af04:	015a      	lsls	r2, r3, #5
 800af06:	69fb      	ldr	r3, [r7, #28]
 800af08:	4413      	add	r3, r2
 800af0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af0e:	691a      	ldr	r2, [r3, #16]
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	689b      	ldr	r3, [r3, #8]
 800af14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af18:	69b9      	ldr	r1, [r7, #24]
 800af1a:	0148      	lsls	r0, r1, #5
 800af1c:	69f9      	ldr	r1, [r7, #28]
 800af1e:	4401      	add	r1, r0
 800af20:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800af24:	4313      	orrs	r3, r2
 800af26:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800af28:	69bb      	ldr	r3, [r7, #24]
 800af2a:	015a      	lsls	r2, r3, #5
 800af2c:	69fb      	ldr	r3, [r7, #28]
 800af2e:	4413      	add	r3, r2
 800af30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af34:	691b      	ldr	r3, [r3, #16]
 800af36:	69ba      	ldr	r2, [r7, #24]
 800af38:	0151      	lsls	r1, r2, #5
 800af3a:	69fa      	ldr	r2, [r7, #28]
 800af3c:	440a      	add	r2, r1
 800af3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af42:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800af46:	6113      	str	r3, [r2, #16]
 800af48:	e037      	b.n	800afba <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	691a      	ldr	r2, [r3, #16]
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	689b      	ldr	r3, [r3, #8]
 800af52:	4413      	add	r3, r2
 800af54:	1e5a      	subs	r2, r3, #1
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	689b      	ldr	r3, [r3, #8]
 800af5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800af5e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	689b      	ldr	r3, [r3, #8]
 800af64:	8afa      	ldrh	r2, [r7, #22]
 800af66:	fb03 f202 	mul.w	r2, r3, r2
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800af6e:	69bb      	ldr	r3, [r7, #24]
 800af70:	015a      	lsls	r2, r3, #5
 800af72:	69fb      	ldr	r3, [r7, #28]
 800af74:	4413      	add	r3, r2
 800af76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af7a:	691a      	ldr	r2, [r3, #16]
 800af7c:	8afb      	ldrh	r3, [r7, #22]
 800af7e:	04d9      	lsls	r1, r3, #19
 800af80:	4b39      	ldr	r3, [pc, #228]	@ (800b068 <USB_EPStartXfer+0x53c>)
 800af82:	400b      	ands	r3, r1
 800af84:	69b9      	ldr	r1, [r7, #24]
 800af86:	0148      	lsls	r0, r1, #5
 800af88:	69f9      	ldr	r1, [r7, #28]
 800af8a:	4401      	add	r1, r0
 800af8c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800af90:	4313      	orrs	r3, r2
 800af92:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800af94:	69bb      	ldr	r3, [r7, #24]
 800af96:	015a      	lsls	r2, r3, #5
 800af98:	69fb      	ldr	r3, [r7, #28]
 800af9a:	4413      	add	r3, r2
 800af9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afa0:	691a      	ldr	r2, [r3, #16]
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	6a1b      	ldr	r3, [r3, #32]
 800afa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800afaa:	69b9      	ldr	r1, [r7, #24]
 800afac:	0148      	lsls	r0, r1, #5
 800afae:	69f9      	ldr	r1, [r7, #28]
 800afb0:	4401      	add	r1, r0
 800afb2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800afb6:	4313      	orrs	r3, r2
 800afb8:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800afba:	79fb      	ldrb	r3, [r7, #7]
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	d10d      	bne.n	800afdc <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	68db      	ldr	r3, [r3, #12]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d009      	beq.n	800afdc <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	68d9      	ldr	r1, [r3, #12]
 800afcc:	69bb      	ldr	r3, [r7, #24]
 800afce:	015a      	lsls	r2, r3, #5
 800afd0:	69fb      	ldr	r3, [r7, #28]
 800afd2:	4413      	add	r3, r2
 800afd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afd8:	460a      	mov	r2, r1
 800afda:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	791b      	ldrb	r3, [r3, #4]
 800afe0:	2b01      	cmp	r3, #1
 800afe2:	d128      	bne.n	800b036 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800afe4:	69fb      	ldr	r3, [r7, #28]
 800afe6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800afea:	689b      	ldr	r3, [r3, #8]
 800afec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d110      	bne.n	800b016 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800aff4:	69bb      	ldr	r3, [r7, #24]
 800aff6:	015a      	lsls	r2, r3, #5
 800aff8:	69fb      	ldr	r3, [r7, #28]
 800affa:	4413      	add	r3, r2
 800affc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	69ba      	ldr	r2, [r7, #24]
 800b004:	0151      	lsls	r1, r2, #5
 800b006:	69fa      	ldr	r2, [r7, #28]
 800b008:	440a      	add	r2, r1
 800b00a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b00e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b012:	6013      	str	r3, [r2, #0]
 800b014:	e00f      	b.n	800b036 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b016:	69bb      	ldr	r3, [r7, #24]
 800b018:	015a      	lsls	r2, r3, #5
 800b01a:	69fb      	ldr	r3, [r7, #28]
 800b01c:	4413      	add	r3, r2
 800b01e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	69ba      	ldr	r2, [r7, #24]
 800b026:	0151      	lsls	r1, r2, #5
 800b028:	69fa      	ldr	r2, [r7, #28]
 800b02a:	440a      	add	r2, r1
 800b02c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b030:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b034:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b036:	69bb      	ldr	r3, [r7, #24]
 800b038:	015a      	lsls	r2, r3, #5
 800b03a:	69fb      	ldr	r3, [r7, #28]
 800b03c:	4413      	add	r3, r2
 800b03e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	69ba      	ldr	r2, [r7, #24]
 800b046:	0151      	lsls	r1, r2, #5
 800b048:	69fa      	ldr	r2, [r7, #28]
 800b04a:	440a      	add	r2, r1
 800b04c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b050:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b054:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b056:	2300      	movs	r3, #0
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3720      	adds	r7, #32
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}
 800b060:	fff80000 	.word	0xfff80000
 800b064:	e007ffff 	.word	0xe007ffff
 800b068:	1ff80000 	.word	0x1ff80000

0800b06c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b087      	sub	sp, #28
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b076:	2300      	movs	r3, #0
 800b078:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b07a:	2300      	movs	r3, #0
 800b07c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	785b      	ldrb	r3, [r3, #1]
 800b086:	2b01      	cmp	r3, #1
 800b088:	d14a      	bne.n	800b120 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	781b      	ldrb	r3, [r3, #0]
 800b08e:	015a      	lsls	r2, r3, #5
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	4413      	add	r3, r2
 800b094:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b09e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b0a2:	f040 8086 	bne.w	800b1b2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	015a      	lsls	r2, r3, #5
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	4413      	add	r3, r2
 800b0b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	683a      	ldr	r2, [r7, #0]
 800b0b8:	7812      	ldrb	r2, [r2, #0]
 800b0ba:	0151      	lsls	r1, r2, #5
 800b0bc:	693a      	ldr	r2, [r7, #16]
 800b0be:	440a      	add	r2, r1
 800b0c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b0c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b0c8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	781b      	ldrb	r3, [r3, #0]
 800b0ce:	015a      	lsls	r2, r3, #5
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	4413      	add	r3, r2
 800b0d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	683a      	ldr	r2, [r7, #0]
 800b0dc:	7812      	ldrb	r2, [r2, #0]
 800b0de:	0151      	lsls	r1, r2, #5
 800b0e0:	693a      	ldr	r2, [r7, #16]
 800b0e2:	440a      	add	r2, r1
 800b0e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b0e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b0ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	3301      	adds	r3, #1
 800b0f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d902      	bls.n	800b104 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b0fe:	2301      	movs	r3, #1
 800b100:	75fb      	strb	r3, [r7, #23]
          break;
 800b102:	e056      	b.n	800b1b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	781b      	ldrb	r3, [r3, #0]
 800b108:	015a      	lsls	r2, r3, #5
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	4413      	add	r3, r2
 800b10e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b118:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b11c:	d0e7      	beq.n	800b0ee <USB_EPStopXfer+0x82>
 800b11e:	e048      	b.n	800b1b2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	781b      	ldrb	r3, [r3, #0]
 800b124:	015a      	lsls	r2, r3, #5
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	4413      	add	r3, r2
 800b12a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b134:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b138:	d13b      	bne.n	800b1b2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	015a      	lsls	r2, r3, #5
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	4413      	add	r3, r2
 800b144:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	683a      	ldr	r2, [r7, #0]
 800b14c:	7812      	ldrb	r2, [r2, #0]
 800b14e:	0151      	lsls	r1, r2, #5
 800b150:	693a      	ldr	r2, [r7, #16]
 800b152:	440a      	add	r2, r1
 800b154:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b158:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b15c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	781b      	ldrb	r3, [r3, #0]
 800b162:	015a      	lsls	r2, r3, #5
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	4413      	add	r3, r2
 800b168:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	683a      	ldr	r2, [r7, #0]
 800b170:	7812      	ldrb	r2, [r2, #0]
 800b172:	0151      	lsls	r1, r2, #5
 800b174:	693a      	ldr	r2, [r7, #16]
 800b176:	440a      	add	r2, r1
 800b178:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b17c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b180:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	3301      	adds	r3, #1
 800b186:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b18e:	4293      	cmp	r3, r2
 800b190:	d902      	bls.n	800b198 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b192:	2301      	movs	r3, #1
 800b194:	75fb      	strb	r3, [r7, #23]
          break;
 800b196:	e00c      	b.n	800b1b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	781b      	ldrb	r3, [r3, #0]
 800b19c:	015a      	lsls	r2, r3, #5
 800b19e:	693b      	ldr	r3, [r7, #16]
 800b1a0:	4413      	add	r3, r2
 800b1a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b1ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b1b0:	d0e7      	beq.n	800b182 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b1b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	371c      	adds	r7, #28
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr

0800b1c0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b089      	sub	sp, #36	@ 0x24
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	60f8      	str	r0, [r7, #12]
 800b1c8:	60b9      	str	r1, [r7, #8]
 800b1ca:	4611      	mov	r1, r2
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	460b      	mov	r3, r1
 800b1d0:	71fb      	strb	r3, [r7, #7]
 800b1d2:	4613      	mov	r3, r2
 800b1d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b1de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d123      	bne.n	800b22e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b1e6:	88bb      	ldrh	r3, [r7, #4]
 800b1e8:	3303      	adds	r3, #3
 800b1ea:	089b      	lsrs	r3, r3, #2
 800b1ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	61bb      	str	r3, [r7, #24]
 800b1f2:	e018      	b.n	800b226 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b1f4:	79fb      	ldrb	r3, [r7, #7]
 800b1f6:	031a      	lsls	r2, r3, #12
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	4413      	add	r3, r2
 800b1fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b200:	461a      	mov	r2, r3
 800b202:	69fb      	ldr	r3, [r7, #28]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b208:	69fb      	ldr	r3, [r7, #28]
 800b20a:	3301      	adds	r3, #1
 800b20c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b20e:	69fb      	ldr	r3, [r7, #28]
 800b210:	3301      	adds	r3, #1
 800b212:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b214:	69fb      	ldr	r3, [r7, #28]
 800b216:	3301      	adds	r3, #1
 800b218:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b21a:	69fb      	ldr	r3, [r7, #28]
 800b21c:	3301      	adds	r3, #1
 800b21e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b220:	69bb      	ldr	r3, [r7, #24]
 800b222:	3301      	adds	r3, #1
 800b224:	61bb      	str	r3, [r7, #24]
 800b226:	69ba      	ldr	r2, [r7, #24]
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d3e2      	bcc.n	800b1f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b22e:	2300      	movs	r3, #0
}
 800b230:	4618      	mov	r0, r3
 800b232:	3724      	adds	r7, #36	@ 0x24
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr

0800b23c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b08b      	sub	sp, #44	@ 0x2c
 800b240:	af00      	add	r7, sp, #0
 800b242:	60f8      	str	r0, [r7, #12]
 800b244:	60b9      	str	r1, [r7, #8]
 800b246:	4613      	mov	r3, r2
 800b248:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b252:	88fb      	ldrh	r3, [r7, #6]
 800b254:	089b      	lsrs	r3, r3, #2
 800b256:	b29b      	uxth	r3, r3
 800b258:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b25a:	88fb      	ldrh	r3, [r7, #6]
 800b25c:	f003 0303 	and.w	r3, r3, #3
 800b260:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b262:	2300      	movs	r3, #0
 800b264:	623b      	str	r3, [r7, #32]
 800b266:	e014      	b.n	800b292 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b268:	69bb      	ldr	r3, [r7, #24]
 800b26a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b26e:	681a      	ldr	r2, [r3, #0]
 800b270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b272:	601a      	str	r2, [r3, #0]
    pDest++;
 800b274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b276:	3301      	adds	r3, #1
 800b278:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b27a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b27c:	3301      	adds	r3, #1
 800b27e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b282:	3301      	adds	r3, #1
 800b284:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b288:	3301      	adds	r3, #1
 800b28a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b28c:	6a3b      	ldr	r3, [r7, #32]
 800b28e:	3301      	adds	r3, #1
 800b290:	623b      	str	r3, [r7, #32]
 800b292:	6a3a      	ldr	r2, [r7, #32]
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	429a      	cmp	r2, r3
 800b298:	d3e6      	bcc.n	800b268 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b29a:	8bfb      	ldrh	r3, [r7, #30]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d01e      	beq.n	800b2de <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b2a4:	69bb      	ldr	r3, [r7, #24]
 800b2a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	f107 0310 	add.w	r3, r7, #16
 800b2b0:	6812      	ldr	r2, [r2, #0]
 800b2b2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b2b4:	693a      	ldr	r2, [r7, #16]
 800b2b6:	6a3b      	ldr	r3, [r7, #32]
 800b2b8:	b2db      	uxtb	r3, r3
 800b2ba:	00db      	lsls	r3, r3, #3
 800b2bc:	fa22 f303 	lsr.w	r3, r2, r3
 800b2c0:	b2da      	uxtb	r2, r3
 800b2c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2c4:	701a      	strb	r2, [r3, #0]
      i++;
 800b2c6:	6a3b      	ldr	r3, [r7, #32]
 800b2c8:	3301      	adds	r3, #1
 800b2ca:	623b      	str	r3, [r7, #32]
      pDest++;
 800b2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b2d2:	8bfb      	ldrh	r3, [r7, #30]
 800b2d4:	3b01      	subs	r3, #1
 800b2d6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b2d8:	8bfb      	ldrh	r3, [r7, #30]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d1ea      	bne.n	800b2b4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	372c      	adds	r7, #44	@ 0x2c
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr

0800b2ec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b085      	sub	sp, #20
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	781b      	ldrb	r3, [r3, #0]
 800b2fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	785b      	ldrb	r3, [r3, #1]
 800b304:	2b01      	cmp	r3, #1
 800b306:	d12c      	bne.n	800b362 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	015a      	lsls	r2, r3, #5
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	4413      	add	r3, r2
 800b310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	2b00      	cmp	r3, #0
 800b318:	db12      	blt.n	800b340 <USB_EPSetStall+0x54>
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d00f      	beq.n	800b340 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	015a      	lsls	r2, r3, #5
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	4413      	add	r3, r2
 800b328:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	68ba      	ldr	r2, [r7, #8]
 800b330:	0151      	lsls	r1, r2, #5
 800b332:	68fa      	ldr	r2, [r7, #12]
 800b334:	440a      	add	r2, r1
 800b336:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b33a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b33e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	015a      	lsls	r2, r3, #5
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	4413      	add	r3, r2
 800b348:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	68ba      	ldr	r2, [r7, #8]
 800b350:	0151      	lsls	r1, r2, #5
 800b352:	68fa      	ldr	r2, [r7, #12]
 800b354:	440a      	add	r2, r1
 800b356:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b35a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b35e:	6013      	str	r3, [r2, #0]
 800b360:	e02b      	b.n	800b3ba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	015a      	lsls	r2, r3, #5
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	4413      	add	r3, r2
 800b36a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	2b00      	cmp	r3, #0
 800b372:	db12      	blt.n	800b39a <USB_EPSetStall+0xae>
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d00f      	beq.n	800b39a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	015a      	lsls	r2, r3, #5
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	4413      	add	r3, r2
 800b382:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	68ba      	ldr	r2, [r7, #8]
 800b38a:	0151      	lsls	r1, r2, #5
 800b38c:	68fa      	ldr	r2, [r7, #12]
 800b38e:	440a      	add	r2, r1
 800b390:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b394:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b398:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	015a      	lsls	r2, r3, #5
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	4413      	add	r3, r2
 800b3a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	68ba      	ldr	r2, [r7, #8]
 800b3aa:	0151      	lsls	r1, r2, #5
 800b3ac:	68fa      	ldr	r2, [r7, #12]
 800b3ae:	440a      	add	r2, r1
 800b3b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b3b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b3b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b3ba:	2300      	movs	r3, #0
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3714      	adds	r7, #20
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c6:	4770      	bx	lr

0800b3c8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b085      	sub	sp, #20
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
 800b3d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	781b      	ldrb	r3, [r3, #0]
 800b3da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	785b      	ldrb	r3, [r3, #1]
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	d128      	bne.n	800b436 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	015a      	lsls	r2, r3, #5
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	4413      	add	r3, r2
 800b3ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	68ba      	ldr	r2, [r7, #8]
 800b3f4:	0151      	lsls	r1, r2, #5
 800b3f6:	68fa      	ldr	r2, [r7, #12]
 800b3f8:	440a      	add	r2, r1
 800b3fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b3fe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b402:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	791b      	ldrb	r3, [r3, #4]
 800b408:	2b03      	cmp	r3, #3
 800b40a:	d003      	beq.n	800b414 <USB_EPClearStall+0x4c>
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	791b      	ldrb	r3, [r3, #4]
 800b410:	2b02      	cmp	r3, #2
 800b412:	d138      	bne.n	800b486 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	015a      	lsls	r2, r3, #5
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	4413      	add	r3, r2
 800b41c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	68ba      	ldr	r2, [r7, #8]
 800b424:	0151      	lsls	r1, r2, #5
 800b426:	68fa      	ldr	r2, [r7, #12]
 800b428:	440a      	add	r2, r1
 800b42a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b42e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b432:	6013      	str	r3, [r2, #0]
 800b434:	e027      	b.n	800b486 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	015a      	lsls	r2, r3, #5
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	4413      	add	r3, r2
 800b43e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	68ba      	ldr	r2, [r7, #8]
 800b446:	0151      	lsls	r1, r2, #5
 800b448:	68fa      	ldr	r2, [r7, #12]
 800b44a:	440a      	add	r2, r1
 800b44c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b450:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b454:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	791b      	ldrb	r3, [r3, #4]
 800b45a:	2b03      	cmp	r3, #3
 800b45c:	d003      	beq.n	800b466 <USB_EPClearStall+0x9e>
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	791b      	ldrb	r3, [r3, #4]
 800b462:	2b02      	cmp	r3, #2
 800b464:	d10f      	bne.n	800b486 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	015a      	lsls	r2, r3, #5
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	4413      	add	r3, r2
 800b46e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	68ba      	ldr	r2, [r7, #8]
 800b476:	0151      	lsls	r1, r2, #5
 800b478:	68fa      	ldr	r2, [r7, #12]
 800b47a:	440a      	add	r2, r1
 800b47c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b484:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b486:	2300      	movs	r3, #0
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3714      	adds	r7, #20
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr

0800b494 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b494:	b480      	push	{r7}
 800b496:	b085      	sub	sp, #20
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	460b      	mov	r3, r1
 800b49e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	68fa      	ldr	r2, [r7, #12]
 800b4ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b4b2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b4b6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4be:	681a      	ldr	r2, [r3, #0]
 800b4c0:	78fb      	ldrb	r3, [r7, #3]
 800b4c2:	011b      	lsls	r3, r3, #4
 800b4c4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b4c8:	68f9      	ldr	r1, [r7, #12]
 800b4ca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b4d2:	2300      	movs	r3, #0
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3714      	adds	r7, #20
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr

0800b4e0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b085      	sub	sp, #20
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	68fa      	ldr	r2, [r7, #12]
 800b4f6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b4fa:	f023 0303 	bic.w	r3, r3, #3
 800b4fe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	68fa      	ldr	r2, [r7, #12]
 800b50a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b50e:	f023 0302 	bic.w	r3, r3, #2
 800b512:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b514:	2300      	movs	r3, #0
}
 800b516:	4618      	mov	r0, r3
 800b518:	3714      	adds	r7, #20
 800b51a:	46bd      	mov	sp, r7
 800b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b520:	4770      	bx	lr

0800b522 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b522:	b480      	push	{r7}
 800b524:	b085      	sub	sp, #20
 800b526:	af00      	add	r7, sp, #0
 800b528:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	68fa      	ldr	r2, [r7, #12]
 800b538:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b53c:	f023 0303 	bic.w	r3, r3, #3
 800b540:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b548:	685b      	ldr	r3, [r3, #4]
 800b54a:	68fa      	ldr	r2, [r7, #12]
 800b54c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b550:	f043 0302 	orr.w	r3, r3, #2
 800b554:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b556:	2300      	movs	r3, #0
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3714      	adds	r7, #20
 800b55c:	46bd      	mov	sp, r7
 800b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b562:	4770      	bx	lr

0800b564 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b564:	b480      	push	{r7}
 800b566:	b085      	sub	sp, #20
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	695b      	ldr	r3, [r3, #20]
 800b570:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	699b      	ldr	r3, [r3, #24]
 800b576:	68fa      	ldr	r2, [r7, #12]
 800b578:	4013      	ands	r3, r2
 800b57a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b57c:	68fb      	ldr	r3, [r7, #12]
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3714      	adds	r7, #20
 800b582:	46bd      	mov	sp, r7
 800b584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b588:	4770      	bx	lr

0800b58a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b58a:	b480      	push	{r7}
 800b58c:	b085      	sub	sp, #20
 800b58e:	af00      	add	r7, sp, #0
 800b590:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b59c:	699b      	ldr	r3, [r3, #24]
 800b59e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b5a6:	69db      	ldr	r3, [r3, #28]
 800b5a8:	68ba      	ldr	r2, [r7, #8]
 800b5aa:	4013      	ands	r3, r2
 800b5ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	0c1b      	lsrs	r3, r3, #16
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3714      	adds	r7, #20
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5bc:	4770      	bx	lr

0800b5be <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b5be:	b480      	push	{r7}
 800b5c0:	b085      	sub	sp, #20
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b5d0:	699b      	ldr	r3, [r3, #24]
 800b5d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b5da:	69db      	ldr	r3, [r3, #28]
 800b5dc:	68ba      	ldr	r2, [r7, #8]
 800b5de:	4013      	ands	r3, r2
 800b5e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	b29b      	uxth	r3, r3
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3714      	adds	r7, #20
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f0:	4770      	bx	lr

0800b5f2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b5f2:	b480      	push	{r7}
 800b5f4:	b085      	sub	sp, #20
 800b5f6:	af00      	add	r7, sp, #0
 800b5f8:	6078      	str	r0, [r7, #4]
 800b5fa:	460b      	mov	r3, r1
 800b5fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b602:	78fb      	ldrb	r3, [r7, #3]
 800b604:	015a      	lsls	r2, r3, #5
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	4413      	add	r3, r2
 800b60a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b60e:	689b      	ldr	r3, [r3, #8]
 800b610:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b618:	695b      	ldr	r3, [r3, #20]
 800b61a:	68ba      	ldr	r2, [r7, #8]
 800b61c:	4013      	ands	r3, r2
 800b61e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b620:	68bb      	ldr	r3, [r7, #8]
}
 800b622:	4618      	mov	r0, r3
 800b624:	3714      	adds	r7, #20
 800b626:	46bd      	mov	sp, r7
 800b628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62c:	4770      	bx	lr

0800b62e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b62e:	b480      	push	{r7}
 800b630:	b087      	sub	sp, #28
 800b632:	af00      	add	r7, sp, #0
 800b634:	6078      	str	r0, [r7, #4]
 800b636:	460b      	mov	r3, r1
 800b638:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b644:	691b      	ldr	r3, [r3, #16]
 800b646:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b64e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b650:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b652:	78fb      	ldrb	r3, [r7, #3]
 800b654:	f003 030f 	and.w	r3, r3, #15
 800b658:	68fa      	ldr	r2, [r7, #12]
 800b65a:	fa22 f303 	lsr.w	r3, r2, r3
 800b65e:	01db      	lsls	r3, r3, #7
 800b660:	b2db      	uxtb	r3, r3
 800b662:	693a      	ldr	r2, [r7, #16]
 800b664:	4313      	orrs	r3, r2
 800b666:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b668:	78fb      	ldrb	r3, [r7, #3]
 800b66a:	015a      	lsls	r2, r3, #5
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	4413      	add	r3, r2
 800b670:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b674:	689b      	ldr	r3, [r3, #8]
 800b676:	693a      	ldr	r2, [r7, #16]
 800b678:	4013      	ands	r3, r2
 800b67a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b67c:	68bb      	ldr	r3, [r7, #8]
}
 800b67e:	4618      	mov	r0, r3
 800b680:	371c      	adds	r7, #28
 800b682:	46bd      	mov	sp, r7
 800b684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b688:	4770      	bx	lr

0800b68a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b68a:	b480      	push	{r7}
 800b68c:	b083      	sub	sp, #12
 800b68e:	af00      	add	r7, sp, #0
 800b690:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	695b      	ldr	r3, [r3, #20]
 800b696:	f003 0301 	and.w	r3, r3, #1
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	370c      	adds	r7, #12
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a4:	4770      	bx	lr
	...

0800b6a8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b085      	sub	sp, #20
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6ba:	681a      	ldr	r2, [r3, #0]
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	4b09      	ldr	r3, [pc, #36]	@ (800b6ec <USB_ActivateSetup+0x44>)
 800b6c6:	4013      	ands	r3, r2
 800b6c8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b6d0:	685b      	ldr	r3, [r3, #4]
 800b6d2:	68fa      	ldr	r2, [r7, #12]
 800b6d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b6d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b6dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b6de:	2300      	movs	r3, #0
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3714      	adds	r7, #20
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ea:	4770      	bx	lr
 800b6ec:	fffff800 	.word	0xfffff800

0800b6f0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b087      	sub	sp, #28
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	60f8      	str	r0, [r7, #12]
 800b6f8:	460b      	mov	r3, r1
 800b6fa:	607a      	str	r2, [r7, #4]
 800b6fc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	333c      	adds	r3, #60	@ 0x3c
 800b706:	3304      	adds	r3, #4
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	4a26      	ldr	r2, [pc, #152]	@ (800b7a8 <USB_EP0_OutStart+0xb8>)
 800b710:	4293      	cmp	r3, r2
 800b712:	d90a      	bls.n	800b72a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b720:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b724:	d101      	bne.n	800b72a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b726:	2300      	movs	r3, #0
 800b728:	e037      	b.n	800b79a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b730:	461a      	mov	r2, r3
 800b732:	2300      	movs	r3, #0
 800b734:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b73c:	691b      	ldr	r3, [r3, #16]
 800b73e:	697a      	ldr	r2, [r7, #20]
 800b740:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b744:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b748:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b750:	691b      	ldr	r3, [r3, #16]
 800b752:	697a      	ldr	r2, [r7, #20]
 800b754:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b758:	f043 0318 	orr.w	r3, r3, #24
 800b75c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b764:	691b      	ldr	r3, [r3, #16]
 800b766:	697a      	ldr	r2, [r7, #20]
 800b768:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b76c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800b770:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b772:	7afb      	ldrb	r3, [r7, #11]
 800b774:	2b01      	cmp	r3, #1
 800b776:	d10f      	bne.n	800b798 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b77e:	461a      	mov	r2, r3
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	697a      	ldr	r2, [r7, #20]
 800b78e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b792:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800b796:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b798:	2300      	movs	r3, #0
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	371c      	adds	r7, #28
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a4:	4770      	bx	lr
 800b7a6:	bf00      	nop
 800b7a8:	4f54300a 	.word	0x4f54300a

0800b7ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b085      	sub	sp, #20
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	3301      	adds	r3, #1
 800b7bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b7c4:	d901      	bls.n	800b7ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b7c6:	2303      	movs	r3, #3
 800b7c8:	e01b      	b.n	800b802 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	691b      	ldr	r3, [r3, #16]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	daf2      	bge.n	800b7b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	691b      	ldr	r3, [r3, #16]
 800b7da:	f043 0201 	orr.w	r2, r3, #1
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b7ee:	d901      	bls.n	800b7f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b7f0:	2303      	movs	r3, #3
 800b7f2:	e006      	b.n	800b802 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	691b      	ldr	r3, [r3, #16]
 800b7f8:	f003 0301 	and.w	r3, r3, #1
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d0f0      	beq.n	800b7e2 <USB_CoreReset+0x36>

  return HAL_OK;
 800b800:	2300      	movs	r3, #0
}
 800b802:	4618      	mov	r0, r3
 800b804:	3714      	adds	r7, #20
 800b806:	46bd      	mov	sp, r7
 800b808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80c:	4770      	bx	lr
	...

0800b810 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b084      	sub	sp, #16
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	460b      	mov	r3, r1
 800b81a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b81c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b820:	f002 fc98 	bl	800e154 <USBD_static_malloc>
 800b824:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d109      	bne.n	800b840 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	32b0      	adds	r2, #176	@ 0xb0
 800b836:	2100      	movs	r1, #0
 800b838:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b83c:	2302      	movs	r3, #2
 800b83e:	e0d4      	b.n	800b9ea <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b840:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b844:	2100      	movs	r1, #0
 800b846:	68f8      	ldr	r0, [r7, #12]
 800b848:	f002 fcc8 	bl	800e1dc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	32b0      	adds	r2, #176	@ 0xb0
 800b856:	68f9      	ldr	r1, [r7, #12]
 800b858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	32b0      	adds	r2, #176	@ 0xb0
 800b866:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	7c1b      	ldrb	r3, [r3, #16]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d138      	bne.n	800b8ea <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b878:	4b5e      	ldr	r3, [pc, #376]	@ (800b9f4 <USBD_CDC_Init+0x1e4>)
 800b87a:	7819      	ldrb	r1, [r3, #0]
 800b87c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b880:	2202      	movs	r2, #2
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f002 fb43 	bl	800df0e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b888:	4b5a      	ldr	r3, [pc, #360]	@ (800b9f4 <USBD_CDC_Init+0x1e4>)
 800b88a:	781b      	ldrb	r3, [r3, #0]
 800b88c:	f003 020f 	and.w	r2, r3, #15
 800b890:	6879      	ldr	r1, [r7, #4]
 800b892:	4613      	mov	r3, r2
 800b894:	009b      	lsls	r3, r3, #2
 800b896:	4413      	add	r3, r2
 800b898:	009b      	lsls	r3, r3, #2
 800b89a:	440b      	add	r3, r1
 800b89c:	3324      	adds	r3, #36	@ 0x24
 800b89e:	2201      	movs	r2, #1
 800b8a0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b8a2:	4b55      	ldr	r3, [pc, #340]	@ (800b9f8 <USBD_CDC_Init+0x1e8>)
 800b8a4:	7819      	ldrb	r1, [r3, #0]
 800b8a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b8aa:	2202      	movs	r2, #2
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f002 fb2e 	bl	800df0e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b8b2:	4b51      	ldr	r3, [pc, #324]	@ (800b9f8 <USBD_CDC_Init+0x1e8>)
 800b8b4:	781b      	ldrb	r3, [r3, #0]
 800b8b6:	f003 020f 	and.w	r2, r3, #15
 800b8ba:	6879      	ldr	r1, [r7, #4]
 800b8bc:	4613      	mov	r3, r2
 800b8be:	009b      	lsls	r3, r3, #2
 800b8c0:	4413      	add	r3, r2
 800b8c2:	009b      	lsls	r3, r3, #2
 800b8c4:	440b      	add	r3, r1
 800b8c6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b8ce:	4b4b      	ldr	r3, [pc, #300]	@ (800b9fc <USBD_CDC_Init+0x1ec>)
 800b8d0:	781b      	ldrb	r3, [r3, #0]
 800b8d2:	f003 020f 	and.w	r2, r3, #15
 800b8d6:	6879      	ldr	r1, [r7, #4]
 800b8d8:	4613      	mov	r3, r2
 800b8da:	009b      	lsls	r3, r3, #2
 800b8dc:	4413      	add	r3, r2
 800b8de:	009b      	lsls	r3, r3, #2
 800b8e0:	440b      	add	r3, r1
 800b8e2:	3326      	adds	r3, #38	@ 0x26
 800b8e4:	2210      	movs	r2, #16
 800b8e6:	801a      	strh	r2, [r3, #0]
 800b8e8:	e035      	b.n	800b956 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b8ea:	4b42      	ldr	r3, [pc, #264]	@ (800b9f4 <USBD_CDC_Init+0x1e4>)
 800b8ec:	7819      	ldrb	r1, [r3, #0]
 800b8ee:	2340      	movs	r3, #64	@ 0x40
 800b8f0:	2202      	movs	r2, #2
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f002 fb0b 	bl	800df0e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b8f8:	4b3e      	ldr	r3, [pc, #248]	@ (800b9f4 <USBD_CDC_Init+0x1e4>)
 800b8fa:	781b      	ldrb	r3, [r3, #0]
 800b8fc:	f003 020f 	and.w	r2, r3, #15
 800b900:	6879      	ldr	r1, [r7, #4]
 800b902:	4613      	mov	r3, r2
 800b904:	009b      	lsls	r3, r3, #2
 800b906:	4413      	add	r3, r2
 800b908:	009b      	lsls	r3, r3, #2
 800b90a:	440b      	add	r3, r1
 800b90c:	3324      	adds	r3, #36	@ 0x24
 800b90e:	2201      	movs	r2, #1
 800b910:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b912:	4b39      	ldr	r3, [pc, #228]	@ (800b9f8 <USBD_CDC_Init+0x1e8>)
 800b914:	7819      	ldrb	r1, [r3, #0]
 800b916:	2340      	movs	r3, #64	@ 0x40
 800b918:	2202      	movs	r2, #2
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f002 faf7 	bl	800df0e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b920:	4b35      	ldr	r3, [pc, #212]	@ (800b9f8 <USBD_CDC_Init+0x1e8>)
 800b922:	781b      	ldrb	r3, [r3, #0]
 800b924:	f003 020f 	and.w	r2, r3, #15
 800b928:	6879      	ldr	r1, [r7, #4]
 800b92a:	4613      	mov	r3, r2
 800b92c:	009b      	lsls	r3, r3, #2
 800b92e:	4413      	add	r3, r2
 800b930:	009b      	lsls	r3, r3, #2
 800b932:	440b      	add	r3, r1
 800b934:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b938:	2201      	movs	r2, #1
 800b93a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b93c:	4b2f      	ldr	r3, [pc, #188]	@ (800b9fc <USBD_CDC_Init+0x1ec>)
 800b93e:	781b      	ldrb	r3, [r3, #0]
 800b940:	f003 020f 	and.w	r2, r3, #15
 800b944:	6879      	ldr	r1, [r7, #4]
 800b946:	4613      	mov	r3, r2
 800b948:	009b      	lsls	r3, r3, #2
 800b94a:	4413      	add	r3, r2
 800b94c:	009b      	lsls	r3, r3, #2
 800b94e:	440b      	add	r3, r1
 800b950:	3326      	adds	r3, #38	@ 0x26
 800b952:	2210      	movs	r2, #16
 800b954:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b956:	4b29      	ldr	r3, [pc, #164]	@ (800b9fc <USBD_CDC_Init+0x1ec>)
 800b958:	7819      	ldrb	r1, [r3, #0]
 800b95a:	2308      	movs	r3, #8
 800b95c:	2203      	movs	r2, #3
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f002 fad5 	bl	800df0e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b964:	4b25      	ldr	r3, [pc, #148]	@ (800b9fc <USBD_CDC_Init+0x1ec>)
 800b966:	781b      	ldrb	r3, [r3, #0]
 800b968:	f003 020f 	and.w	r2, r3, #15
 800b96c:	6879      	ldr	r1, [r7, #4]
 800b96e:	4613      	mov	r3, r2
 800b970:	009b      	lsls	r3, r3, #2
 800b972:	4413      	add	r3, r2
 800b974:	009b      	lsls	r3, r3, #2
 800b976:	440b      	add	r3, r1
 800b978:	3324      	adds	r3, #36	@ 0x24
 800b97a:	2201      	movs	r2, #1
 800b97c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2200      	movs	r2, #0
 800b982:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b98c:	687a      	ldr	r2, [r7, #4]
 800b98e:	33b0      	adds	r3, #176	@ 0xb0
 800b990:	009b      	lsls	r3, r3, #2
 800b992:	4413      	add	r3, r2
 800b994:	685b      	ldr	r3, [r3, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	2200      	movs	r2, #0
 800b99e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d101      	bne.n	800b9b8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b9b4:	2302      	movs	r3, #2
 800b9b6:	e018      	b.n	800b9ea <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	7c1b      	ldrb	r3, [r3, #16]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d10a      	bne.n	800b9d6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b9c0:	4b0d      	ldr	r3, [pc, #52]	@ (800b9f8 <USBD_CDC_Init+0x1e8>)
 800b9c2:	7819      	ldrb	r1, [r3, #0]
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b9ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f002 fb8c 	bl	800e0ec <USBD_LL_PrepareReceive>
 800b9d4:	e008      	b.n	800b9e8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b9d6:	4b08      	ldr	r3, [pc, #32]	@ (800b9f8 <USBD_CDC_Init+0x1e8>)
 800b9d8:	7819      	ldrb	r1, [r3, #0]
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b9e0:	2340      	movs	r3, #64	@ 0x40
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f002 fb82 	bl	800e0ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b9e8:	2300      	movs	r3, #0
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3710      	adds	r7, #16
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
 800b9f2:	bf00      	nop
 800b9f4:	24000097 	.word	0x24000097
 800b9f8:	24000098 	.word	0x24000098
 800b9fc:	24000099 	.word	0x24000099

0800ba00 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b082      	sub	sp, #8
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	460b      	mov	r3, r1
 800ba0a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ba0c:	4b3a      	ldr	r3, [pc, #232]	@ (800baf8 <USBD_CDC_DeInit+0xf8>)
 800ba0e:	781b      	ldrb	r3, [r3, #0]
 800ba10:	4619      	mov	r1, r3
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f002 faa1 	bl	800df5a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ba18:	4b37      	ldr	r3, [pc, #220]	@ (800baf8 <USBD_CDC_DeInit+0xf8>)
 800ba1a:	781b      	ldrb	r3, [r3, #0]
 800ba1c:	f003 020f 	and.w	r2, r3, #15
 800ba20:	6879      	ldr	r1, [r7, #4]
 800ba22:	4613      	mov	r3, r2
 800ba24:	009b      	lsls	r3, r3, #2
 800ba26:	4413      	add	r3, r2
 800ba28:	009b      	lsls	r3, r3, #2
 800ba2a:	440b      	add	r3, r1
 800ba2c:	3324      	adds	r3, #36	@ 0x24
 800ba2e:	2200      	movs	r2, #0
 800ba30:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ba32:	4b32      	ldr	r3, [pc, #200]	@ (800bafc <USBD_CDC_DeInit+0xfc>)
 800ba34:	781b      	ldrb	r3, [r3, #0]
 800ba36:	4619      	mov	r1, r3
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f002 fa8e 	bl	800df5a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ba3e:	4b2f      	ldr	r3, [pc, #188]	@ (800bafc <USBD_CDC_DeInit+0xfc>)
 800ba40:	781b      	ldrb	r3, [r3, #0]
 800ba42:	f003 020f 	and.w	r2, r3, #15
 800ba46:	6879      	ldr	r1, [r7, #4]
 800ba48:	4613      	mov	r3, r2
 800ba4a:	009b      	lsls	r3, r3, #2
 800ba4c:	4413      	add	r3, r2
 800ba4e:	009b      	lsls	r3, r3, #2
 800ba50:	440b      	add	r3, r1
 800ba52:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ba56:	2200      	movs	r2, #0
 800ba58:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ba5a:	4b29      	ldr	r3, [pc, #164]	@ (800bb00 <USBD_CDC_DeInit+0x100>)
 800ba5c:	781b      	ldrb	r3, [r3, #0]
 800ba5e:	4619      	mov	r1, r3
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f002 fa7a 	bl	800df5a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ba66:	4b26      	ldr	r3, [pc, #152]	@ (800bb00 <USBD_CDC_DeInit+0x100>)
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	f003 020f 	and.w	r2, r3, #15
 800ba6e:	6879      	ldr	r1, [r7, #4]
 800ba70:	4613      	mov	r3, r2
 800ba72:	009b      	lsls	r3, r3, #2
 800ba74:	4413      	add	r3, r2
 800ba76:	009b      	lsls	r3, r3, #2
 800ba78:	440b      	add	r3, r1
 800ba7a:	3324      	adds	r3, #36	@ 0x24
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ba80:	4b1f      	ldr	r3, [pc, #124]	@ (800bb00 <USBD_CDC_DeInit+0x100>)
 800ba82:	781b      	ldrb	r3, [r3, #0]
 800ba84:	f003 020f 	and.w	r2, r3, #15
 800ba88:	6879      	ldr	r1, [r7, #4]
 800ba8a:	4613      	mov	r3, r2
 800ba8c:	009b      	lsls	r3, r3, #2
 800ba8e:	4413      	add	r3, r2
 800ba90:	009b      	lsls	r3, r3, #2
 800ba92:	440b      	add	r3, r1
 800ba94:	3326      	adds	r3, #38	@ 0x26
 800ba96:	2200      	movs	r2, #0
 800ba98:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	32b0      	adds	r2, #176	@ 0xb0
 800baa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d01f      	beq.n	800baec <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bab2:	687a      	ldr	r2, [r7, #4]
 800bab4:	33b0      	adds	r3, #176	@ 0xb0
 800bab6:	009b      	lsls	r3, r3, #2
 800bab8:	4413      	add	r3, r2
 800baba:	685b      	ldr	r3, [r3, #4]
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	32b0      	adds	r2, #176	@ 0xb0
 800baca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bace:	4618      	mov	r0, r3
 800bad0:	f002 fb4e 	bl	800e170 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	32b0      	adds	r2, #176	@ 0xb0
 800bade:	2100      	movs	r1, #0
 800bae0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2200      	movs	r2, #0
 800bae8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800baec:	2300      	movs	r3, #0
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3708      	adds	r7, #8
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}
 800baf6:	bf00      	nop
 800baf8:	24000097 	.word	0x24000097
 800bafc:	24000098 	.word	0x24000098
 800bb00:	24000099 	.word	0x24000099

0800bb04 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b086      	sub	sp, #24
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	32b0      	adds	r2, #176	@ 0xb0
 800bb18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb1c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bb22:	2300      	movs	r3, #0
 800bb24:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb26:	2300      	movs	r3, #0
 800bb28:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d101      	bne.n	800bb34 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800bb30:	2303      	movs	r3, #3
 800bb32:	e0bf      	b.n	800bcb4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	781b      	ldrb	r3, [r3, #0]
 800bb38:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d050      	beq.n	800bbe2 <USBD_CDC_Setup+0xde>
 800bb40:	2b20      	cmp	r3, #32
 800bb42:	f040 80af 	bne.w	800bca4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	88db      	ldrh	r3, [r3, #6]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d03a      	beq.n	800bbc4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	781b      	ldrb	r3, [r3, #0]
 800bb52:	b25b      	sxtb	r3, r3
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	da1b      	bge.n	800bb90 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bb5e:	687a      	ldr	r2, [r7, #4]
 800bb60:	33b0      	adds	r3, #176	@ 0xb0
 800bb62:	009b      	lsls	r3, r3, #2
 800bb64:	4413      	add	r3, r2
 800bb66:	685b      	ldr	r3, [r3, #4]
 800bb68:	689b      	ldr	r3, [r3, #8]
 800bb6a:	683a      	ldr	r2, [r7, #0]
 800bb6c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800bb6e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bb70:	683a      	ldr	r2, [r7, #0]
 800bb72:	88d2      	ldrh	r2, [r2, #6]
 800bb74:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	88db      	ldrh	r3, [r3, #6]
 800bb7a:	2b07      	cmp	r3, #7
 800bb7c:	bf28      	it	cs
 800bb7e:	2307      	movcs	r3, #7
 800bb80:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	89fa      	ldrh	r2, [r7, #14]
 800bb86:	4619      	mov	r1, r3
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f001 fd7d 	bl	800d688 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800bb8e:	e090      	b.n	800bcb2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	785a      	ldrb	r2, [r3, #1]
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	88db      	ldrh	r3, [r3, #6]
 800bb9e:	2b3f      	cmp	r3, #63	@ 0x3f
 800bba0:	d803      	bhi.n	800bbaa <USBD_CDC_Setup+0xa6>
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	88db      	ldrh	r3, [r3, #6]
 800bba6:	b2da      	uxtb	r2, r3
 800bba8:	e000      	b.n	800bbac <USBD_CDC_Setup+0xa8>
 800bbaa:	2240      	movs	r2, #64	@ 0x40
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800bbb2:	6939      	ldr	r1, [r7, #16]
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800bbba:	461a      	mov	r2, r3
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f001 fd8f 	bl	800d6e0 <USBD_CtlPrepareRx>
      break;
 800bbc2:	e076      	b.n	800bcb2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bbca:	687a      	ldr	r2, [r7, #4]
 800bbcc:	33b0      	adds	r3, #176	@ 0xb0
 800bbce:	009b      	lsls	r3, r3, #2
 800bbd0:	4413      	add	r3, r2
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	689b      	ldr	r3, [r3, #8]
 800bbd6:	683a      	ldr	r2, [r7, #0]
 800bbd8:	7850      	ldrb	r0, [r2, #1]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	6839      	ldr	r1, [r7, #0]
 800bbde:	4798      	blx	r3
      break;
 800bbe0:	e067      	b.n	800bcb2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	785b      	ldrb	r3, [r3, #1]
 800bbe6:	2b0b      	cmp	r3, #11
 800bbe8:	d851      	bhi.n	800bc8e <USBD_CDC_Setup+0x18a>
 800bbea:	a201      	add	r2, pc, #4	@ (adr r2, 800bbf0 <USBD_CDC_Setup+0xec>)
 800bbec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbf0:	0800bc21 	.word	0x0800bc21
 800bbf4:	0800bc9d 	.word	0x0800bc9d
 800bbf8:	0800bc8f 	.word	0x0800bc8f
 800bbfc:	0800bc8f 	.word	0x0800bc8f
 800bc00:	0800bc8f 	.word	0x0800bc8f
 800bc04:	0800bc8f 	.word	0x0800bc8f
 800bc08:	0800bc8f 	.word	0x0800bc8f
 800bc0c:	0800bc8f 	.word	0x0800bc8f
 800bc10:	0800bc8f 	.word	0x0800bc8f
 800bc14:	0800bc8f 	.word	0x0800bc8f
 800bc18:	0800bc4b 	.word	0x0800bc4b
 800bc1c:	0800bc75 	.word	0x0800bc75
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc26:	b2db      	uxtb	r3, r3
 800bc28:	2b03      	cmp	r3, #3
 800bc2a:	d107      	bne.n	800bc3c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bc2c:	f107 030a 	add.w	r3, r7, #10
 800bc30:	2202      	movs	r2, #2
 800bc32:	4619      	mov	r1, r3
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f001 fd27 	bl	800d688 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bc3a:	e032      	b.n	800bca2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bc3c:	6839      	ldr	r1, [r7, #0]
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f001 fca5 	bl	800d58e <USBD_CtlError>
            ret = USBD_FAIL;
 800bc44:	2303      	movs	r3, #3
 800bc46:	75fb      	strb	r3, [r7, #23]
          break;
 800bc48:	e02b      	b.n	800bca2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc50:	b2db      	uxtb	r3, r3
 800bc52:	2b03      	cmp	r3, #3
 800bc54:	d107      	bne.n	800bc66 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bc56:	f107 030d 	add.w	r3, r7, #13
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	4619      	mov	r1, r3
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f001 fd12 	bl	800d688 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bc64:	e01d      	b.n	800bca2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bc66:	6839      	ldr	r1, [r7, #0]
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f001 fc90 	bl	800d58e <USBD_CtlError>
            ret = USBD_FAIL;
 800bc6e:	2303      	movs	r3, #3
 800bc70:	75fb      	strb	r3, [r7, #23]
          break;
 800bc72:	e016      	b.n	800bca2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc7a:	b2db      	uxtb	r3, r3
 800bc7c:	2b03      	cmp	r3, #3
 800bc7e:	d00f      	beq.n	800bca0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800bc80:	6839      	ldr	r1, [r7, #0]
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f001 fc83 	bl	800d58e <USBD_CtlError>
            ret = USBD_FAIL;
 800bc88:	2303      	movs	r3, #3
 800bc8a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bc8c:	e008      	b.n	800bca0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bc8e:	6839      	ldr	r1, [r7, #0]
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f001 fc7c 	bl	800d58e <USBD_CtlError>
          ret = USBD_FAIL;
 800bc96:	2303      	movs	r3, #3
 800bc98:	75fb      	strb	r3, [r7, #23]
          break;
 800bc9a:	e002      	b.n	800bca2 <USBD_CDC_Setup+0x19e>
          break;
 800bc9c:	bf00      	nop
 800bc9e:	e008      	b.n	800bcb2 <USBD_CDC_Setup+0x1ae>
          break;
 800bca0:	bf00      	nop
      }
      break;
 800bca2:	e006      	b.n	800bcb2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800bca4:	6839      	ldr	r1, [r7, #0]
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f001 fc71 	bl	800d58e <USBD_CtlError>
      ret = USBD_FAIL;
 800bcac:	2303      	movs	r3, #3
 800bcae:	75fb      	strb	r3, [r7, #23]
      break;
 800bcb0:	bf00      	nop
  }

  return (uint8_t)ret;
 800bcb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3718      	adds	r7, #24
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}

0800bcbc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b084      	sub	sp, #16
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	460b      	mov	r3, r1
 800bcc6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bcce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	32b0      	adds	r2, #176	@ 0xb0
 800bcda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d101      	bne.n	800bce6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800bce2:	2303      	movs	r3, #3
 800bce4:	e065      	b.n	800bdb2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	32b0      	adds	r2, #176	@ 0xb0
 800bcf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcf4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bcf6:	78fb      	ldrb	r3, [r7, #3]
 800bcf8:	f003 020f 	and.w	r2, r3, #15
 800bcfc:	6879      	ldr	r1, [r7, #4]
 800bcfe:	4613      	mov	r3, r2
 800bd00:	009b      	lsls	r3, r3, #2
 800bd02:	4413      	add	r3, r2
 800bd04:	009b      	lsls	r3, r3, #2
 800bd06:	440b      	add	r3, r1
 800bd08:	3318      	adds	r3, #24
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d02f      	beq.n	800bd70 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800bd10:	78fb      	ldrb	r3, [r7, #3]
 800bd12:	f003 020f 	and.w	r2, r3, #15
 800bd16:	6879      	ldr	r1, [r7, #4]
 800bd18:	4613      	mov	r3, r2
 800bd1a:	009b      	lsls	r3, r3, #2
 800bd1c:	4413      	add	r3, r2
 800bd1e:	009b      	lsls	r3, r3, #2
 800bd20:	440b      	add	r3, r1
 800bd22:	3318      	adds	r3, #24
 800bd24:	681a      	ldr	r2, [r3, #0]
 800bd26:	78fb      	ldrb	r3, [r7, #3]
 800bd28:	f003 010f 	and.w	r1, r3, #15
 800bd2c:	68f8      	ldr	r0, [r7, #12]
 800bd2e:	460b      	mov	r3, r1
 800bd30:	00db      	lsls	r3, r3, #3
 800bd32:	440b      	add	r3, r1
 800bd34:	009b      	lsls	r3, r3, #2
 800bd36:	4403      	add	r3, r0
 800bd38:	331c      	adds	r3, #28
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	fbb2 f1f3 	udiv	r1, r2, r3
 800bd40:	fb01 f303 	mul.w	r3, r1, r3
 800bd44:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d112      	bne.n	800bd70 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800bd4a:	78fb      	ldrb	r3, [r7, #3]
 800bd4c:	f003 020f 	and.w	r2, r3, #15
 800bd50:	6879      	ldr	r1, [r7, #4]
 800bd52:	4613      	mov	r3, r2
 800bd54:	009b      	lsls	r3, r3, #2
 800bd56:	4413      	add	r3, r2
 800bd58:	009b      	lsls	r3, r3, #2
 800bd5a:	440b      	add	r3, r1
 800bd5c:	3318      	adds	r3, #24
 800bd5e:	2200      	movs	r2, #0
 800bd60:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bd62:	78f9      	ldrb	r1, [r7, #3]
 800bd64:	2300      	movs	r3, #0
 800bd66:	2200      	movs	r2, #0
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f002 f99e 	bl	800e0aa <USBD_LL_Transmit>
 800bd6e:	e01f      	b.n	800bdb0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	2200      	movs	r2, #0
 800bd74:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	33b0      	adds	r3, #176	@ 0xb0
 800bd82:	009b      	lsls	r3, r3, #2
 800bd84:	4413      	add	r3, r2
 800bd86:	685b      	ldr	r3, [r3, #4]
 800bd88:	691b      	ldr	r3, [r3, #16]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d010      	beq.n	800bdb0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bd94:	687a      	ldr	r2, [r7, #4]
 800bd96:	33b0      	adds	r3, #176	@ 0xb0
 800bd98:	009b      	lsls	r3, r3, #2
 800bd9a:	4413      	add	r3, r2
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	691b      	ldr	r3, [r3, #16]
 800bda0:	68ba      	ldr	r2, [r7, #8]
 800bda2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800bda6:	68ba      	ldr	r2, [r7, #8]
 800bda8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800bdac:	78fa      	ldrb	r2, [r7, #3]
 800bdae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bdb0:	2300      	movs	r3, #0
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3710      	adds	r7, #16
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}

0800bdba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bdba:	b580      	push	{r7, lr}
 800bdbc:	b084      	sub	sp, #16
 800bdbe:	af00      	add	r7, sp, #0
 800bdc0:	6078      	str	r0, [r7, #4]
 800bdc2:	460b      	mov	r3, r1
 800bdc4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	32b0      	adds	r2, #176	@ 0xb0
 800bdd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdd4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	32b0      	adds	r2, #176	@ 0xb0
 800bde0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d101      	bne.n	800bdec <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800bde8:	2303      	movs	r3, #3
 800bdea:	e01a      	b.n	800be22 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bdec:	78fb      	ldrb	r3, [r7, #3]
 800bdee:	4619      	mov	r1, r3
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f002 f99c 	bl	800e12e <USBD_LL_GetRxDataSize>
 800bdf6:	4602      	mov	r2, r0
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800be04:	687a      	ldr	r2, [r7, #4]
 800be06:	33b0      	adds	r3, #176	@ 0xb0
 800be08:	009b      	lsls	r3, r3, #2
 800be0a:	4413      	add	r3, r2
 800be0c:	685b      	ldr	r3, [r3, #4]
 800be0e:	68db      	ldr	r3, [r3, #12]
 800be10:	68fa      	ldr	r2, [r7, #12]
 800be12:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800be16:	68fa      	ldr	r2, [r7, #12]
 800be18:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800be1c:	4611      	mov	r1, r2
 800be1e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800be20:	2300      	movs	r3, #0
}
 800be22:	4618      	mov	r0, r3
 800be24:	3710      	adds	r7, #16
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}

0800be2a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800be2a:	b580      	push	{r7, lr}
 800be2c:	b084      	sub	sp, #16
 800be2e:	af00      	add	r7, sp, #0
 800be30:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	32b0      	adds	r2, #176	@ 0xb0
 800be3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be40:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d101      	bne.n	800be4c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800be48:	2303      	movs	r3, #3
 800be4a:	e024      	b.n	800be96 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800be52:	687a      	ldr	r2, [r7, #4]
 800be54:	33b0      	adds	r3, #176	@ 0xb0
 800be56:	009b      	lsls	r3, r3, #2
 800be58:	4413      	add	r3, r2
 800be5a:	685b      	ldr	r3, [r3, #4]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d019      	beq.n	800be94 <USBD_CDC_EP0_RxReady+0x6a>
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800be66:	2bff      	cmp	r3, #255	@ 0xff
 800be68:	d014      	beq.n	800be94 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800be70:	687a      	ldr	r2, [r7, #4]
 800be72:	33b0      	adds	r3, #176	@ 0xb0
 800be74:	009b      	lsls	r3, r3, #2
 800be76:	4413      	add	r3, r2
 800be78:	685b      	ldr	r3, [r3, #4]
 800be7a:	689b      	ldr	r3, [r3, #8]
 800be7c:	68fa      	ldr	r2, [r7, #12]
 800be7e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800be82:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800be84:	68fa      	ldr	r2, [r7, #12]
 800be86:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800be8a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	22ff      	movs	r2, #255	@ 0xff
 800be90:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800be94:	2300      	movs	r3, #0
}
 800be96:	4618      	mov	r0, r3
 800be98:	3710      	adds	r7, #16
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}
	...

0800bea0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b086      	sub	sp, #24
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bea8:	2182      	movs	r1, #130	@ 0x82
 800beaa:	4818      	ldr	r0, [pc, #96]	@ (800bf0c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800beac:	f000 fd0f 	bl	800c8ce <USBD_GetEpDesc>
 800beb0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800beb2:	2101      	movs	r1, #1
 800beb4:	4815      	ldr	r0, [pc, #84]	@ (800bf0c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800beb6:	f000 fd0a 	bl	800c8ce <USBD_GetEpDesc>
 800beba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bebc:	2181      	movs	r1, #129	@ 0x81
 800bebe:	4813      	ldr	r0, [pc, #76]	@ (800bf0c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bec0:	f000 fd05 	bl	800c8ce <USBD_GetEpDesc>
 800bec4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d002      	beq.n	800bed2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	2210      	movs	r2, #16
 800bed0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bed2:	693b      	ldr	r3, [r7, #16]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d006      	beq.n	800bee6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bed8:	693b      	ldr	r3, [r7, #16]
 800beda:	2200      	movs	r2, #0
 800bedc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bee0:	711a      	strb	r2, [r3, #4]
 800bee2:	2200      	movs	r2, #0
 800bee4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d006      	beq.n	800befa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2200      	movs	r2, #0
 800bef0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bef4:	711a      	strb	r2, [r3, #4]
 800bef6:	2200      	movs	r2, #0
 800bef8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2243      	movs	r2, #67	@ 0x43
 800befe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bf00:	4b02      	ldr	r3, [pc, #8]	@ (800bf0c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	3718      	adds	r7, #24
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}
 800bf0a:	bf00      	nop
 800bf0c:	24000054 	.word	0x24000054

0800bf10 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b086      	sub	sp, #24
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bf18:	2182      	movs	r1, #130	@ 0x82
 800bf1a:	4818      	ldr	r0, [pc, #96]	@ (800bf7c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bf1c:	f000 fcd7 	bl	800c8ce <USBD_GetEpDesc>
 800bf20:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bf22:	2101      	movs	r1, #1
 800bf24:	4815      	ldr	r0, [pc, #84]	@ (800bf7c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bf26:	f000 fcd2 	bl	800c8ce <USBD_GetEpDesc>
 800bf2a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bf2c:	2181      	movs	r1, #129	@ 0x81
 800bf2e:	4813      	ldr	r0, [pc, #76]	@ (800bf7c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bf30:	f000 fccd 	bl	800c8ce <USBD_GetEpDesc>
 800bf34:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d002      	beq.n	800bf42 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800bf3c:	697b      	ldr	r3, [r7, #20]
 800bf3e:	2210      	movs	r2, #16
 800bf40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d006      	beq.n	800bf56 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bf48:	693b      	ldr	r3, [r7, #16]
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	711a      	strb	r2, [r3, #4]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	f042 0202 	orr.w	r2, r2, #2
 800bf54:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d006      	beq.n	800bf6a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	2200      	movs	r2, #0
 800bf60:	711a      	strb	r2, [r3, #4]
 800bf62:	2200      	movs	r2, #0
 800bf64:	f042 0202 	orr.w	r2, r2, #2
 800bf68:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2243      	movs	r2, #67	@ 0x43
 800bf6e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bf70:	4b02      	ldr	r3, [pc, #8]	@ (800bf7c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3718      	adds	r7, #24
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	bf00      	nop
 800bf7c:	24000054 	.word	0x24000054

0800bf80 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b086      	sub	sp, #24
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bf88:	2182      	movs	r1, #130	@ 0x82
 800bf8a:	4818      	ldr	r0, [pc, #96]	@ (800bfec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bf8c:	f000 fc9f 	bl	800c8ce <USBD_GetEpDesc>
 800bf90:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bf92:	2101      	movs	r1, #1
 800bf94:	4815      	ldr	r0, [pc, #84]	@ (800bfec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bf96:	f000 fc9a 	bl	800c8ce <USBD_GetEpDesc>
 800bf9a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bf9c:	2181      	movs	r1, #129	@ 0x81
 800bf9e:	4813      	ldr	r0, [pc, #76]	@ (800bfec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bfa0:	f000 fc95 	bl	800c8ce <USBD_GetEpDesc>
 800bfa4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d002      	beq.n	800bfb2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	2210      	movs	r2, #16
 800bfb0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bfb2:	693b      	ldr	r3, [r7, #16]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d006      	beq.n	800bfc6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bfb8:	693b      	ldr	r3, [r7, #16]
 800bfba:	2200      	movs	r2, #0
 800bfbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bfc0:	711a      	strb	r2, [r3, #4]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d006      	beq.n	800bfda <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	2200      	movs	r2, #0
 800bfd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bfd4:	711a      	strb	r2, [r3, #4]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2243      	movs	r2, #67	@ 0x43
 800bfde:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bfe0:	4b02      	ldr	r3, [pc, #8]	@ (800bfec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3718      	adds	r7, #24
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}
 800bfea:	bf00      	nop
 800bfec:	24000054 	.word	0x24000054

0800bff0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bff0:	b480      	push	{r7}
 800bff2:	b083      	sub	sp, #12
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	220a      	movs	r2, #10
 800bffc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bffe:	4b03      	ldr	r3, [pc, #12]	@ (800c00c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c000:	4618      	mov	r0, r3
 800c002:	370c      	adds	r7, #12
 800c004:	46bd      	mov	sp, r7
 800c006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00a:	4770      	bx	lr
 800c00c:	24000010 	.word	0x24000010

0800c010 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c010:	b480      	push	{r7}
 800c012:	b083      	sub	sp, #12
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
 800c018:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d101      	bne.n	800c024 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c020:	2303      	movs	r3, #3
 800c022:	e009      	b.n	800c038 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c02a:	687a      	ldr	r2, [r7, #4]
 800c02c:	33b0      	adds	r3, #176	@ 0xb0
 800c02e:	009b      	lsls	r3, r3, #2
 800c030:	4413      	add	r3, r2
 800c032:	683a      	ldr	r2, [r7, #0]
 800c034:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c036:	2300      	movs	r3, #0
}
 800c038:	4618      	mov	r0, r3
 800c03a:	370c      	adds	r7, #12
 800c03c:	46bd      	mov	sp, r7
 800c03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c042:	4770      	bx	lr

0800c044 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c044:	b480      	push	{r7}
 800c046:	b087      	sub	sp, #28
 800c048:	af00      	add	r7, sp, #0
 800c04a:	60f8      	str	r0, [r7, #12]
 800c04c:	60b9      	str	r1, [r7, #8]
 800c04e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	32b0      	adds	r2, #176	@ 0xb0
 800c05a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c05e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c060:	697b      	ldr	r3, [r7, #20]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d101      	bne.n	800c06a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c066:	2303      	movs	r3, #3
 800c068:	e008      	b.n	800c07c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c06a:	697b      	ldr	r3, [r7, #20]
 800c06c:	68ba      	ldr	r2, [r7, #8]
 800c06e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c072:	697b      	ldr	r3, [r7, #20]
 800c074:	687a      	ldr	r2, [r7, #4]
 800c076:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800c07a:	2300      	movs	r3, #0
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	371c      	adds	r7, #28
 800c080:	46bd      	mov	sp, r7
 800c082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c086:	4770      	bx	lr

0800c088 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c088:	b480      	push	{r7}
 800c08a:	b085      	sub	sp, #20
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	32b0      	adds	r2, #176	@ 0xb0
 800c09c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d101      	bne.n	800c0ac <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c0a8:	2303      	movs	r3, #3
 800c0aa:	e004      	b.n	800c0b6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	683a      	ldr	r2, [r7, #0]
 800c0b0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800c0b4:	2300      	movs	r3, #0
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3714      	adds	r7, #20
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c0:	4770      	bx	lr
	...

0800c0c4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b084      	sub	sp, #16
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	32b0      	adds	r2, #176	@ 0xb0
 800c0d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0da:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	32b0      	adds	r2, #176	@ 0xb0
 800c0e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d101      	bne.n	800c0f2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c0ee:	2303      	movs	r3, #3
 800c0f0:	e018      	b.n	800c124 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	7c1b      	ldrb	r3, [r3, #16]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d10a      	bne.n	800c110 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c0fa:	4b0c      	ldr	r3, [pc, #48]	@ (800c12c <USBD_CDC_ReceivePacket+0x68>)
 800c0fc:	7819      	ldrb	r1, [r3, #0]
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c104:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f001 ffef 	bl	800e0ec <USBD_LL_PrepareReceive>
 800c10e:	e008      	b.n	800c122 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c110:	4b06      	ldr	r3, [pc, #24]	@ (800c12c <USBD_CDC_ReceivePacket+0x68>)
 800c112:	7819      	ldrb	r1, [r3, #0]
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c11a:	2340      	movs	r3, #64	@ 0x40
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f001 ffe5 	bl	800e0ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c122:	2300      	movs	r3, #0
}
 800c124:	4618      	mov	r0, r3
 800c126:	3710      	adds	r7, #16
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}
 800c12c:	24000098 	.word	0x24000098

0800c130 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b086      	sub	sp, #24
 800c134:	af00      	add	r7, sp, #0
 800c136:	60f8      	str	r0, [r7, #12]
 800c138:	60b9      	str	r1, [r7, #8]
 800c13a:	4613      	mov	r3, r2
 800c13c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d101      	bne.n	800c148 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c144:	2303      	movs	r3, #3
 800c146:	e01f      	b.n	800c188 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	2200      	movs	r2, #0
 800c14c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	2200      	movs	r2, #0
 800c154:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	2200      	movs	r2, #0
 800c15c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d003      	beq.n	800c16e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	68ba      	ldr	r2, [r7, #8]
 800c16a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	2201      	movs	r2, #1
 800c172:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	79fa      	ldrb	r2, [r7, #7]
 800c17a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c17c:	68f8      	ldr	r0, [r7, #12]
 800c17e:	f001 fe59 	bl	800de34 <USBD_LL_Init>
 800c182:	4603      	mov	r3, r0
 800c184:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c186:	7dfb      	ldrb	r3, [r7, #23]
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3718      	adds	r7, #24
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b084      	sub	sp, #16
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
 800c198:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c19a:	2300      	movs	r3, #0
 800c19c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d101      	bne.n	800c1a8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c1a4:	2303      	movs	r3, #3
 800c1a6:	e025      	b.n	800c1f4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	683a      	ldr	r2, [r7, #0]
 800c1ac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	32ae      	adds	r2, #174	@ 0xae
 800c1ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d00f      	beq.n	800c1e4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	32ae      	adds	r2, #174	@ 0xae
 800c1ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1d4:	f107 020e 	add.w	r2, r7, #14
 800c1d8:	4610      	mov	r0, r2
 800c1da:	4798      	blx	r3
 800c1dc:	4602      	mov	r2, r0
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c1ea:	1c5a      	adds	r2, r3, #1
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c1f2:	2300      	movs	r3, #0
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3710      	adds	r7, #16
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}

0800c1fc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b082      	sub	sp, #8
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f001 fe67 	bl	800ded8 <USBD_LL_Start>
 800c20a:	4603      	mov	r3, r0
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3708      	adds	r7, #8
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}

0800c214 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c214:	b480      	push	{r7}
 800c216:	b083      	sub	sp, #12
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c21c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c21e:	4618      	mov	r0, r3
 800c220:	370c      	adds	r7, #12
 800c222:	46bd      	mov	sp, r7
 800c224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c228:	4770      	bx	lr

0800c22a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c22a:	b580      	push	{r7, lr}
 800c22c:	b084      	sub	sp, #16
 800c22e:	af00      	add	r7, sp, #0
 800c230:	6078      	str	r0, [r7, #4]
 800c232:	460b      	mov	r3, r1
 800c234:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c236:	2300      	movs	r3, #0
 800c238:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c240:	2b00      	cmp	r3, #0
 800c242:	d009      	beq.n	800c258 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	78fa      	ldrb	r2, [r7, #3]
 800c24e:	4611      	mov	r1, r2
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	4798      	blx	r3
 800c254:	4603      	mov	r3, r0
 800c256:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c258:	7bfb      	ldrb	r3, [r7, #15]
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	3710      	adds	r7, #16
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}

0800c262 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c262:	b580      	push	{r7, lr}
 800c264:	b084      	sub	sp, #16
 800c266:	af00      	add	r7, sp, #0
 800c268:	6078      	str	r0, [r7, #4]
 800c26a:	460b      	mov	r3, r1
 800c26c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c26e:	2300      	movs	r3, #0
 800c270:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c278:	685b      	ldr	r3, [r3, #4]
 800c27a:	78fa      	ldrb	r2, [r7, #3]
 800c27c:	4611      	mov	r1, r2
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	4798      	blx	r3
 800c282:	4603      	mov	r3, r0
 800c284:	2b00      	cmp	r3, #0
 800c286:	d001      	beq.n	800c28c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c288:	2303      	movs	r3, #3
 800c28a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c28c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c28e:	4618      	mov	r0, r3
 800c290:	3710      	adds	r7, #16
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}

0800c296 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c296:	b580      	push	{r7, lr}
 800c298:	b084      	sub	sp, #16
 800c29a:	af00      	add	r7, sp, #0
 800c29c:	6078      	str	r0, [r7, #4]
 800c29e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c2a6:	6839      	ldr	r1, [r7, #0]
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f001 f936 	bl	800d51a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2201      	movs	r2, #1
 800c2b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c2bc:	461a      	mov	r2, r3
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c2ca:	f003 031f 	and.w	r3, r3, #31
 800c2ce:	2b02      	cmp	r3, #2
 800c2d0:	d01a      	beq.n	800c308 <USBD_LL_SetupStage+0x72>
 800c2d2:	2b02      	cmp	r3, #2
 800c2d4:	d822      	bhi.n	800c31c <USBD_LL_SetupStage+0x86>
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d002      	beq.n	800c2e0 <USBD_LL_SetupStage+0x4a>
 800c2da:	2b01      	cmp	r3, #1
 800c2dc:	d00a      	beq.n	800c2f4 <USBD_LL_SetupStage+0x5e>
 800c2de:	e01d      	b.n	800c31c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c2e6:	4619      	mov	r1, r3
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f000 fb63 	bl	800c9b4 <USBD_StdDevReq>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	73fb      	strb	r3, [r7, #15]
      break;
 800c2f2:	e020      	b.n	800c336 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c2fa:	4619      	mov	r1, r3
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f000 fbcb 	bl	800ca98 <USBD_StdItfReq>
 800c302:	4603      	mov	r3, r0
 800c304:	73fb      	strb	r3, [r7, #15]
      break;
 800c306:	e016      	b.n	800c336 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c30e:	4619      	mov	r1, r3
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f000 fc2d 	bl	800cb70 <USBD_StdEPReq>
 800c316:	4603      	mov	r3, r0
 800c318:	73fb      	strb	r3, [r7, #15]
      break;
 800c31a:	e00c      	b.n	800c336 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c322:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c326:	b2db      	uxtb	r3, r3
 800c328:	4619      	mov	r1, r3
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f001 fe34 	bl	800df98 <USBD_LL_StallEP>
 800c330:	4603      	mov	r3, r0
 800c332:	73fb      	strb	r3, [r7, #15]
      break;
 800c334:	bf00      	nop
  }

  return ret;
 800c336:	7bfb      	ldrb	r3, [r7, #15]
}
 800c338:	4618      	mov	r0, r3
 800c33a:	3710      	adds	r7, #16
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}

0800c340 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b086      	sub	sp, #24
 800c344:	af00      	add	r7, sp, #0
 800c346:	60f8      	str	r0, [r7, #12]
 800c348:	460b      	mov	r3, r1
 800c34a:	607a      	str	r2, [r7, #4]
 800c34c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c34e:	2300      	movs	r3, #0
 800c350:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c352:	7afb      	ldrb	r3, [r7, #11]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d16e      	bne.n	800c436 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c35e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c366:	2b03      	cmp	r3, #3
 800c368:	f040 8098 	bne.w	800c49c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c36c:	693b      	ldr	r3, [r7, #16]
 800c36e:	689a      	ldr	r2, [r3, #8]
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	68db      	ldr	r3, [r3, #12]
 800c374:	429a      	cmp	r2, r3
 800c376:	d913      	bls.n	800c3a0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c378:	693b      	ldr	r3, [r7, #16]
 800c37a:	689a      	ldr	r2, [r3, #8]
 800c37c:	693b      	ldr	r3, [r7, #16]
 800c37e:	68db      	ldr	r3, [r3, #12]
 800c380:	1ad2      	subs	r2, r2, r3
 800c382:	693b      	ldr	r3, [r7, #16]
 800c384:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	68da      	ldr	r2, [r3, #12]
 800c38a:	693b      	ldr	r3, [r7, #16]
 800c38c:	689b      	ldr	r3, [r3, #8]
 800c38e:	4293      	cmp	r3, r2
 800c390:	bf28      	it	cs
 800c392:	4613      	movcs	r3, r2
 800c394:	461a      	mov	r2, r3
 800c396:	6879      	ldr	r1, [r7, #4]
 800c398:	68f8      	ldr	r0, [r7, #12]
 800c39a:	f001 f9be 	bl	800d71a <USBD_CtlContinueRx>
 800c39e:	e07d      	b.n	800c49c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c3a6:	f003 031f 	and.w	r3, r3, #31
 800c3aa:	2b02      	cmp	r3, #2
 800c3ac:	d014      	beq.n	800c3d8 <USBD_LL_DataOutStage+0x98>
 800c3ae:	2b02      	cmp	r3, #2
 800c3b0:	d81d      	bhi.n	800c3ee <USBD_LL_DataOutStage+0xae>
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d002      	beq.n	800c3bc <USBD_LL_DataOutStage+0x7c>
 800c3b6:	2b01      	cmp	r3, #1
 800c3b8:	d003      	beq.n	800c3c2 <USBD_LL_DataOutStage+0x82>
 800c3ba:	e018      	b.n	800c3ee <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c3bc:	2300      	movs	r3, #0
 800c3be:	75bb      	strb	r3, [r7, #22]
            break;
 800c3c0:	e018      	b.n	800c3f4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c3c8:	b2db      	uxtb	r3, r3
 800c3ca:	4619      	mov	r1, r3
 800c3cc:	68f8      	ldr	r0, [r7, #12]
 800c3ce:	f000 fa64 	bl	800c89a <USBD_CoreFindIF>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	75bb      	strb	r3, [r7, #22]
            break;
 800c3d6:	e00d      	b.n	800c3f4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c3de:	b2db      	uxtb	r3, r3
 800c3e0:	4619      	mov	r1, r3
 800c3e2:	68f8      	ldr	r0, [r7, #12]
 800c3e4:	f000 fa66 	bl	800c8b4 <USBD_CoreFindEP>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	75bb      	strb	r3, [r7, #22]
            break;
 800c3ec:	e002      	b.n	800c3f4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	75bb      	strb	r3, [r7, #22]
            break;
 800c3f2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c3f4:	7dbb      	ldrb	r3, [r7, #22]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d119      	bne.n	800c42e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c400:	b2db      	uxtb	r3, r3
 800c402:	2b03      	cmp	r3, #3
 800c404:	d113      	bne.n	800c42e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c406:	7dba      	ldrb	r2, [r7, #22]
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	32ae      	adds	r2, #174	@ 0xae
 800c40c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c410:	691b      	ldr	r3, [r3, #16]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d00b      	beq.n	800c42e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c416:	7dba      	ldrb	r2, [r7, #22]
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c41e:	7dba      	ldrb	r2, [r7, #22]
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	32ae      	adds	r2, #174	@ 0xae
 800c424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c428:	691b      	ldr	r3, [r3, #16]
 800c42a:	68f8      	ldr	r0, [r7, #12]
 800c42c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c42e:	68f8      	ldr	r0, [r7, #12]
 800c430:	f001 f984 	bl	800d73c <USBD_CtlSendStatus>
 800c434:	e032      	b.n	800c49c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c436:	7afb      	ldrb	r3, [r7, #11]
 800c438:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c43c:	b2db      	uxtb	r3, r3
 800c43e:	4619      	mov	r1, r3
 800c440:	68f8      	ldr	r0, [r7, #12]
 800c442:	f000 fa37 	bl	800c8b4 <USBD_CoreFindEP>
 800c446:	4603      	mov	r3, r0
 800c448:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c44a:	7dbb      	ldrb	r3, [r7, #22]
 800c44c:	2bff      	cmp	r3, #255	@ 0xff
 800c44e:	d025      	beq.n	800c49c <USBD_LL_DataOutStage+0x15c>
 800c450:	7dbb      	ldrb	r3, [r7, #22]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d122      	bne.n	800c49c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c45c:	b2db      	uxtb	r3, r3
 800c45e:	2b03      	cmp	r3, #3
 800c460:	d117      	bne.n	800c492 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c462:	7dba      	ldrb	r2, [r7, #22]
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	32ae      	adds	r2, #174	@ 0xae
 800c468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c46c:	699b      	ldr	r3, [r3, #24]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d00f      	beq.n	800c492 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c472:	7dba      	ldrb	r2, [r7, #22]
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c47a:	7dba      	ldrb	r2, [r7, #22]
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	32ae      	adds	r2, #174	@ 0xae
 800c480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c484:	699b      	ldr	r3, [r3, #24]
 800c486:	7afa      	ldrb	r2, [r7, #11]
 800c488:	4611      	mov	r1, r2
 800c48a:	68f8      	ldr	r0, [r7, #12]
 800c48c:	4798      	blx	r3
 800c48e:	4603      	mov	r3, r0
 800c490:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c492:	7dfb      	ldrb	r3, [r7, #23]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d001      	beq.n	800c49c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c498:	7dfb      	ldrb	r3, [r7, #23]
 800c49a:	e000      	b.n	800c49e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c49c:	2300      	movs	r3, #0
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	3718      	adds	r7, #24
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}

0800c4a6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c4a6:	b580      	push	{r7, lr}
 800c4a8:	b086      	sub	sp, #24
 800c4aa:	af00      	add	r7, sp, #0
 800c4ac:	60f8      	str	r0, [r7, #12]
 800c4ae:	460b      	mov	r3, r1
 800c4b0:	607a      	str	r2, [r7, #4]
 800c4b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c4b4:	7afb      	ldrb	r3, [r7, #11]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d16f      	bne.n	800c59a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	3314      	adds	r3, #20
 800c4be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c4c6:	2b02      	cmp	r3, #2
 800c4c8:	d15a      	bne.n	800c580 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	689a      	ldr	r2, [r3, #8]
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	68db      	ldr	r3, [r3, #12]
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	d914      	bls.n	800c500 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	689a      	ldr	r2, [r3, #8]
 800c4da:	693b      	ldr	r3, [r7, #16]
 800c4dc:	68db      	ldr	r3, [r3, #12]
 800c4de:	1ad2      	subs	r2, r2, r3
 800c4e0:	693b      	ldr	r3, [r7, #16]
 800c4e2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	689b      	ldr	r3, [r3, #8]
 800c4e8:	461a      	mov	r2, r3
 800c4ea:	6879      	ldr	r1, [r7, #4]
 800c4ec:	68f8      	ldr	r0, [r7, #12]
 800c4ee:	f001 f8e6 	bl	800d6be <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	2100      	movs	r1, #0
 800c4f8:	68f8      	ldr	r0, [r7, #12]
 800c4fa:	f001 fdf7 	bl	800e0ec <USBD_LL_PrepareReceive>
 800c4fe:	e03f      	b.n	800c580 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c500:	693b      	ldr	r3, [r7, #16]
 800c502:	68da      	ldr	r2, [r3, #12]
 800c504:	693b      	ldr	r3, [r7, #16]
 800c506:	689b      	ldr	r3, [r3, #8]
 800c508:	429a      	cmp	r2, r3
 800c50a:	d11c      	bne.n	800c546 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c50c:	693b      	ldr	r3, [r7, #16]
 800c50e:	685a      	ldr	r2, [r3, #4]
 800c510:	693b      	ldr	r3, [r7, #16]
 800c512:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c514:	429a      	cmp	r2, r3
 800c516:	d316      	bcc.n	800c546 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c518:	693b      	ldr	r3, [r7, #16]
 800c51a:	685a      	ldr	r2, [r3, #4]
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c522:	429a      	cmp	r2, r3
 800c524:	d20f      	bcs.n	800c546 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c526:	2200      	movs	r2, #0
 800c528:	2100      	movs	r1, #0
 800c52a:	68f8      	ldr	r0, [r7, #12]
 800c52c:	f001 f8c7 	bl	800d6be <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	2200      	movs	r2, #0
 800c534:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c538:	2300      	movs	r3, #0
 800c53a:	2200      	movs	r2, #0
 800c53c:	2100      	movs	r1, #0
 800c53e:	68f8      	ldr	r0, [r7, #12]
 800c540:	f001 fdd4 	bl	800e0ec <USBD_LL_PrepareReceive>
 800c544:	e01c      	b.n	800c580 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c54c:	b2db      	uxtb	r3, r3
 800c54e:	2b03      	cmp	r3, #3
 800c550:	d10f      	bne.n	800c572 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c558:	68db      	ldr	r3, [r3, #12]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d009      	beq.n	800c572 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	2200      	movs	r2, #0
 800c562:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c56c:	68db      	ldr	r3, [r3, #12]
 800c56e:	68f8      	ldr	r0, [r7, #12]
 800c570:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c572:	2180      	movs	r1, #128	@ 0x80
 800c574:	68f8      	ldr	r0, [r7, #12]
 800c576:	f001 fd0f 	bl	800df98 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c57a:	68f8      	ldr	r0, [r7, #12]
 800c57c:	f001 f8f1 	bl	800d762 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c586:	2b00      	cmp	r3, #0
 800c588:	d03a      	beq.n	800c600 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c58a:	68f8      	ldr	r0, [r7, #12]
 800c58c:	f7ff fe42 	bl	800c214 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	2200      	movs	r2, #0
 800c594:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c598:	e032      	b.n	800c600 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c59a:	7afb      	ldrb	r3, [r7, #11]
 800c59c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c5a0:	b2db      	uxtb	r3, r3
 800c5a2:	4619      	mov	r1, r3
 800c5a4:	68f8      	ldr	r0, [r7, #12]
 800c5a6:	f000 f985 	bl	800c8b4 <USBD_CoreFindEP>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c5ae:	7dfb      	ldrb	r3, [r7, #23]
 800c5b0:	2bff      	cmp	r3, #255	@ 0xff
 800c5b2:	d025      	beq.n	800c600 <USBD_LL_DataInStage+0x15a>
 800c5b4:	7dfb      	ldrb	r3, [r7, #23]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d122      	bne.n	800c600 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5c0:	b2db      	uxtb	r3, r3
 800c5c2:	2b03      	cmp	r3, #3
 800c5c4:	d11c      	bne.n	800c600 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c5c6:	7dfa      	ldrb	r2, [r7, #23]
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	32ae      	adds	r2, #174	@ 0xae
 800c5cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5d0:	695b      	ldr	r3, [r3, #20]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d014      	beq.n	800c600 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c5d6:	7dfa      	ldrb	r2, [r7, #23]
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c5de:	7dfa      	ldrb	r2, [r7, #23]
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	32ae      	adds	r2, #174	@ 0xae
 800c5e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5e8:	695b      	ldr	r3, [r3, #20]
 800c5ea:	7afa      	ldrb	r2, [r7, #11]
 800c5ec:	4611      	mov	r1, r2
 800c5ee:	68f8      	ldr	r0, [r7, #12]
 800c5f0:	4798      	blx	r3
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c5f6:	7dbb      	ldrb	r3, [r7, #22]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d001      	beq.n	800c600 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c5fc:	7dbb      	ldrb	r3, [r7, #22]
 800c5fe:	e000      	b.n	800c602 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c600:	2300      	movs	r3, #0
}
 800c602:	4618      	mov	r0, r3
 800c604:	3718      	adds	r7, #24
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}

0800c60a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c60a:	b580      	push	{r7, lr}
 800c60c:	b084      	sub	sp, #16
 800c60e:	af00      	add	r7, sp, #0
 800c610:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c612:	2300      	movs	r3, #0
 800c614:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2201      	movs	r2, #1
 800c61a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2200      	movs	r2, #0
 800c622:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2200      	movs	r2, #0
 800c62a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2200      	movs	r2, #0
 800c630:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2200      	movs	r2, #0
 800c638:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c642:	2b00      	cmp	r3, #0
 800c644:	d014      	beq.n	800c670 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c64c:	685b      	ldr	r3, [r3, #4]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d00e      	beq.n	800c670 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c658:	685b      	ldr	r3, [r3, #4]
 800c65a:	687a      	ldr	r2, [r7, #4]
 800c65c:	6852      	ldr	r2, [r2, #4]
 800c65e:	b2d2      	uxtb	r2, r2
 800c660:	4611      	mov	r1, r2
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	4798      	blx	r3
 800c666:	4603      	mov	r3, r0
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d001      	beq.n	800c670 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c66c:	2303      	movs	r3, #3
 800c66e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c670:	2340      	movs	r3, #64	@ 0x40
 800c672:	2200      	movs	r2, #0
 800c674:	2100      	movs	r1, #0
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f001 fc49 	bl	800df0e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2201      	movs	r2, #1
 800c680:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2240      	movs	r2, #64	@ 0x40
 800c688:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c68c:	2340      	movs	r3, #64	@ 0x40
 800c68e:	2200      	movs	r2, #0
 800c690:	2180      	movs	r1, #128	@ 0x80
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f001 fc3b 	bl	800df0e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2201      	movs	r2, #1
 800c69c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2240      	movs	r2, #64	@ 0x40
 800c6a2:	621a      	str	r2, [r3, #32]

  return ret;
 800c6a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	3710      	adds	r7, #16
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}

0800c6ae <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c6ae:	b480      	push	{r7}
 800c6b0:	b083      	sub	sp, #12
 800c6b2:	af00      	add	r7, sp, #0
 800c6b4:	6078      	str	r0, [r7, #4]
 800c6b6:	460b      	mov	r3, r1
 800c6b8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	78fa      	ldrb	r2, [r7, #3]
 800c6be:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c6c0:	2300      	movs	r3, #0
}
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	370c      	adds	r7, #12
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6cc:	4770      	bx	lr

0800c6ce <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c6ce:	b480      	push	{r7}
 800c6d0:	b083      	sub	sp, #12
 800c6d2:	af00      	add	r7, sp, #0
 800c6d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6dc:	b2db      	uxtb	r3, r3
 800c6de:	2b04      	cmp	r3, #4
 800c6e0:	d006      	beq.n	800c6f0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6e8:	b2da      	uxtb	r2, r3
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2204      	movs	r2, #4
 800c6f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c6f8:	2300      	movs	r3, #0
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	370c      	adds	r7, #12
 800c6fe:	46bd      	mov	sp, r7
 800c700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c704:	4770      	bx	lr

0800c706 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c706:	b480      	push	{r7}
 800c708:	b083      	sub	sp, #12
 800c70a:	af00      	add	r7, sp, #0
 800c70c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c714:	b2db      	uxtb	r3, r3
 800c716:	2b04      	cmp	r3, #4
 800c718:	d106      	bne.n	800c728 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c720:	b2da      	uxtb	r2, r3
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c728:	2300      	movs	r3, #0
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	370c      	adds	r7, #12
 800c72e:	46bd      	mov	sp, r7
 800c730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c734:	4770      	bx	lr

0800c736 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c736:	b580      	push	{r7, lr}
 800c738:	b082      	sub	sp, #8
 800c73a:	af00      	add	r7, sp, #0
 800c73c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c744:	b2db      	uxtb	r3, r3
 800c746:	2b03      	cmp	r3, #3
 800c748:	d110      	bne.n	800c76c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c750:	2b00      	cmp	r3, #0
 800c752:	d00b      	beq.n	800c76c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c75a:	69db      	ldr	r3, [r3, #28]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d005      	beq.n	800c76c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c766:	69db      	ldr	r3, [r3, #28]
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c76c:	2300      	movs	r3, #0
}
 800c76e:	4618      	mov	r0, r3
 800c770:	3708      	adds	r7, #8
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}

0800c776 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c776:	b580      	push	{r7, lr}
 800c778:	b082      	sub	sp, #8
 800c77a:	af00      	add	r7, sp, #0
 800c77c:	6078      	str	r0, [r7, #4]
 800c77e:	460b      	mov	r3, r1
 800c780:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	32ae      	adds	r2, #174	@ 0xae
 800c78c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d101      	bne.n	800c798 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c794:	2303      	movs	r3, #3
 800c796:	e01c      	b.n	800c7d2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c79e:	b2db      	uxtb	r3, r3
 800c7a0:	2b03      	cmp	r3, #3
 800c7a2:	d115      	bne.n	800c7d0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	32ae      	adds	r2, #174	@ 0xae
 800c7ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7b2:	6a1b      	ldr	r3, [r3, #32]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d00b      	beq.n	800c7d0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	32ae      	adds	r2, #174	@ 0xae
 800c7c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7c6:	6a1b      	ldr	r3, [r3, #32]
 800c7c8:	78fa      	ldrb	r2, [r7, #3]
 800c7ca:	4611      	mov	r1, r2
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c7d0:	2300      	movs	r3, #0
}
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	3708      	adds	r7, #8
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bd80      	pop	{r7, pc}

0800c7da <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c7da:	b580      	push	{r7, lr}
 800c7dc:	b082      	sub	sp, #8
 800c7de:	af00      	add	r7, sp, #0
 800c7e0:	6078      	str	r0, [r7, #4]
 800c7e2:	460b      	mov	r3, r1
 800c7e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	32ae      	adds	r2, #174	@ 0xae
 800c7f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d101      	bne.n	800c7fc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c7f8:	2303      	movs	r3, #3
 800c7fa:	e01c      	b.n	800c836 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c802:	b2db      	uxtb	r3, r3
 800c804:	2b03      	cmp	r3, #3
 800c806:	d115      	bne.n	800c834 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	32ae      	adds	r2, #174	@ 0xae
 800c812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d00b      	beq.n	800c834 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	32ae      	adds	r2, #174	@ 0xae
 800c826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c82a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c82c:	78fa      	ldrb	r2, [r7, #3]
 800c82e:	4611      	mov	r1, r2
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c834:	2300      	movs	r3, #0
}
 800c836:	4618      	mov	r0, r3
 800c838:	3708      	adds	r7, #8
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}

0800c83e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c83e:	b480      	push	{r7}
 800c840:	b083      	sub	sp, #12
 800c842:	af00      	add	r7, sp, #0
 800c844:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c846:	2300      	movs	r3, #0
}
 800c848:	4618      	mov	r0, r3
 800c84a:	370c      	adds	r7, #12
 800c84c:	46bd      	mov	sp, r7
 800c84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c852:	4770      	bx	lr

0800c854 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b084      	sub	sp, #16
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c85c:	2300      	movs	r3, #0
 800c85e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2201      	movs	r2, #1
 800c864:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d00e      	beq.n	800c890 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c878:	685b      	ldr	r3, [r3, #4]
 800c87a:	687a      	ldr	r2, [r7, #4]
 800c87c:	6852      	ldr	r2, [r2, #4]
 800c87e:	b2d2      	uxtb	r2, r2
 800c880:	4611      	mov	r1, r2
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	4798      	blx	r3
 800c886:	4603      	mov	r3, r0
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d001      	beq.n	800c890 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c88c:	2303      	movs	r3, #3
 800c88e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c890:	7bfb      	ldrb	r3, [r7, #15]
}
 800c892:	4618      	mov	r0, r3
 800c894:	3710      	adds	r7, #16
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}

0800c89a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c89a:	b480      	push	{r7}
 800c89c:	b083      	sub	sp, #12
 800c89e:	af00      	add	r7, sp, #0
 800c8a0:	6078      	str	r0, [r7, #4]
 800c8a2:	460b      	mov	r3, r1
 800c8a4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c8a6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	370c      	adds	r7, #12
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b2:	4770      	bx	lr

0800c8b4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	b083      	sub	sp, #12
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
 800c8bc:	460b      	mov	r3, r1
 800c8be:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c8c0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	370c      	adds	r7, #12
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8cc:	4770      	bx	lr

0800c8ce <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c8ce:	b580      	push	{r7, lr}
 800c8d0:	b086      	sub	sp, #24
 800c8d2:	af00      	add	r7, sp, #0
 800c8d4:	6078      	str	r0, [r7, #4]
 800c8d6:	460b      	mov	r3, r1
 800c8d8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	885b      	ldrh	r3, [r3, #2]
 800c8ea:	b29b      	uxth	r3, r3
 800c8ec:	68fa      	ldr	r2, [r7, #12]
 800c8ee:	7812      	ldrb	r2, [r2, #0]
 800c8f0:	4293      	cmp	r3, r2
 800c8f2:	d91f      	bls.n	800c934 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	781b      	ldrb	r3, [r3, #0]
 800c8f8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c8fa:	e013      	b.n	800c924 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c8fc:	f107 030a 	add.w	r3, r7, #10
 800c900:	4619      	mov	r1, r3
 800c902:	6978      	ldr	r0, [r7, #20]
 800c904:	f000 f81b 	bl	800c93e <USBD_GetNextDesc>
 800c908:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c90a:	697b      	ldr	r3, [r7, #20]
 800c90c:	785b      	ldrb	r3, [r3, #1]
 800c90e:	2b05      	cmp	r3, #5
 800c910:	d108      	bne.n	800c924 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	789b      	ldrb	r3, [r3, #2]
 800c91a:	78fa      	ldrb	r2, [r7, #3]
 800c91c:	429a      	cmp	r2, r3
 800c91e:	d008      	beq.n	800c932 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c920:	2300      	movs	r3, #0
 800c922:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	885b      	ldrh	r3, [r3, #2]
 800c928:	b29a      	uxth	r2, r3
 800c92a:	897b      	ldrh	r3, [r7, #10]
 800c92c:	429a      	cmp	r2, r3
 800c92e:	d8e5      	bhi.n	800c8fc <USBD_GetEpDesc+0x2e>
 800c930:	e000      	b.n	800c934 <USBD_GetEpDesc+0x66>
          break;
 800c932:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c934:	693b      	ldr	r3, [r7, #16]
}
 800c936:	4618      	mov	r0, r3
 800c938:	3718      	adds	r7, #24
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}

0800c93e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c93e:	b480      	push	{r7}
 800c940:	b085      	sub	sp, #20
 800c942:	af00      	add	r7, sp, #0
 800c944:	6078      	str	r0, [r7, #4]
 800c946:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	881b      	ldrh	r3, [r3, #0]
 800c950:	68fa      	ldr	r2, [r7, #12]
 800c952:	7812      	ldrb	r2, [r2, #0]
 800c954:	4413      	add	r3, r2
 800c956:	b29a      	uxth	r2, r3
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	781b      	ldrb	r3, [r3, #0]
 800c960:	461a      	mov	r2, r3
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	4413      	add	r3, r2
 800c966:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c968:	68fb      	ldr	r3, [r7, #12]
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3714      	adds	r7, #20
 800c96e:	46bd      	mov	sp, r7
 800c970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c974:	4770      	bx	lr

0800c976 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c976:	b480      	push	{r7}
 800c978:	b087      	sub	sp, #28
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	781b      	ldrb	r3, [r3, #0]
 800c986:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	3301      	adds	r3, #1
 800c98c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c98e:	697b      	ldr	r3, [r7, #20]
 800c990:	781b      	ldrb	r3, [r3, #0]
 800c992:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c994:	8a3b      	ldrh	r3, [r7, #16]
 800c996:	021b      	lsls	r3, r3, #8
 800c998:	b21a      	sxth	r2, r3
 800c99a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c99e:	4313      	orrs	r3, r2
 800c9a0:	b21b      	sxth	r3, r3
 800c9a2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c9a4:	89fb      	ldrh	r3, [r7, #14]
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	371c      	adds	r7, #28
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b0:	4770      	bx	lr
	...

0800c9b4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b084      	sub	sp, #16
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
 800c9bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	781b      	ldrb	r3, [r3, #0]
 800c9c6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c9ca:	2b40      	cmp	r3, #64	@ 0x40
 800c9cc:	d005      	beq.n	800c9da <USBD_StdDevReq+0x26>
 800c9ce:	2b40      	cmp	r3, #64	@ 0x40
 800c9d0:	d857      	bhi.n	800ca82 <USBD_StdDevReq+0xce>
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d00f      	beq.n	800c9f6 <USBD_StdDevReq+0x42>
 800c9d6:	2b20      	cmp	r3, #32
 800c9d8:	d153      	bne.n	800ca82 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	32ae      	adds	r2, #174	@ 0xae
 800c9e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9e8:	689b      	ldr	r3, [r3, #8]
 800c9ea:	6839      	ldr	r1, [r7, #0]
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	4798      	blx	r3
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	73fb      	strb	r3, [r7, #15]
      break;
 800c9f4:	e04a      	b.n	800ca8c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	785b      	ldrb	r3, [r3, #1]
 800c9fa:	2b09      	cmp	r3, #9
 800c9fc:	d83b      	bhi.n	800ca76 <USBD_StdDevReq+0xc2>
 800c9fe:	a201      	add	r2, pc, #4	@ (adr r2, 800ca04 <USBD_StdDevReq+0x50>)
 800ca00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca04:	0800ca59 	.word	0x0800ca59
 800ca08:	0800ca6d 	.word	0x0800ca6d
 800ca0c:	0800ca77 	.word	0x0800ca77
 800ca10:	0800ca63 	.word	0x0800ca63
 800ca14:	0800ca77 	.word	0x0800ca77
 800ca18:	0800ca37 	.word	0x0800ca37
 800ca1c:	0800ca2d 	.word	0x0800ca2d
 800ca20:	0800ca77 	.word	0x0800ca77
 800ca24:	0800ca4f 	.word	0x0800ca4f
 800ca28:	0800ca41 	.word	0x0800ca41
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ca2c:	6839      	ldr	r1, [r7, #0]
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f000 fa3c 	bl	800ceac <USBD_GetDescriptor>
          break;
 800ca34:	e024      	b.n	800ca80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ca36:	6839      	ldr	r1, [r7, #0]
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f000 fbcb 	bl	800d1d4 <USBD_SetAddress>
          break;
 800ca3e:	e01f      	b.n	800ca80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ca40:	6839      	ldr	r1, [r7, #0]
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f000 fc0a 	bl	800d25c <USBD_SetConfig>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	73fb      	strb	r3, [r7, #15]
          break;
 800ca4c:	e018      	b.n	800ca80 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ca4e:	6839      	ldr	r1, [r7, #0]
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f000 fcad 	bl	800d3b0 <USBD_GetConfig>
          break;
 800ca56:	e013      	b.n	800ca80 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ca58:	6839      	ldr	r1, [r7, #0]
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f000 fcde 	bl	800d41c <USBD_GetStatus>
          break;
 800ca60:	e00e      	b.n	800ca80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ca62:	6839      	ldr	r1, [r7, #0]
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f000 fd0d 	bl	800d484 <USBD_SetFeature>
          break;
 800ca6a:	e009      	b.n	800ca80 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ca6c:	6839      	ldr	r1, [r7, #0]
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f000 fd31 	bl	800d4d6 <USBD_ClrFeature>
          break;
 800ca74:	e004      	b.n	800ca80 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ca76:	6839      	ldr	r1, [r7, #0]
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f000 fd88 	bl	800d58e <USBD_CtlError>
          break;
 800ca7e:	bf00      	nop
      }
      break;
 800ca80:	e004      	b.n	800ca8c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ca82:	6839      	ldr	r1, [r7, #0]
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f000 fd82 	bl	800d58e <USBD_CtlError>
      break;
 800ca8a:	bf00      	nop
  }

  return ret;
 800ca8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca8e:	4618      	mov	r0, r3
 800ca90:	3710      	adds	r7, #16
 800ca92:	46bd      	mov	sp, r7
 800ca94:	bd80      	pop	{r7, pc}
 800ca96:	bf00      	nop

0800ca98 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b084      	sub	sp, #16
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
 800caa0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800caa2:	2300      	movs	r3, #0
 800caa4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	781b      	ldrb	r3, [r3, #0]
 800caaa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800caae:	2b40      	cmp	r3, #64	@ 0x40
 800cab0:	d005      	beq.n	800cabe <USBD_StdItfReq+0x26>
 800cab2:	2b40      	cmp	r3, #64	@ 0x40
 800cab4:	d852      	bhi.n	800cb5c <USBD_StdItfReq+0xc4>
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d001      	beq.n	800cabe <USBD_StdItfReq+0x26>
 800caba:	2b20      	cmp	r3, #32
 800cabc:	d14e      	bne.n	800cb5c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cac4:	b2db      	uxtb	r3, r3
 800cac6:	3b01      	subs	r3, #1
 800cac8:	2b02      	cmp	r3, #2
 800caca:	d840      	bhi.n	800cb4e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	889b      	ldrh	r3, [r3, #4]
 800cad0:	b2db      	uxtb	r3, r3
 800cad2:	2b01      	cmp	r3, #1
 800cad4:	d836      	bhi.n	800cb44 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	889b      	ldrh	r3, [r3, #4]
 800cada:	b2db      	uxtb	r3, r3
 800cadc:	4619      	mov	r1, r3
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f7ff fedb 	bl	800c89a <USBD_CoreFindIF>
 800cae4:	4603      	mov	r3, r0
 800cae6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cae8:	7bbb      	ldrb	r3, [r7, #14]
 800caea:	2bff      	cmp	r3, #255	@ 0xff
 800caec:	d01d      	beq.n	800cb2a <USBD_StdItfReq+0x92>
 800caee:	7bbb      	ldrb	r3, [r7, #14]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d11a      	bne.n	800cb2a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800caf4:	7bba      	ldrb	r2, [r7, #14]
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	32ae      	adds	r2, #174	@ 0xae
 800cafa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cafe:	689b      	ldr	r3, [r3, #8]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d00f      	beq.n	800cb24 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800cb04:	7bba      	ldrb	r2, [r7, #14]
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cb0c:	7bba      	ldrb	r2, [r7, #14]
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	32ae      	adds	r2, #174	@ 0xae
 800cb12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb16:	689b      	ldr	r3, [r3, #8]
 800cb18:	6839      	ldr	r1, [r7, #0]
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	4798      	blx	r3
 800cb1e:	4603      	mov	r3, r0
 800cb20:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cb22:	e004      	b.n	800cb2e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800cb24:	2303      	movs	r3, #3
 800cb26:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cb28:	e001      	b.n	800cb2e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800cb2a:	2303      	movs	r3, #3
 800cb2c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	88db      	ldrh	r3, [r3, #6]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d110      	bne.n	800cb58 <USBD_StdItfReq+0xc0>
 800cb36:	7bfb      	ldrb	r3, [r7, #15]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d10d      	bne.n	800cb58 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f000 fdfd 	bl	800d73c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cb42:	e009      	b.n	800cb58 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800cb44:	6839      	ldr	r1, [r7, #0]
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f000 fd21 	bl	800d58e <USBD_CtlError>
          break;
 800cb4c:	e004      	b.n	800cb58 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800cb4e:	6839      	ldr	r1, [r7, #0]
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f000 fd1c 	bl	800d58e <USBD_CtlError>
          break;
 800cb56:	e000      	b.n	800cb5a <USBD_StdItfReq+0xc2>
          break;
 800cb58:	bf00      	nop
      }
      break;
 800cb5a:	e004      	b.n	800cb66 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800cb5c:	6839      	ldr	r1, [r7, #0]
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f000 fd15 	bl	800d58e <USBD_CtlError>
      break;
 800cb64:	bf00      	nop
  }

  return ret;
 800cb66:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3710      	adds	r7, #16
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b084      	sub	sp, #16
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	889b      	ldrh	r3, [r3, #4]
 800cb82:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	781b      	ldrb	r3, [r3, #0]
 800cb88:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cb8c:	2b40      	cmp	r3, #64	@ 0x40
 800cb8e:	d007      	beq.n	800cba0 <USBD_StdEPReq+0x30>
 800cb90:	2b40      	cmp	r3, #64	@ 0x40
 800cb92:	f200 817f 	bhi.w	800ce94 <USBD_StdEPReq+0x324>
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d02a      	beq.n	800cbf0 <USBD_StdEPReq+0x80>
 800cb9a:	2b20      	cmp	r3, #32
 800cb9c:	f040 817a 	bne.w	800ce94 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800cba0:	7bbb      	ldrb	r3, [r7, #14]
 800cba2:	4619      	mov	r1, r3
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f7ff fe85 	bl	800c8b4 <USBD_CoreFindEP>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cbae:	7b7b      	ldrb	r3, [r7, #13]
 800cbb0:	2bff      	cmp	r3, #255	@ 0xff
 800cbb2:	f000 8174 	beq.w	800ce9e <USBD_StdEPReq+0x32e>
 800cbb6:	7b7b      	ldrb	r3, [r7, #13]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	f040 8170 	bne.w	800ce9e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800cbbe:	7b7a      	ldrb	r2, [r7, #13]
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800cbc6:	7b7a      	ldrb	r2, [r7, #13]
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	32ae      	adds	r2, #174	@ 0xae
 800cbcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbd0:	689b      	ldr	r3, [r3, #8]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	f000 8163 	beq.w	800ce9e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800cbd8:	7b7a      	ldrb	r2, [r7, #13]
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	32ae      	adds	r2, #174	@ 0xae
 800cbde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbe2:	689b      	ldr	r3, [r3, #8]
 800cbe4:	6839      	ldr	r1, [r7, #0]
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	4798      	blx	r3
 800cbea:	4603      	mov	r3, r0
 800cbec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cbee:	e156      	b.n	800ce9e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	785b      	ldrb	r3, [r3, #1]
 800cbf4:	2b03      	cmp	r3, #3
 800cbf6:	d008      	beq.n	800cc0a <USBD_StdEPReq+0x9a>
 800cbf8:	2b03      	cmp	r3, #3
 800cbfa:	f300 8145 	bgt.w	800ce88 <USBD_StdEPReq+0x318>
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	f000 809b 	beq.w	800cd3a <USBD_StdEPReq+0x1ca>
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	d03c      	beq.n	800cc82 <USBD_StdEPReq+0x112>
 800cc08:	e13e      	b.n	800ce88 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc10:	b2db      	uxtb	r3, r3
 800cc12:	2b02      	cmp	r3, #2
 800cc14:	d002      	beq.n	800cc1c <USBD_StdEPReq+0xac>
 800cc16:	2b03      	cmp	r3, #3
 800cc18:	d016      	beq.n	800cc48 <USBD_StdEPReq+0xd8>
 800cc1a:	e02c      	b.n	800cc76 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cc1c:	7bbb      	ldrb	r3, [r7, #14]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d00d      	beq.n	800cc3e <USBD_StdEPReq+0xce>
 800cc22:	7bbb      	ldrb	r3, [r7, #14]
 800cc24:	2b80      	cmp	r3, #128	@ 0x80
 800cc26:	d00a      	beq.n	800cc3e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cc28:	7bbb      	ldrb	r3, [r7, #14]
 800cc2a:	4619      	mov	r1, r3
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f001 f9b3 	bl	800df98 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc32:	2180      	movs	r1, #128	@ 0x80
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f001 f9af 	bl	800df98 <USBD_LL_StallEP>
 800cc3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cc3c:	e020      	b.n	800cc80 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800cc3e:	6839      	ldr	r1, [r7, #0]
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f000 fca4 	bl	800d58e <USBD_CtlError>
              break;
 800cc46:	e01b      	b.n	800cc80 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	885b      	ldrh	r3, [r3, #2]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d10e      	bne.n	800cc6e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cc50:	7bbb      	ldrb	r3, [r7, #14]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d00b      	beq.n	800cc6e <USBD_StdEPReq+0xfe>
 800cc56:	7bbb      	ldrb	r3, [r7, #14]
 800cc58:	2b80      	cmp	r3, #128	@ 0x80
 800cc5a:	d008      	beq.n	800cc6e <USBD_StdEPReq+0xfe>
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	88db      	ldrh	r3, [r3, #6]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d104      	bne.n	800cc6e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cc64:	7bbb      	ldrb	r3, [r7, #14]
 800cc66:	4619      	mov	r1, r3
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	f001 f995 	bl	800df98 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f000 fd64 	bl	800d73c <USBD_CtlSendStatus>

              break;
 800cc74:	e004      	b.n	800cc80 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800cc76:	6839      	ldr	r1, [r7, #0]
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f000 fc88 	bl	800d58e <USBD_CtlError>
              break;
 800cc7e:	bf00      	nop
          }
          break;
 800cc80:	e107      	b.n	800ce92 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc88:	b2db      	uxtb	r3, r3
 800cc8a:	2b02      	cmp	r3, #2
 800cc8c:	d002      	beq.n	800cc94 <USBD_StdEPReq+0x124>
 800cc8e:	2b03      	cmp	r3, #3
 800cc90:	d016      	beq.n	800ccc0 <USBD_StdEPReq+0x150>
 800cc92:	e04b      	b.n	800cd2c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cc94:	7bbb      	ldrb	r3, [r7, #14]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d00d      	beq.n	800ccb6 <USBD_StdEPReq+0x146>
 800cc9a:	7bbb      	ldrb	r3, [r7, #14]
 800cc9c:	2b80      	cmp	r3, #128	@ 0x80
 800cc9e:	d00a      	beq.n	800ccb6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cca0:	7bbb      	ldrb	r3, [r7, #14]
 800cca2:	4619      	mov	r1, r3
 800cca4:	6878      	ldr	r0, [r7, #4]
 800cca6:	f001 f977 	bl	800df98 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ccaa:	2180      	movs	r1, #128	@ 0x80
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	f001 f973 	bl	800df98 <USBD_LL_StallEP>
 800ccb2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ccb4:	e040      	b.n	800cd38 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ccb6:	6839      	ldr	r1, [r7, #0]
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f000 fc68 	bl	800d58e <USBD_CtlError>
              break;
 800ccbe:	e03b      	b.n	800cd38 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	885b      	ldrh	r3, [r3, #2]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d136      	bne.n	800cd36 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ccc8:	7bbb      	ldrb	r3, [r7, #14]
 800ccca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d004      	beq.n	800ccdc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ccd2:	7bbb      	ldrb	r3, [r7, #14]
 800ccd4:	4619      	mov	r1, r3
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f001 f97d 	bl	800dfd6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	f000 fd2d 	bl	800d73c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800cce2:	7bbb      	ldrb	r3, [r7, #14]
 800cce4:	4619      	mov	r1, r3
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f7ff fde4 	bl	800c8b4 <USBD_CoreFindEP>
 800ccec:	4603      	mov	r3, r0
 800ccee:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ccf0:	7b7b      	ldrb	r3, [r7, #13]
 800ccf2:	2bff      	cmp	r3, #255	@ 0xff
 800ccf4:	d01f      	beq.n	800cd36 <USBD_StdEPReq+0x1c6>
 800ccf6:	7b7b      	ldrb	r3, [r7, #13]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d11c      	bne.n	800cd36 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ccfc:	7b7a      	ldrb	r2, [r7, #13]
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800cd04:	7b7a      	ldrb	r2, [r7, #13]
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	32ae      	adds	r2, #174	@ 0xae
 800cd0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd0e:	689b      	ldr	r3, [r3, #8]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d010      	beq.n	800cd36 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cd14:	7b7a      	ldrb	r2, [r7, #13]
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	32ae      	adds	r2, #174	@ 0xae
 800cd1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd1e:	689b      	ldr	r3, [r3, #8]
 800cd20:	6839      	ldr	r1, [r7, #0]
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	4798      	blx	r3
 800cd26:	4603      	mov	r3, r0
 800cd28:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800cd2a:	e004      	b.n	800cd36 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800cd2c:	6839      	ldr	r1, [r7, #0]
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f000 fc2d 	bl	800d58e <USBD_CtlError>
              break;
 800cd34:	e000      	b.n	800cd38 <USBD_StdEPReq+0x1c8>
              break;
 800cd36:	bf00      	nop
          }
          break;
 800cd38:	e0ab      	b.n	800ce92 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd40:	b2db      	uxtb	r3, r3
 800cd42:	2b02      	cmp	r3, #2
 800cd44:	d002      	beq.n	800cd4c <USBD_StdEPReq+0x1dc>
 800cd46:	2b03      	cmp	r3, #3
 800cd48:	d032      	beq.n	800cdb0 <USBD_StdEPReq+0x240>
 800cd4a:	e097      	b.n	800ce7c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cd4c:	7bbb      	ldrb	r3, [r7, #14]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d007      	beq.n	800cd62 <USBD_StdEPReq+0x1f2>
 800cd52:	7bbb      	ldrb	r3, [r7, #14]
 800cd54:	2b80      	cmp	r3, #128	@ 0x80
 800cd56:	d004      	beq.n	800cd62 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800cd58:	6839      	ldr	r1, [r7, #0]
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f000 fc17 	bl	800d58e <USBD_CtlError>
                break;
 800cd60:	e091      	b.n	800ce86 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	da0b      	bge.n	800cd82 <USBD_StdEPReq+0x212>
 800cd6a:	7bbb      	ldrb	r3, [r7, #14]
 800cd6c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cd70:	4613      	mov	r3, r2
 800cd72:	009b      	lsls	r3, r3, #2
 800cd74:	4413      	add	r3, r2
 800cd76:	009b      	lsls	r3, r3, #2
 800cd78:	3310      	adds	r3, #16
 800cd7a:	687a      	ldr	r2, [r7, #4]
 800cd7c:	4413      	add	r3, r2
 800cd7e:	3304      	adds	r3, #4
 800cd80:	e00b      	b.n	800cd9a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cd82:	7bbb      	ldrb	r3, [r7, #14]
 800cd84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd88:	4613      	mov	r3, r2
 800cd8a:	009b      	lsls	r3, r3, #2
 800cd8c:	4413      	add	r3, r2
 800cd8e:	009b      	lsls	r3, r3, #2
 800cd90:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cd94:	687a      	ldr	r2, [r7, #4]
 800cd96:	4413      	add	r3, r2
 800cd98:	3304      	adds	r3, #4
 800cd9a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	2200      	movs	r2, #0
 800cda0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	2202      	movs	r2, #2
 800cda6:	4619      	mov	r1, r3
 800cda8:	6878      	ldr	r0, [r7, #4]
 800cdaa:	f000 fc6d 	bl	800d688 <USBD_CtlSendData>
              break;
 800cdae:	e06a      	b.n	800ce86 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cdb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	da11      	bge.n	800cddc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cdb8:	7bbb      	ldrb	r3, [r7, #14]
 800cdba:	f003 020f 	and.w	r2, r3, #15
 800cdbe:	6879      	ldr	r1, [r7, #4]
 800cdc0:	4613      	mov	r3, r2
 800cdc2:	009b      	lsls	r3, r3, #2
 800cdc4:	4413      	add	r3, r2
 800cdc6:	009b      	lsls	r3, r3, #2
 800cdc8:	440b      	add	r3, r1
 800cdca:	3324      	adds	r3, #36	@ 0x24
 800cdcc:	881b      	ldrh	r3, [r3, #0]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d117      	bne.n	800ce02 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cdd2:	6839      	ldr	r1, [r7, #0]
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f000 fbda 	bl	800d58e <USBD_CtlError>
                  break;
 800cdda:	e054      	b.n	800ce86 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cddc:	7bbb      	ldrb	r3, [r7, #14]
 800cdde:	f003 020f 	and.w	r2, r3, #15
 800cde2:	6879      	ldr	r1, [r7, #4]
 800cde4:	4613      	mov	r3, r2
 800cde6:	009b      	lsls	r3, r3, #2
 800cde8:	4413      	add	r3, r2
 800cdea:	009b      	lsls	r3, r3, #2
 800cdec:	440b      	add	r3, r1
 800cdee:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cdf2:	881b      	ldrh	r3, [r3, #0]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d104      	bne.n	800ce02 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cdf8:	6839      	ldr	r1, [r7, #0]
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f000 fbc7 	bl	800d58e <USBD_CtlError>
                  break;
 800ce00:	e041      	b.n	800ce86 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ce02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	da0b      	bge.n	800ce22 <USBD_StdEPReq+0x2b2>
 800ce0a:	7bbb      	ldrb	r3, [r7, #14]
 800ce0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ce10:	4613      	mov	r3, r2
 800ce12:	009b      	lsls	r3, r3, #2
 800ce14:	4413      	add	r3, r2
 800ce16:	009b      	lsls	r3, r3, #2
 800ce18:	3310      	adds	r3, #16
 800ce1a:	687a      	ldr	r2, [r7, #4]
 800ce1c:	4413      	add	r3, r2
 800ce1e:	3304      	adds	r3, #4
 800ce20:	e00b      	b.n	800ce3a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ce22:	7bbb      	ldrb	r3, [r7, #14]
 800ce24:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ce28:	4613      	mov	r3, r2
 800ce2a:	009b      	lsls	r3, r3, #2
 800ce2c:	4413      	add	r3, r2
 800ce2e:	009b      	lsls	r3, r3, #2
 800ce30:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ce34:	687a      	ldr	r2, [r7, #4]
 800ce36:	4413      	add	r3, r2
 800ce38:	3304      	adds	r3, #4
 800ce3a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ce3c:	7bbb      	ldrb	r3, [r7, #14]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d002      	beq.n	800ce48 <USBD_StdEPReq+0x2d8>
 800ce42:	7bbb      	ldrb	r3, [r7, #14]
 800ce44:	2b80      	cmp	r3, #128	@ 0x80
 800ce46:	d103      	bne.n	800ce50 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	601a      	str	r2, [r3, #0]
 800ce4e:	e00e      	b.n	800ce6e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ce50:	7bbb      	ldrb	r3, [r7, #14]
 800ce52:	4619      	mov	r1, r3
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f001 f8dd 	bl	800e014 <USBD_LL_IsStallEP>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d003      	beq.n	800ce68 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	2201      	movs	r2, #1
 800ce64:	601a      	str	r2, [r3, #0]
 800ce66:	e002      	b.n	800ce6e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ce6e:	68bb      	ldr	r3, [r7, #8]
 800ce70:	2202      	movs	r2, #2
 800ce72:	4619      	mov	r1, r3
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f000 fc07 	bl	800d688 <USBD_CtlSendData>
              break;
 800ce7a:	e004      	b.n	800ce86 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ce7c:	6839      	ldr	r1, [r7, #0]
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f000 fb85 	bl	800d58e <USBD_CtlError>
              break;
 800ce84:	bf00      	nop
          }
          break;
 800ce86:	e004      	b.n	800ce92 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ce88:	6839      	ldr	r1, [r7, #0]
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f000 fb7f 	bl	800d58e <USBD_CtlError>
          break;
 800ce90:	bf00      	nop
      }
      break;
 800ce92:	e005      	b.n	800cea0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ce94:	6839      	ldr	r1, [r7, #0]
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f000 fb79 	bl	800d58e <USBD_CtlError>
      break;
 800ce9c:	e000      	b.n	800cea0 <USBD_StdEPReq+0x330>
      break;
 800ce9e:	bf00      	nop
  }

  return ret;
 800cea0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	3710      	adds	r7, #16
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}
	...

0800ceac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b084      	sub	sp, #16
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
 800ceb4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ceba:	2300      	movs	r3, #0
 800cebc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cebe:	2300      	movs	r3, #0
 800cec0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	885b      	ldrh	r3, [r3, #2]
 800cec6:	0a1b      	lsrs	r3, r3, #8
 800cec8:	b29b      	uxth	r3, r3
 800ceca:	3b01      	subs	r3, #1
 800cecc:	2b0e      	cmp	r3, #14
 800cece:	f200 8152 	bhi.w	800d176 <USBD_GetDescriptor+0x2ca>
 800ced2:	a201      	add	r2, pc, #4	@ (adr r2, 800ced8 <USBD_GetDescriptor+0x2c>)
 800ced4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ced8:	0800cf49 	.word	0x0800cf49
 800cedc:	0800cf61 	.word	0x0800cf61
 800cee0:	0800cfa1 	.word	0x0800cfa1
 800cee4:	0800d177 	.word	0x0800d177
 800cee8:	0800d177 	.word	0x0800d177
 800ceec:	0800d117 	.word	0x0800d117
 800cef0:	0800d143 	.word	0x0800d143
 800cef4:	0800d177 	.word	0x0800d177
 800cef8:	0800d177 	.word	0x0800d177
 800cefc:	0800d177 	.word	0x0800d177
 800cf00:	0800d177 	.word	0x0800d177
 800cf04:	0800d177 	.word	0x0800d177
 800cf08:	0800d177 	.word	0x0800d177
 800cf0c:	0800d177 	.word	0x0800d177
 800cf10:	0800cf15 	.word	0x0800cf15
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf1a:	69db      	ldr	r3, [r3, #28]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d00b      	beq.n	800cf38 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf26:	69db      	ldr	r3, [r3, #28]
 800cf28:	687a      	ldr	r2, [r7, #4]
 800cf2a:	7c12      	ldrb	r2, [r2, #16]
 800cf2c:	f107 0108 	add.w	r1, r7, #8
 800cf30:	4610      	mov	r0, r2
 800cf32:	4798      	blx	r3
 800cf34:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cf36:	e126      	b.n	800d186 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cf38:	6839      	ldr	r1, [r7, #0]
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f000 fb27 	bl	800d58e <USBD_CtlError>
        err++;
 800cf40:	7afb      	ldrb	r3, [r7, #11]
 800cf42:	3301      	adds	r3, #1
 800cf44:	72fb      	strb	r3, [r7, #11]
      break;
 800cf46:	e11e      	b.n	800d186 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	687a      	ldr	r2, [r7, #4]
 800cf52:	7c12      	ldrb	r2, [r2, #16]
 800cf54:	f107 0108 	add.w	r1, r7, #8
 800cf58:	4610      	mov	r0, r2
 800cf5a:	4798      	blx	r3
 800cf5c:	60f8      	str	r0, [r7, #12]
      break;
 800cf5e:	e112      	b.n	800d186 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	7c1b      	ldrb	r3, [r3, #16]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d10d      	bne.n	800cf84 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf70:	f107 0208 	add.w	r2, r7, #8
 800cf74:	4610      	mov	r0, r2
 800cf76:	4798      	blx	r3
 800cf78:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	3301      	adds	r3, #1
 800cf7e:	2202      	movs	r2, #2
 800cf80:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cf82:	e100      	b.n	800d186 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf8c:	f107 0208 	add.w	r2, r7, #8
 800cf90:	4610      	mov	r0, r2
 800cf92:	4798      	blx	r3
 800cf94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	3301      	adds	r3, #1
 800cf9a:	2202      	movs	r2, #2
 800cf9c:	701a      	strb	r2, [r3, #0]
      break;
 800cf9e:	e0f2      	b.n	800d186 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	885b      	ldrh	r3, [r3, #2]
 800cfa4:	b2db      	uxtb	r3, r3
 800cfa6:	2b05      	cmp	r3, #5
 800cfa8:	f200 80ac 	bhi.w	800d104 <USBD_GetDescriptor+0x258>
 800cfac:	a201      	add	r2, pc, #4	@ (adr r2, 800cfb4 <USBD_GetDescriptor+0x108>)
 800cfae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfb2:	bf00      	nop
 800cfb4:	0800cfcd 	.word	0x0800cfcd
 800cfb8:	0800d001 	.word	0x0800d001
 800cfbc:	0800d035 	.word	0x0800d035
 800cfc0:	0800d069 	.word	0x0800d069
 800cfc4:	0800d09d 	.word	0x0800d09d
 800cfc8:	0800d0d1 	.word	0x0800d0d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cfd2:	685b      	ldr	r3, [r3, #4]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d00b      	beq.n	800cff0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cfde:	685b      	ldr	r3, [r3, #4]
 800cfe0:	687a      	ldr	r2, [r7, #4]
 800cfe2:	7c12      	ldrb	r2, [r2, #16]
 800cfe4:	f107 0108 	add.w	r1, r7, #8
 800cfe8:	4610      	mov	r0, r2
 800cfea:	4798      	blx	r3
 800cfec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cfee:	e091      	b.n	800d114 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cff0:	6839      	ldr	r1, [r7, #0]
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f000 facb 	bl	800d58e <USBD_CtlError>
            err++;
 800cff8:	7afb      	ldrb	r3, [r7, #11]
 800cffa:	3301      	adds	r3, #1
 800cffc:	72fb      	strb	r3, [r7, #11]
          break;
 800cffe:	e089      	b.n	800d114 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d006:	689b      	ldr	r3, [r3, #8]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d00b      	beq.n	800d024 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d012:	689b      	ldr	r3, [r3, #8]
 800d014:	687a      	ldr	r2, [r7, #4]
 800d016:	7c12      	ldrb	r2, [r2, #16]
 800d018:	f107 0108 	add.w	r1, r7, #8
 800d01c:	4610      	mov	r0, r2
 800d01e:	4798      	blx	r3
 800d020:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d022:	e077      	b.n	800d114 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d024:	6839      	ldr	r1, [r7, #0]
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	f000 fab1 	bl	800d58e <USBD_CtlError>
            err++;
 800d02c:	7afb      	ldrb	r3, [r7, #11]
 800d02e:	3301      	adds	r3, #1
 800d030:	72fb      	strb	r3, [r7, #11]
          break;
 800d032:	e06f      	b.n	800d114 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d03a:	68db      	ldr	r3, [r3, #12]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d00b      	beq.n	800d058 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d046:	68db      	ldr	r3, [r3, #12]
 800d048:	687a      	ldr	r2, [r7, #4]
 800d04a:	7c12      	ldrb	r2, [r2, #16]
 800d04c:	f107 0108 	add.w	r1, r7, #8
 800d050:	4610      	mov	r0, r2
 800d052:	4798      	blx	r3
 800d054:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d056:	e05d      	b.n	800d114 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d058:	6839      	ldr	r1, [r7, #0]
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f000 fa97 	bl	800d58e <USBD_CtlError>
            err++;
 800d060:	7afb      	ldrb	r3, [r7, #11]
 800d062:	3301      	adds	r3, #1
 800d064:	72fb      	strb	r3, [r7, #11]
          break;
 800d066:	e055      	b.n	800d114 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d06e:	691b      	ldr	r3, [r3, #16]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d00b      	beq.n	800d08c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d07a:	691b      	ldr	r3, [r3, #16]
 800d07c:	687a      	ldr	r2, [r7, #4]
 800d07e:	7c12      	ldrb	r2, [r2, #16]
 800d080:	f107 0108 	add.w	r1, r7, #8
 800d084:	4610      	mov	r0, r2
 800d086:	4798      	blx	r3
 800d088:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d08a:	e043      	b.n	800d114 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d08c:	6839      	ldr	r1, [r7, #0]
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f000 fa7d 	bl	800d58e <USBD_CtlError>
            err++;
 800d094:	7afb      	ldrb	r3, [r7, #11]
 800d096:	3301      	adds	r3, #1
 800d098:	72fb      	strb	r3, [r7, #11]
          break;
 800d09a:	e03b      	b.n	800d114 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d0a2:	695b      	ldr	r3, [r3, #20]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d00b      	beq.n	800d0c0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d0ae:	695b      	ldr	r3, [r3, #20]
 800d0b0:	687a      	ldr	r2, [r7, #4]
 800d0b2:	7c12      	ldrb	r2, [r2, #16]
 800d0b4:	f107 0108 	add.w	r1, r7, #8
 800d0b8:	4610      	mov	r0, r2
 800d0ba:	4798      	blx	r3
 800d0bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d0be:	e029      	b.n	800d114 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d0c0:	6839      	ldr	r1, [r7, #0]
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f000 fa63 	bl	800d58e <USBD_CtlError>
            err++;
 800d0c8:	7afb      	ldrb	r3, [r7, #11]
 800d0ca:	3301      	adds	r3, #1
 800d0cc:	72fb      	strb	r3, [r7, #11]
          break;
 800d0ce:	e021      	b.n	800d114 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d0d6:	699b      	ldr	r3, [r3, #24]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d00b      	beq.n	800d0f4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d0e2:	699b      	ldr	r3, [r3, #24]
 800d0e4:	687a      	ldr	r2, [r7, #4]
 800d0e6:	7c12      	ldrb	r2, [r2, #16]
 800d0e8:	f107 0108 	add.w	r1, r7, #8
 800d0ec:	4610      	mov	r0, r2
 800d0ee:	4798      	blx	r3
 800d0f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d0f2:	e00f      	b.n	800d114 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d0f4:	6839      	ldr	r1, [r7, #0]
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f000 fa49 	bl	800d58e <USBD_CtlError>
            err++;
 800d0fc:	7afb      	ldrb	r3, [r7, #11]
 800d0fe:	3301      	adds	r3, #1
 800d100:	72fb      	strb	r3, [r7, #11]
          break;
 800d102:	e007      	b.n	800d114 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d104:	6839      	ldr	r1, [r7, #0]
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f000 fa41 	bl	800d58e <USBD_CtlError>
          err++;
 800d10c:	7afb      	ldrb	r3, [r7, #11]
 800d10e:	3301      	adds	r3, #1
 800d110:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d112:	bf00      	nop
      }
      break;
 800d114:	e037      	b.n	800d186 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	7c1b      	ldrb	r3, [r3, #16]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d109      	bne.n	800d132 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d124:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d126:	f107 0208 	add.w	r2, r7, #8
 800d12a:	4610      	mov	r0, r2
 800d12c:	4798      	blx	r3
 800d12e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d130:	e029      	b.n	800d186 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d132:	6839      	ldr	r1, [r7, #0]
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	f000 fa2a 	bl	800d58e <USBD_CtlError>
        err++;
 800d13a:	7afb      	ldrb	r3, [r7, #11]
 800d13c:	3301      	adds	r3, #1
 800d13e:	72fb      	strb	r3, [r7, #11]
      break;
 800d140:	e021      	b.n	800d186 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	7c1b      	ldrb	r3, [r3, #16]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d10d      	bne.n	800d166 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d152:	f107 0208 	add.w	r2, r7, #8
 800d156:	4610      	mov	r0, r2
 800d158:	4798      	blx	r3
 800d15a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	3301      	adds	r3, #1
 800d160:	2207      	movs	r2, #7
 800d162:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d164:	e00f      	b.n	800d186 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d166:	6839      	ldr	r1, [r7, #0]
 800d168:	6878      	ldr	r0, [r7, #4]
 800d16a:	f000 fa10 	bl	800d58e <USBD_CtlError>
        err++;
 800d16e:	7afb      	ldrb	r3, [r7, #11]
 800d170:	3301      	adds	r3, #1
 800d172:	72fb      	strb	r3, [r7, #11]
      break;
 800d174:	e007      	b.n	800d186 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d176:	6839      	ldr	r1, [r7, #0]
 800d178:	6878      	ldr	r0, [r7, #4]
 800d17a:	f000 fa08 	bl	800d58e <USBD_CtlError>
      err++;
 800d17e:	7afb      	ldrb	r3, [r7, #11]
 800d180:	3301      	adds	r3, #1
 800d182:	72fb      	strb	r3, [r7, #11]
      break;
 800d184:	bf00      	nop
  }

  if (err != 0U)
 800d186:	7afb      	ldrb	r3, [r7, #11]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d11e      	bne.n	800d1ca <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	88db      	ldrh	r3, [r3, #6]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d016      	beq.n	800d1c2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d194:	893b      	ldrh	r3, [r7, #8]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d00e      	beq.n	800d1b8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	88da      	ldrh	r2, [r3, #6]
 800d19e:	893b      	ldrh	r3, [r7, #8]
 800d1a0:	4293      	cmp	r3, r2
 800d1a2:	bf28      	it	cs
 800d1a4:	4613      	movcs	r3, r2
 800d1a6:	b29b      	uxth	r3, r3
 800d1a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d1aa:	893b      	ldrh	r3, [r7, #8]
 800d1ac:	461a      	mov	r2, r3
 800d1ae:	68f9      	ldr	r1, [r7, #12]
 800d1b0:	6878      	ldr	r0, [r7, #4]
 800d1b2:	f000 fa69 	bl	800d688 <USBD_CtlSendData>
 800d1b6:	e009      	b.n	800d1cc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d1b8:	6839      	ldr	r1, [r7, #0]
 800d1ba:	6878      	ldr	r0, [r7, #4]
 800d1bc:	f000 f9e7 	bl	800d58e <USBD_CtlError>
 800d1c0:	e004      	b.n	800d1cc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	f000 faba 	bl	800d73c <USBD_CtlSendStatus>
 800d1c8:	e000      	b.n	800d1cc <USBD_GetDescriptor+0x320>
    return;
 800d1ca:	bf00      	nop
  }
}
 800d1cc:	3710      	adds	r7, #16
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}
 800d1d2:	bf00      	nop

0800d1d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b084      	sub	sp, #16
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
 800d1dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	889b      	ldrh	r3, [r3, #4]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d131      	bne.n	800d24a <USBD_SetAddress+0x76>
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	88db      	ldrh	r3, [r3, #6]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d12d      	bne.n	800d24a <USBD_SetAddress+0x76>
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	885b      	ldrh	r3, [r3, #2]
 800d1f2:	2b7f      	cmp	r3, #127	@ 0x7f
 800d1f4:	d829      	bhi.n	800d24a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	885b      	ldrh	r3, [r3, #2]
 800d1fa:	b2db      	uxtb	r3, r3
 800d1fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d200:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d208:	b2db      	uxtb	r3, r3
 800d20a:	2b03      	cmp	r3, #3
 800d20c:	d104      	bne.n	800d218 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d20e:	6839      	ldr	r1, [r7, #0]
 800d210:	6878      	ldr	r0, [r7, #4]
 800d212:	f000 f9bc 	bl	800d58e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d216:	e01d      	b.n	800d254 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	7bfa      	ldrb	r2, [r7, #15]
 800d21c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d220:	7bfb      	ldrb	r3, [r7, #15]
 800d222:	4619      	mov	r1, r3
 800d224:	6878      	ldr	r0, [r7, #4]
 800d226:	f000 ff21 	bl	800e06c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f000 fa86 	bl	800d73c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d230:	7bfb      	ldrb	r3, [r7, #15]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d004      	beq.n	800d240 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2202      	movs	r2, #2
 800d23a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d23e:	e009      	b.n	800d254 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2201      	movs	r2, #1
 800d244:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d248:	e004      	b.n	800d254 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d24a:	6839      	ldr	r1, [r7, #0]
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f000 f99e 	bl	800d58e <USBD_CtlError>
  }
}
 800d252:	bf00      	nop
 800d254:	bf00      	nop
 800d256:	3710      	adds	r7, #16
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}

0800d25c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b084      	sub	sp, #16
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
 800d264:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d266:	2300      	movs	r3, #0
 800d268:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	885b      	ldrh	r3, [r3, #2]
 800d26e:	b2da      	uxtb	r2, r3
 800d270:	4b4e      	ldr	r3, [pc, #312]	@ (800d3ac <USBD_SetConfig+0x150>)
 800d272:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d274:	4b4d      	ldr	r3, [pc, #308]	@ (800d3ac <USBD_SetConfig+0x150>)
 800d276:	781b      	ldrb	r3, [r3, #0]
 800d278:	2b01      	cmp	r3, #1
 800d27a:	d905      	bls.n	800d288 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d27c:	6839      	ldr	r1, [r7, #0]
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f000 f985 	bl	800d58e <USBD_CtlError>
    return USBD_FAIL;
 800d284:	2303      	movs	r3, #3
 800d286:	e08c      	b.n	800d3a2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d28e:	b2db      	uxtb	r3, r3
 800d290:	2b02      	cmp	r3, #2
 800d292:	d002      	beq.n	800d29a <USBD_SetConfig+0x3e>
 800d294:	2b03      	cmp	r3, #3
 800d296:	d029      	beq.n	800d2ec <USBD_SetConfig+0x90>
 800d298:	e075      	b.n	800d386 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d29a:	4b44      	ldr	r3, [pc, #272]	@ (800d3ac <USBD_SetConfig+0x150>)
 800d29c:	781b      	ldrb	r3, [r3, #0]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d020      	beq.n	800d2e4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d2a2:	4b42      	ldr	r3, [pc, #264]	@ (800d3ac <USBD_SetConfig+0x150>)
 800d2a4:	781b      	ldrb	r3, [r3, #0]
 800d2a6:	461a      	mov	r2, r3
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d2ac:	4b3f      	ldr	r3, [pc, #252]	@ (800d3ac <USBD_SetConfig+0x150>)
 800d2ae:	781b      	ldrb	r3, [r3, #0]
 800d2b0:	4619      	mov	r1, r3
 800d2b2:	6878      	ldr	r0, [r7, #4]
 800d2b4:	f7fe ffb9 	bl	800c22a <USBD_SetClassConfig>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d2bc:	7bfb      	ldrb	r3, [r7, #15]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d008      	beq.n	800d2d4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d2c2:	6839      	ldr	r1, [r7, #0]
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f000 f962 	bl	800d58e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2202      	movs	r2, #2
 800d2ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d2d2:	e065      	b.n	800d3a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f000 fa31 	bl	800d73c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2203      	movs	r2, #3
 800d2de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d2e2:	e05d      	b.n	800d3a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f000 fa29 	bl	800d73c <USBD_CtlSendStatus>
      break;
 800d2ea:	e059      	b.n	800d3a0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d2ec:	4b2f      	ldr	r3, [pc, #188]	@ (800d3ac <USBD_SetConfig+0x150>)
 800d2ee:	781b      	ldrb	r3, [r3, #0]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d112      	bne.n	800d31a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2202      	movs	r2, #2
 800d2f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d2fc:	4b2b      	ldr	r3, [pc, #172]	@ (800d3ac <USBD_SetConfig+0x150>)
 800d2fe:	781b      	ldrb	r3, [r3, #0]
 800d300:	461a      	mov	r2, r3
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d306:	4b29      	ldr	r3, [pc, #164]	@ (800d3ac <USBD_SetConfig+0x150>)
 800d308:	781b      	ldrb	r3, [r3, #0]
 800d30a:	4619      	mov	r1, r3
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f7fe ffa8 	bl	800c262 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	f000 fa12 	bl	800d73c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d318:	e042      	b.n	800d3a0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d31a:	4b24      	ldr	r3, [pc, #144]	@ (800d3ac <USBD_SetConfig+0x150>)
 800d31c:	781b      	ldrb	r3, [r3, #0]
 800d31e:	461a      	mov	r2, r3
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	685b      	ldr	r3, [r3, #4]
 800d324:	429a      	cmp	r2, r3
 800d326:	d02a      	beq.n	800d37e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	685b      	ldr	r3, [r3, #4]
 800d32c:	b2db      	uxtb	r3, r3
 800d32e:	4619      	mov	r1, r3
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f7fe ff96 	bl	800c262 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d336:	4b1d      	ldr	r3, [pc, #116]	@ (800d3ac <USBD_SetConfig+0x150>)
 800d338:	781b      	ldrb	r3, [r3, #0]
 800d33a:	461a      	mov	r2, r3
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d340:	4b1a      	ldr	r3, [pc, #104]	@ (800d3ac <USBD_SetConfig+0x150>)
 800d342:	781b      	ldrb	r3, [r3, #0]
 800d344:	4619      	mov	r1, r3
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	f7fe ff6f 	bl	800c22a <USBD_SetClassConfig>
 800d34c:	4603      	mov	r3, r0
 800d34e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d350:	7bfb      	ldrb	r3, [r7, #15]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d00f      	beq.n	800d376 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d356:	6839      	ldr	r1, [r7, #0]
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	f000 f918 	bl	800d58e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	685b      	ldr	r3, [r3, #4]
 800d362:	b2db      	uxtb	r3, r3
 800d364:	4619      	mov	r1, r3
 800d366:	6878      	ldr	r0, [r7, #4]
 800d368:	f7fe ff7b 	bl	800c262 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2202      	movs	r2, #2
 800d370:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d374:	e014      	b.n	800d3a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d376:	6878      	ldr	r0, [r7, #4]
 800d378:	f000 f9e0 	bl	800d73c <USBD_CtlSendStatus>
      break;
 800d37c:	e010      	b.n	800d3a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f000 f9dc 	bl	800d73c <USBD_CtlSendStatus>
      break;
 800d384:	e00c      	b.n	800d3a0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d386:	6839      	ldr	r1, [r7, #0]
 800d388:	6878      	ldr	r0, [r7, #4]
 800d38a:	f000 f900 	bl	800d58e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d38e:	4b07      	ldr	r3, [pc, #28]	@ (800d3ac <USBD_SetConfig+0x150>)
 800d390:	781b      	ldrb	r3, [r3, #0]
 800d392:	4619      	mov	r1, r3
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f7fe ff64 	bl	800c262 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d39a:	2303      	movs	r3, #3
 800d39c:	73fb      	strb	r3, [r7, #15]
      break;
 800d39e:	bf00      	nop
  }

  return ret;
 800d3a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	3710      	adds	r7, #16
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	bd80      	pop	{r7, pc}
 800d3aa:	bf00      	nop
 800d3ac:	24000338 	.word	0x24000338

0800d3b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b082      	sub	sp, #8
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
 800d3b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	88db      	ldrh	r3, [r3, #6]
 800d3be:	2b01      	cmp	r3, #1
 800d3c0:	d004      	beq.n	800d3cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d3c2:	6839      	ldr	r1, [r7, #0]
 800d3c4:	6878      	ldr	r0, [r7, #4]
 800d3c6:	f000 f8e2 	bl	800d58e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d3ca:	e023      	b.n	800d414 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d3d2:	b2db      	uxtb	r3, r3
 800d3d4:	2b02      	cmp	r3, #2
 800d3d6:	dc02      	bgt.n	800d3de <USBD_GetConfig+0x2e>
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	dc03      	bgt.n	800d3e4 <USBD_GetConfig+0x34>
 800d3dc:	e015      	b.n	800d40a <USBD_GetConfig+0x5a>
 800d3de:	2b03      	cmp	r3, #3
 800d3e0:	d00b      	beq.n	800d3fa <USBD_GetConfig+0x4a>
 800d3e2:	e012      	b.n	800d40a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	3308      	adds	r3, #8
 800d3ee:	2201      	movs	r2, #1
 800d3f0:	4619      	mov	r1, r3
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	f000 f948 	bl	800d688 <USBD_CtlSendData>
        break;
 800d3f8:	e00c      	b.n	800d414 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	3304      	adds	r3, #4
 800d3fe:	2201      	movs	r2, #1
 800d400:	4619      	mov	r1, r3
 800d402:	6878      	ldr	r0, [r7, #4]
 800d404:	f000 f940 	bl	800d688 <USBD_CtlSendData>
        break;
 800d408:	e004      	b.n	800d414 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d40a:	6839      	ldr	r1, [r7, #0]
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f000 f8be 	bl	800d58e <USBD_CtlError>
        break;
 800d412:	bf00      	nop
}
 800d414:	bf00      	nop
 800d416:	3708      	adds	r7, #8
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}

0800d41c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b082      	sub	sp, #8
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
 800d424:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d42c:	b2db      	uxtb	r3, r3
 800d42e:	3b01      	subs	r3, #1
 800d430:	2b02      	cmp	r3, #2
 800d432:	d81e      	bhi.n	800d472 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	88db      	ldrh	r3, [r3, #6]
 800d438:	2b02      	cmp	r3, #2
 800d43a:	d004      	beq.n	800d446 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d43c:	6839      	ldr	r1, [r7, #0]
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f000 f8a5 	bl	800d58e <USBD_CtlError>
        break;
 800d444:	e01a      	b.n	800d47c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	2201      	movs	r2, #1
 800d44a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d452:	2b00      	cmp	r3, #0
 800d454:	d005      	beq.n	800d462 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	68db      	ldr	r3, [r3, #12]
 800d45a:	f043 0202 	orr.w	r2, r3, #2
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	330c      	adds	r3, #12
 800d466:	2202      	movs	r2, #2
 800d468:	4619      	mov	r1, r3
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f000 f90c 	bl	800d688 <USBD_CtlSendData>
      break;
 800d470:	e004      	b.n	800d47c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d472:	6839      	ldr	r1, [r7, #0]
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f000 f88a 	bl	800d58e <USBD_CtlError>
      break;
 800d47a:	bf00      	nop
  }
}
 800d47c:	bf00      	nop
 800d47e:	3708      	adds	r7, #8
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}

0800d484 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b082      	sub	sp, #8
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
 800d48c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	885b      	ldrh	r3, [r3, #2]
 800d492:	2b01      	cmp	r3, #1
 800d494:	d107      	bne.n	800d4a6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	2201      	movs	r2, #1
 800d49a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	f000 f94c 	bl	800d73c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d4a4:	e013      	b.n	800d4ce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	885b      	ldrh	r3, [r3, #2]
 800d4aa:	2b02      	cmp	r3, #2
 800d4ac:	d10b      	bne.n	800d4c6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	889b      	ldrh	r3, [r3, #4]
 800d4b2:	0a1b      	lsrs	r3, r3, #8
 800d4b4:	b29b      	uxth	r3, r3
 800d4b6:	b2da      	uxtb	r2, r3
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d4be:	6878      	ldr	r0, [r7, #4]
 800d4c0:	f000 f93c 	bl	800d73c <USBD_CtlSendStatus>
}
 800d4c4:	e003      	b.n	800d4ce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d4c6:	6839      	ldr	r1, [r7, #0]
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f000 f860 	bl	800d58e <USBD_CtlError>
}
 800d4ce:	bf00      	nop
 800d4d0:	3708      	adds	r7, #8
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}

0800d4d6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4d6:	b580      	push	{r7, lr}
 800d4d8:	b082      	sub	sp, #8
 800d4da:	af00      	add	r7, sp, #0
 800d4dc:	6078      	str	r0, [r7, #4]
 800d4de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d4e6:	b2db      	uxtb	r3, r3
 800d4e8:	3b01      	subs	r3, #1
 800d4ea:	2b02      	cmp	r3, #2
 800d4ec:	d80b      	bhi.n	800d506 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	885b      	ldrh	r3, [r3, #2]
 800d4f2:	2b01      	cmp	r3, #1
 800d4f4:	d10c      	bne.n	800d510 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f000 f91c 	bl	800d73c <USBD_CtlSendStatus>
      }
      break;
 800d504:	e004      	b.n	800d510 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d506:	6839      	ldr	r1, [r7, #0]
 800d508:	6878      	ldr	r0, [r7, #4]
 800d50a:	f000 f840 	bl	800d58e <USBD_CtlError>
      break;
 800d50e:	e000      	b.n	800d512 <USBD_ClrFeature+0x3c>
      break;
 800d510:	bf00      	nop
  }
}
 800d512:	bf00      	nop
 800d514:	3708      	adds	r7, #8
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}

0800d51a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d51a:	b580      	push	{r7, lr}
 800d51c:	b084      	sub	sp, #16
 800d51e:	af00      	add	r7, sp, #0
 800d520:	6078      	str	r0, [r7, #4]
 800d522:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	781a      	ldrb	r2, [r3, #0]
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	3301      	adds	r3, #1
 800d534:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	781a      	ldrb	r2, [r3, #0]
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	3301      	adds	r3, #1
 800d542:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d544:	68f8      	ldr	r0, [r7, #12]
 800d546:	f7ff fa16 	bl	800c976 <SWAPBYTE>
 800d54a:	4603      	mov	r3, r0
 800d54c:	461a      	mov	r2, r3
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	3301      	adds	r3, #1
 800d556:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	3301      	adds	r3, #1
 800d55c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d55e:	68f8      	ldr	r0, [r7, #12]
 800d560:	f7ff fa09 	bl	800c976 <SWAPBYTE>
 800d564:	4603      	mov	r3, r0
 800d566:	461a      	mov	r2, r3
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	3301      	adds	r3, #1
 800d570:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	3301      	adds	r3, #1
 800d576:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d578:	68f8      	ldr	r0, [r7, #12]
 800d57a:	f7ff f9fc 	bl	800c976 <SWAPBYTE>
 800d57e:	4603      	mov	r3, r0
 800d580:	461a      	mov	r2, r3
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	80da      	strh	r2, [r3, #6]
}
 800d586:	bf00      	nop
 800d588:	3710      	adds	r7, #16
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}

0800d58e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d58e:	b580      	push	{r7, lr}
 800d590:	b082      	sub	sp, #8
 800d592:	af00      	add	r7, sp, #0
 800d594:	6078      	str	r0, [r7, #4]
 800d596:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d598:	2180      	movs	r1, #128	@ 0x80
 800d59a:	6878      	ldr	r0, [r7, #4]
 800d59c:	f000 fcfc 	bl	800df98 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d5a0:	2100      	movs	r1, #0
 800d5a2:	6878      	ldr	r0, [r7, #4]
 800d5a4:	f000 fcf8 	bl	800df98 <USBD_LL_StallEP>
}
 800d5a8:	bf00      	nop
 800d5aa:	3708      	adds	r7, #8
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}

0800d5b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b086      	sub	sp, #24
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	60f8      	str	r0, [r7, #12]
 800d5b8:	60b9      	str	r1, [r7, #8]
 800d5ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d5bc:	2300      	movs	r3, #0
 800d5be:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d042      	beq.n	800d64c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800d5ca:	6938      	ldr	r0, [r7, #16]
 800d5cc:	f000 f842 	bl	800d654 <USBD_GetLen>
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	3301      	adds	r3, #1
 800d5d4:	005b      	lsls	r3, r3, #1
 800d5d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d5da:	d808      	bhi.n	800d5ee <USBD_GetString+0x3e>
 800d5dc:	6938      	ldr	r0, [r7, #16]
 800d5de:	f000 f839 	bl	800d654 <USBD_GetLen>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	3301      	adds	r3, #1
 800d5e6:	b29b      	uxth	r3, r3
 800d5e8:	005b      	lsls	r3, r3, #1
 800d5ea:	b29a      	uxth	r2, r3
 800d5ec:	e001      	b.n	800d5f2 <USBD_GetString+0x42>
 800d5ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d5f6:	7dfb      	ldrb	r3, [r7, #23]
 800d5f8:	68ba      	ldr	r2, [r7, #8]
 800d5fa:	4413      	add	r3, r2
 800d5fc:	687a      	ldr	r2, [r7, #4]
 800d5fe:	7812      	ldrb	r2, [r2, #0]
 800d600:	701a      	strb	r2, [r3, #0]
  idx++;
 800d602:	7dfb      	ldrb	r3, [r7, #23]
 800d604:	3301      	adds	r3, #1
 800d606:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d608:	7dfb      	ldrb	r3, [r7, #23]
 800d60a:	68ba      	ldr	r2, [r7, #8]
 800d60c:	4413      	add	r3, r2
 800d60e:	2203      	movs	r2, #3
 800d610:	701a      	strb	r2, [r3, #0]
  idx++;
 800d612:	7dfb      	ldrb	r3, [r7, #23]
 800d614:	3301      	adds	r3, #1
 800d616:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d618:	e013      	b.n	800d642 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800d61a:	7dfb      	ldrb	r3, [r7, #23]
 800d61c:	68ba      	ldr	r2, [r7, #8]
 800d61e:	4413      	add	r3, r2
 800d620:	693a      	ldr	r2, [r7, #16]
 800d622:	7812      	ldrb	r2, [r2, #0]
 800d624:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d626:	693b      	ldr	r3, [r7, #16]
 800d628:	3301      	adds	r3, #1
 800d62a:	613b      	str	r3, [r7, #16]
    idx++;
 800d62c:	7dfb      	ldrb	r3, [r7, #23]
 800d62e:	3301      	adds	r3, #1
 800d630:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d632:	7dfb      	ldrb	r3, [r7, #23]
 800d634:	68ba      	ldr	r2, [r7, #8]
 800d636:	4413      	add	r3, r2
 800d638:	2200      	movs	r2, #0
 800d63a:	701a      	strb	r2, [r3, #0]
    idx++;
 800d63c:	7dfb      	ldrb	r3, [r7, #23]
 800d63e:	3301      	adds	r3, #1
 800d640:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d642:	693b      	ldr	r3, [r7, #16]
 800d644:	781b      	ldrb	r3, [r3, #0]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d1e7      	bne.n	800d61a <USBD_GetString+0x6a>
 800d64a:	e000      	b.n	800d64e <USBD_GetString+0x9e>
    return;
 800d64c:	bf00      	nop
  }
}
 800d64e:	3718      	adds	r7, #24
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}

0800d654 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d654:	b480      	push	{r7}
 800d656:	b085      	sub	sp, #20
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d65c:	2300      	movs	r3, #0
 800d65e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d664:	e005      	b.n	800d672 <USBD_GetLen+0x1e>
  {
    len++;
 800d666:	7bfb      	ldrb	r3, [r7, #15]
 800d668:	3301      	adds	r3, #1
 800d66a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	3301      	adds	r3, #1
 800d670:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	781b      	ldrb	r3, [r3, #0]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d1f5      	bne.n	800d666 <USBD_GetLen+0x12>
  }

  return len;
 800d67a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d67c:	4618      	mov	r0, r3
 800d67e:	3714      	adds	r7, #20
 800d680:	46bd      	mov	sp, r7
 800d682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d686:	4770      	bx	lr

0800d688 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b084      	sub	sp, #16
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	60f8      	str	r0, [r7, #12]
 800d690:	60b9      	str	r1, [r7, #8]
 800d692:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	2202      	movs	r2, #2
 800d698:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	687a      	ldr	r2, [r7, #4]
 800d6a0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	687a      	ldr	r2, [r7, #4]
 800d6a6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	68ba      	ldr	r2, [r7, #8]
 800d6ac:	2100      	movs	r1, #0
 800d6ae:	68f8      	ldr	r0, [r7, #12]
 800d6b0:	f000 fcfb 	bl	800e0aa <USBD_LL_Transmit>

  return USBD_OK;
 800d6b4:	2300      	movs	r3, #0
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	3710      	adds	r7, #16
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}

0800d6be <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d6be:	b580      	push	{r7, lr}
 800d6c0:	b084      	sub	sp, #16
 800d6c2:	af00      	add	r7, sp, #0
 800d6c4:	60f8      	str	r0, [r7, #12]
 800d6c6:	60b9      	str	r1, [r7, #8]
 800d6c8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	68ba      	ldr	r2, [r7, #8]
 800d6ce:	2100      	movs	r1, #0
 800d6d0:	68f8      	ldr	r0, [r7, #12]
 800d6d2:	f000 fcea 	bl	800e0aa <USBD_LL_Transmit>

  return USBD_OK;
 800d6d6:	2300      	movs	r3, #0
}
 800d6d8:	4618      	mov	r0, r3
 800d6da:	3710      	adds	r7, #16
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}

0800d6e0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b084      	sub	sp, #16
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	60f8      	str	r0, [r7, #12]
 800d6e8:	60b9      	str	r1, [r7, #8]
 800d6ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	2203      	movs	r2, #3
 800d6f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	687a      	ldr	r2, [r7, #4]
 800d6f8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	687a      	ldr	r2, [r7, #4]
 800d700:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	68ba      	ldr	r2, [r7, #8]
 800d708:	2100      	movs	r1, #0
 800d70a:	68f8      	ldr	r0, [r7, #12]
 800d70c:	f000 fcee 	bl	800e0ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d710:	2300      	movs	r3, #0
}
 800d712:	4618      	mov	r0, r3
 800d714:	3710      	adds	r7, #16
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}

0800d71a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d71a:	b580      	push	{r7, lr}
 800d71c:	b084      	sub	sp, #16
 800d71e:	af00      	add	r7, sp, #0
 800d720:	60f8      	str	r0, [r7, #12]
 800d722:	60b9      	str	r1, [r7, #8]
 800d724:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	68ba      	ldr	r2, [r7, #8]
 800d72a:	2100      	movs	r1, #0
 800d72c:	68f8      	ldr	r0, [r7, #12]
 800d72e:	f000 fcdd 	bl	800e0ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d732:	2300      	movs	r3, #0
}
 800d734:	4618      	mov	r0, r3
 800d736:	3710      	adds	r7, #16
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}

0800d73c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b082      	sub	sp, #8
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2204      	movs	r2, #4
 800d748:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d74c:	2300      	movs	r3, #0
 800d74e:	2200      	movs	r2, #0
 800d750:	2100      	movs	r1, #0
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	f000 fca9 	bl	800e0aa <USBD_LL_Transmit>

  return USBD_OK;
 800d758:	2300      	movs	r3, #0
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	3708      	adds	r7, #8
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}

0800d762 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d762:	b580      	push	{r7, lr}
 800d764:	b082      	sub	sp, #8
 800d766:	af00      	add	r7, sp, #0
 800d768:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2205      	movs	r2, #5
 800d76e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d772:	2300      	movs	r3, #0
 800d774:	2200      	movs	r2, #0
 800d776:	2100      	movs	r1, #0
 800d778:	6878      	ldr	r0, [r7, #4]
 800d77a:	f000 fcb7 	bl	800e0ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d77e:	2300      	movs	r3, #0
}
 800d780:	4618      	mov	r0, r3
 800d782:	3708      	adds	r7, #8
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}

0800d788 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800d78c:	2201      	movs	r2, #1
 800d78e:	4913      	ldr	r1, [pc, #76]	@ (800d7dc <MX_USB_DEVICE_Init+0x54>)
 800d790:	4813      	ldr	r0, [pc, #76]	@ (800d7e0 <MX_USB_DEVICE_Init+0x58>)
 800d792:	f7fe fccd 	bl	800c130 <USBD_Init>
 800d796:	4603      	mov	r3, r0
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d001      	beq.n	800d7a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d79c:	f7f3 f9de 	bl	8000b5c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800d7a0:	4910      	ldr	r1, [pc, #64]	@ (800d7e4 <MX_USB_DEVICE_Init+0x5c>)
 800d7a2:	480f      	ldr	r0, [pc, #60]	@ (800d7e0 <MX_USB_DEVICE_Init+0x58>)
 800d7a4:	f7fe fcf4 	bl	800c190 <USBD_RegisterClass>
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d001      	beq.n	800d7b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d7ae:	f7f3 f9d5 	bl	8000b5c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800d7b2:	490d      	ldr	r1, [pc, #52]	@ (800d7e8 <MX_USB_DEVICE_Init+0x60>)
 800d7b4:	480a      	ldr	r0, [pc, #40]	@ (800d7e0 <MX_USB_DEVICE_Init+0x58>)
 800d7b6:	f7fe fc2b 	bl	800c010 <USBD_CDC_RegisterInterface>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d001      	beq.n	800d7c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d7c0:	f7f3 f9cc 	bl	8000b5c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800d7c4:	4806      	ldr	r0, [pc, #24]	@ (800d7e0 <MX_USB_DEVICE_Init+0x58>)
 800d7c6:	f7fe fd19 	bl	800c1fc <USBD_Start>
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d001      	beq.n	800d7d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d7d0:	f7f3 f9c4 	bl	8000b5c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800d7d4:	f7f7 f8f2 	bl	80049bc <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d7d8:	bf00      	nop
 800d7da:	bd80      	pop	{r7, pc}
 800d7dc:	240000b0 	.word	0x240000b0
 800d7e0:	2400033c 	.word	0x2400033c
 800d7e4:	2400001c 	.word	0x2400001c
 800d7e8:	2400009c 	.word	0x2400009c

0800d7ec <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	4905      	ldr	r1, [pc, #20]	@ (800d808 <CDC_Init_HS+0x1c>)
 800d7f4:	4805      	ldr	r0, [pc, #20]	@ (800d80c <CDC_Init_HS+0x20>)
 800d7f6:	f7fe fc25 	bl	800c044 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800d7fa:	4905      	ldr	r1, [pc, #20]	@ (800d810 <CDC_Init_HS+0x24>)
 800d7fc:	4803      	ldr	r0, [pc, #12]	@ (800d80c <CDC_Init_HS+0x20>)
 800d7fe:	f7fe fc43 	bl	800c088 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d802:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800d804:	4618      	mov	r0, r3
 800d806:	bd80      	pop	{r7, pc}
 800d808:	24000e18 	.word	0x24000e18
 800d80c:	2400033c 	.word	0x2400033c
 800d810:	24000618 	.word	0x24000618

0800d814 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800d814:	b480      	push	{r7}
 800d816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800d818:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	46bd      	mov	sp, r7
 800d81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d822:	4770      	bx	lr

0800d824 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d824:	b480      	push	{r7}
 800d826:	b083      	sub	sp, #12
 800d828:	af00      	add	r7, sp, #0
 800d82a:	4603      	mov	r3, r0
 800d82c:	6039      	str	r1, [r7, #0]
 800d82e:	71fb      	strb	r3, [r7, #7]
 800d830:	4613      	mov	r3, r2
 800d832:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800d834:	79fb      	ldrb	r3, [r7, #7]
 800d836:	2b23      	cmp	r3, #35	@ 0x23
 800d838:	d84a      	bhi.n	800d8d0 <CDC_Control_HS+0xac>
 800d83a:	a201      	add	r2, pc, #4	@ (adr r2, 800d840 <CDC_Control_HS+0x1c>)
 800d83c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d840:	0800d8d1 	.word	0x0800d8d1
 800d844:	0800d8d1 	.word	0x0800d8d1
 800d848:	0800d8d1 	.word	0x0800d8d1
 800d84c:	0800d8d1 	.word	0x0800d8d1
 800d850:	0800d8d1 	.word	0x0800d8d1
 800d854:	0800d8d1 	.word	0x0800d8d1
 800d858:	0800d8d1 	.word	0x0800d8d1
 800d85c:	0800d8d1 	.word	0x0800d8d1
 800d860:	0800d8d1 	.word	0x0800d8d1
 800d864:	0800d8d1 	.word	0x0800d8d1
 800d868:	0800d8d1 	.word	0x0800d8d1
 800d86c:	0800d8d1 	.word	0x0800d8d1
 800d870:	0800d8d1 	.word	0x0800d8d1
 800d874:	0800d8d1 	.word	0x0800d8d1
 800d878:	0800d8d1 	.word	0x0800d8d1
 800d87c:	0800d8d1 	.word	0x0800d8d1
 800d880:	0800d8d1 	.word	0x0800d8d1
 800d884:	0800d8d1 	.word	0x0800d8d1
 800d888:	0800d8d1 	.word	0x0800d8d1
 800d88c:	0800d8d1 	.word	0x0800d8d1
 800d890:	0800d8d1 	.word	0x0800d8d1
 800d894:	0800d8d1 	.word	0x0800d8d1
 800d898:	0800d8d1 	.word	0x0800d8d1
 800d89c:	0800d8d1 	.word	0x0800d8d1
 800d8a0:	0800d8d1 	.word	0x0800d8d1
 800d8a4:	0800d8d1 	.word	0x0800d8d1
 800d8a8:	0800d8d1 	.word	0x0800d8d1
 800d8ac:	0800d8d1 	.word	0x0800d8d1
 800d8b0:	0800d8d1 	.word	0x0800d8d1
 800d8b4:	0800d8d1 	.word	0x0800d8d1
 800d8b8:	0800d8d1 	.word	0x0800d8d1
 800d8bc:	0800d8d1 	.word	0x0800d8d1
 800d8c0:	0800d8d1 	.word	0x0800d8d1
 800d8c4:	0800d8d1 	.word	0x0800d8d1
 800d8c8:	0800d8d1 	.word	0x0800d8d1
 800d8cc:	0800d8d1 	.word	0x0800d8d1
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d8d0:	bf00      	nop
  }

  return (USBD_OK);
 800d8d2:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	370c      	adds	r7, #12
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8de:	4770      	bx	lr

0800d8e0 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b082      	sub	sp, #8
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
 800d8e8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800d8ea:	6879      	ldr	r1, [r7, #4]
 800d8ec:	4805      	ldr	r0, [pc, #20]	@ (800d904 <CDC_Receive_HS+0x24>)
 800d8ee:	f7fe fbcb 	bl	800c088 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800d8f2:	4804      	ldr	r0, [pc, #16]	@ (800d904 <CDC_Receive_HS+0x24>)
 800d8f4:	f7fe fbe6 	bl	800c0c4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d8f8:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	3708      	adds	r7, #8
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}
 800d902:	bf00      	nop
 800d904:	2400033c 	.word	0x2400033c

0800d908 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d908:	b480      	push	{r7}
 800d90a:	b087      	sub	sp, #28
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	60f8      	str	r0, [r7, #12]
 800d910:	60b9      	str	r1, [r7, #8]
 800d912:	4613      	mov	r3, r2
 800d914:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d916:	2300      	movs	r3, #0
 800d918:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800d91a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d91e:	4618      	mov	r0, r3
 800d920:	371c      	adds	r7, #28
 800d922:	46bd      	mov	sp, r7
 800d924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d928:	4770      	bx	lr
	...

0800d92c <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d92c:	b480      	push	{r7}
 800d92e:	b083      	sub	sp, #12
 800d930:	af00      	add	r7, sp, #0
 800d932:	4603      	mov	r3, r0
 800d934:	6039      	str	r1, [r7, #0]
 800d936:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	2212      	movs	r2, #18
 800d93c:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800d93e:	4b03      	ldr	r3, [pc, #12]	@ (800d94c <USBD_HS_DeviceDescriptor+0x20>)
}
 800d940:	4618      	mov	r0, r3
 800d942:	370c      	adds	r7, #12
 800d944:	46bd      	mov	sp, r7
 800d946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94a:	4770      	bx	lr
 800d94c:	240000d0 	.word	0x240000d0

0800d950 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d950:	b480      	push	{r7}
 800d952:	b083      	sub	sp, #12
 800d954:	af00      	add	r7, sp, #0
 800d956:	4603      	mov	r3, r0
 800d958:	6039      	str	r1, [r7, #0]
 800d95a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	2204      	movs	r2, #4
 800d960:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d962:	4b03      	ldr	r3, [pc, #12]	@ (800d970 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800d964:	4618      	mov	r0, r3
 800d966:	370c      	adds	r7, #12
 800d968:	46bd      	mov	sp, r7
 800d96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96e:	4770      	bx	lr
 800d970:	240000e4 	.word	0x240000e4

0800d974 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b082      	sub	sp, #8
 800d978:	af00      	add	r7, sp, #0
 800d97a:	4603      	mov	r3, r0
 800d97c:	6039      	str	r1, [r7, #0]
 800d97e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d980:	79fb      	ldrb	r3, [r7, #7]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d105      	bne.n	800d992 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800d986:	683a      	ldr	r2, [r7, #0]
 800d988:	4907      	ldr	r1, [pc, #28]	@ (800d9a8 <USBD_HS_ProductStrDescriptor+0x34>)
 800d98a:	4808      	ldr	r0, [pc, #32]	@ (800d9ac <USBD_HS_ProductStrDescriptor+0x38>)
 800d98c:	f7ff fe10 	bl	800d5b0 <USBD_GetString>
 800d990:	e004      	b.n	800d99c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800d992:	683a      	ldr	r2, [r7, #0]
 800d994:	4904      	ldr	r1, [pc, #16]	@ (800d9a8 <USBD_HS_ProductStrDescriptor+0x34>)
 800d996:	4805      	ldr	r0, [pc, #20]	@ (800d9ac <USBD_HS_ProductStrDescriptor+0x38>)
 800d998:	f7ff fe0a 	bl	800d5b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d99c:	4b02      	ldr	r3, [pc, #8]	@ (800d9a8 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800d99e:	4618      	mov	r0, r3
 800d9a0:	3708      	adds	r7, #8
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bd80      	pop	{r7, pc}
 800d9a6:	bf00      	nop
 800d9a8:	24001618 	.word	0x24001618
 800d9ac:	0800e24c 	.word	0x0800e24c

0800d9b0 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b082      	sub	sp, #8
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	6039      	str	r1, [r7, #0]
 800d9ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d9bc:	683a      	ldr	r2, [r7, #0]
 800d9be:	4904      	ldr	r1, [pc, #16]	@ (800d9d0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800d9c0:	4804      	ldr	r0, [pc, #16]	@ (800d9d4 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800d9c2:	f7ff fdf5 	bl	800d5b0 <USBD_GetString>
  return USBD_StrDesc;
 800d9c6:	4b02      	ldr	r3, [pc, #8]	@ (800d9d0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	3708      	adds	r7, #8
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}
 800d9d0:	24001618 	.word	0x24001618
 800d9d4:	0800e264 	.word	0x0800e264

0800d9d8 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b082      	sub	sp, #8
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	4603      	mov	r3, r0
 800d9e0:	6039      	str	r1, [r7, #0]
 800d9e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	221a      	movs	r2, #26
 800d9e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d9ea:	f000 f843 	bl	800da74 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800d9ee:	4b02      	ldr	r3, [pc, #8]	@ (800d9f8 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	3708      	adds	r7, #8
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}
 800d9f8:	240000e8 	.word	0x240000e8

0800d9fc <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b082      	sub	sp, #8
 800da00:	af00      	add	r7, sp, #0
 800da02:	4603      	mov	r3, r0
 800da04:	6039      	str	r1, [r7, #0]
 800da06:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800da08:	79fb      	ldrb	r3, [r7, #7]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d105      	bne.n	800da1a <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800da0e:	683a      	ldr	r2, [r7, #0]
 800da10:	4907      	ldr	r1, [pc, #28]	@ (800da30 <USBD_HS_ConfigStrDescriptor+0x34>)
 800da12:	4808      	ldr	r0, [pc, #32]	@ (800da34 <USBD_HS_ConfigStrDescriptor+0x38>)
 800da14:	f7ff fdcc 	bl	800d5b0 <USBD_GetString>
 800da18:	e004      	b.n	800da24 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800da1a:	683a      	ldr	r2, [r7, #0]
 800da1c:	4904      	ldr	r1, [pc, #16]	@ (800da30 <USBD_HS_ConfigStrDescriptor+0x34>)
 800da1e:	4805      	ldr	r0, [pc, #20]	@ (800da34 <USBD_HS_ConfigStrDescriptor+0x38>)
 800da20:	f7ff fdc6 	bl	800d5b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800da24:	4b02      	ldr	r3, [pc, #8]	@ (800da30 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800da26:	4618      	mov	r0, r3
 800da28:	3708      	adds	r7, #8
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}
 800da2e:	bf00      	nop
 800da30:	24001618 	.word	0x24001618
 800da34:	0800e278 	.word	0x0800e278

0800da38 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b082      	sub	sp, #8
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	4603      	mov	r3, r0
 800da40:	6039      	str	r1, [r7, #0]
 800da42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800da44:	79fb      	ldrb	r3, [r7, #7]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d105      	bne.n	800da56 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800da4a:	683a      	ldr	r2, [r7, #0]
 800da4c:	4907      	ldr	r1, [pc, #28]	@ (800da6c <USBD_HS_InterfaceStrDescriptor+0x34>)
 800da4e:	4808      	ldr	r0, [pc, #32]	@ (800da70 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800da50:	f7ff fdae 	bl	800d5b0 <USBD_GetString>
 800da54:	e004      	b.n	800da60 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800da56:	683a      	ldr	r2, [r7, #0]
 800da58:	4904      	ldr	r1, [pc, #16]	@ (800da6c <USBD_HS_InterfaceStrDescriptor+0x34>)
 800da5a:	4805      	ldr	r0, [pc, #20]	@ (800da70 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800da5c:	f7ff fda8 	bl	800d5b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800da60:	4b02      	ldr	r3, [pc, #8]	@ (800da6c <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800da62:	4618      	mov	r0, r3
 800da64:	3708      	adds	r7, #8
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}
 800da6a:	bf00      	nop
 800da6c:	24001618 	.word	0x24001618
 800da70:	0800e284 	.word	0x0800e284

0800da74 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b084      	sub	sp, #16
 800da78:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800da7a:	4b0f      	ldr	r3, [pc, #60]	@ (800dab8 <Get_SerialNum+0x44>)
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800da80:	4b0e      	ldr	r3, [pc, #56]	@ (800dabc <Get_SerialNum+0x48>)
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800da86:	4b0e      	ldr	r3, [pc, #56]	@ (800dac0 <Get_SerialNum+0x4c>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800da8c:	68fa      	ldr	r2, [r7, #12]
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	4413      	add	r3, r2
 800da92:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d009      	beq.n	800daae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800da9a:	2208      	movs	r2, #8
 800da9c:	4909      	ldr	r1, [pc, #36]	@ (800dac4 <Get_SerialNum+0x50>)
 800da9e:	68f8      	ldr	r0, [r7, #12]
 800daa0:	f000 f814 	bl	800dacc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800daa4:	2204      	movs	r2, #4
 800daa6:	4908      	ldr	r1, [pc, #32]	@ (800dac8 <Get_SerialNum+0x54>)
 800daa8:	68b8      	ldr	r0, [r7, #8]
 800daaa:	f000 f80f 	bl	800dacc <IntToUnicode>
  }
}
 800daae:	bf00      	nop
 800dab0:	3710      	adds	r7, #16
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}
 800dab6:	bf00      	nop
 800dab8:	08fff800 	.word	0x08fff800
 800dabc:	08fff804 	.word	0x08fff804
 800dac0:	08fff808 	.word	0x08fff808
 800dac4:	240000ea 	.word	0x240000ea
 800dac8:	240000fa 	.word	0x240000fa

0800dacc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800dacc:	b480      	push	{r7}
 800dace:	b087      	sub	sp, #28
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	60f8      	str	r0, [r7, #12]
 800dad4:	60b9      	str	r1, [r7, #8]
 800dad6:	4613      	mov	r3, r2
 800dad8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800dada:	2300      	movs	r3, #0
 800dadc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dade:	2300      	movs	r3, #0
 800dae0:	75fb      	strb	r3, [r7, #23]
 800dae2:	e027      	b.n	800db34 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	0f1b      	lsrs	r3, r3, #28
 800dae8:	2b09      	cmp	r3, #9
 800daea:	d80b      	bhi.n	800db04 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	0f1b      	lsrs	r3, r3, #28
 800daf0:	b2da      	uxtb	r2, r3
 800daf2:	7dfb      	ldrb	r3, [r7, #23]
 800daf4:	005b      	lsls	r3, r3, #1
 800daf6:	4619      	mov	r1, r3
 800daf8:	68bb      	ldr	r3, [r7, #8]
 800dafa:	440b      	add	r3, r1
 800dafc:	3230      	adds	r2, #48	@ 0x30
 800dafe:	b2d2      	uxtb	r2, r2
 800db00:	701a      	strb	r2, [r3, #0]
 800db02:	e00a      	b.n	800db1a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	0f1b      	lsrs	r3, r3, #28
 800db08:	b2da      	uxtb	r2, r3
 800db0a:	7dfb      	ldrb	r3, [r7, #23]
 800db0c:	005b      	lsls	r3, r3, #1
 800db0e:	4619      	mov	r1, r3
 800db10:	68bb      	ldr	r3, [r7, #8]
 800db12:	440b      	add	r3, r1
 800db14:	3237      	adds	r2, #55	@ 0x37
 800db16:	b2d2      	uxtb	r2, r2
 800db18:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	011b      	lsls	r3, r3, #4
 800db1e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800db20:	7dfb      	ldrb	r3, [r7, #23]
 800db22:	005b      	lsls	r3, r3, #1
 800db24:	3301      	adds	r3, #1
 800db26:	68ba      	ldr	r2, [r7, #8]
 800db28:	4413      	add	r3, r2
 800db2a:	2200      	movs	r2, #0
 800db2c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800db2e:	7dfb      	ldrb	r3, [r7, #23]
 800db30:	3301      	adds	r3, #1
 800db32:	75fb      	strb	r3, [r7, #23]
 800db34:	7dfa      	ldrb	r2, [r7, #23]
 800db36:	79fb      	ldrb	r3, [r7, #7]
 800db38:	429a      	cmp	r2, r3
 800db3a:	d3d3      	bcc.n	800dae4 <IntToUnicode+0x18>
  }
}
 800db3c:	bf00      	nop
 800db3e:	bf00      	nop
 800db40:	371c      	adds	r7, #28
 800db42:	46bd      	mov	sp, r7
 800db44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db48:	4770      	bx	lr
	...

0800db4c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b0ba      	sub	sp, #232	@ 0xe8
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800db54:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800db58:	2200      	movs	r2, #0
 800db5a:	601a      	str	r2, [r3, #0]
 800db5c:	605a      	str	r2, [r3, #4]
 800db5e:	609a      	str	r2, [r3, #8]
 800db60:	60da      	str	r2, [r3, #12]
 800db62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800db64:	f107 0310 	add.w	r3, r7, #16
 800db68:	22c0      	movs	r2, #192	@ 0xc0
 800db6a:	2100      	movs	r1, #0
 800db6c:	4618      	mov	r0, r3
 800db6e:	f000 fb35 	bl	800e1dc <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	4a33      	ldr	r2, [pc, #204]	@ (800dc44 <HAL_PCD_MspInit+0xf8>)
 800db78:	4293      	cmp	r3, r2
 800db7a:	d15e      	bne.n	800dc3a <HAL_PCD_MspInit+0xee>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800db7c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800db80:	f04f 0300 	mov.w	r3, #0
 800db84:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800db88:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800db8c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800db90:	f107 0310 	add.w	r3, r7, #16
 800db94:	4618      	mov	r0, r3
 800db96:	f7f7 ff49 	bl	8005a2c <HAL_RCCEx_PeriphCLKConfig>
 800db9a:	4603      	mov	r3, r0
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d001      	beq.n	800dba4 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800dba0:	f7f2 ffdc 	bl	8000b5c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800dba4:	f7f6 ff0a 	bl	80049bc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dba8:	4b27      	ldr	r3, [pc, #156]	@ (800dc48 <HAL_PCD_MspInit+0xfc>)
 800dbaa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800dbae:	4a26      	ldr	r2, [pc, #152]	@ (800dc48 <HAL_PCD_MspInit+0xfc>)
 800dbb0:	f043 0301 	orr.w	r3, r3, #1
 800dbb4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800dbb8:	4b23      	ldr	r3, [pc, #140]	@ (800dc48 <HAL_PCD_MspInit+0xfc>)
 800dbba:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800dbbe:	f003 0301 	and.w	r3, r3, #1
 800dbc2:	60fb      	str	r3, [r7, #12]
 800dbc4:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    PA11     ------> USB_OTG_HS_DM
    PA12     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 800dbc6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dbca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800dbda:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800dbde:	4619      	mov	r1, r3
 800dbe0:	481a      	ldr	r0, [pc, #104]	@ (800dc4c <HAL_PCD_MspInit+0x100>)
 800dbe2:	f7f5 fa2f 	bl	8003044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USP_FS_DM_Pin|USB_FS_DP_Pin;
 800dbe6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800dbea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dbee:	2302      	movs	r3, #2
 800dbf0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dc00:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800dc04:	4619      	mov	r1, r3
 800dc06:	4811      	ldr	r0, [pc, #68]	@ (800dc4c <HAL_PCD_MspInit+0x100>)
 800dc08:	f7f5 fa1c 	bl	8003044 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800dc0c:	4b0e      	ldr	r3, [pc, #56]	@ (800dc48 <HAL_PCD_MspInit+0xfc>)
 800dc0e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800dc12:	4a0d      	ldr	r2, [pc, #52]	@ (800dc48 <HAL_PCD_MspInit+0xfc>)
 800dc14:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800dc18:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 800dc1c:	4b0a      	ldr	r3, [pc, #40]	@ (800dc48 <HAL_PCD_MspInit+0xfc>)
 800dc1e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800dc22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dc26:	60bb      	str	r3, [r7, #8]
 800dc28:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	2100      	movs	r1, #0
 800dc2e:	204d      	movs	r0, #77	@ 0x4d
 800dc30:	f7f4 fbf7 	bl	8002422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800dc34:	204d      	movs	r0, #77	@ 0x4d
 800dc36:	f7f4 fc0e 	bl	8002456 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800dc3a:	bf00      	nop
 800dc3c:	37e8      	adds	r7, #232	@ 0xe8
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}
 800dc42:	bf00      	nop
 800dc44:	40040000 	.word	0x40040000
 800dc48:	58024400 	.word	0x58024400
 800dc4c:	58020000 	.word	0x58020000

0800dc50 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b082      	sub	sp, #8
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800dc64:	4619      	mov	r1, r3
 800dc66:	4610      	mov	r0, r2
 800dc68:	f7fe fb15 	bl	800c296 <USBD_LL_SetupStage>
}
 800dc6c:	bf00      	nop
 800dc6e:	3708      	adds	r7, #8
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}

0800dc74 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b082      	sub	sp, #8
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
 800dc7c:	460b      	mov	r3, r1
 800dc7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800dc86:	78fa      	ldrb	r2, [r7, #3]
 800dc88:	6879      	ldr	r1, [r7, #4]
 800dc8a:	4613      	mov	r3, r2
 800dc8c:	00db      	lsls	r3, r3, #3
 800dc8e:	4413      	add	r3, r2
 800dc90:	009b      	lsls	r3, r3, #2
 800dc92:	440b      	add	r3, r1
 800dc94:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800dc98:	681a      	ldr	r2, [r3, #0]
 800dc9a:	78fb      	ldrb	r3, [r7, #3]
 800dc9c:	4619      	mov	r1, r3
 800dc9e:	f7fe fb4f 	bl	800c340 <USBD_LL_DataOutStage>
}
 800dca2:	bf00      	nop
 800dca4:	3708      	adds	r7, #8
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd80      	pop	{r7, pc}

0800dcaa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dcaa:	b580      	push	{r7, lr}
 800dcac:	b082      	sub	sp, #8
 800dcae:	af00      	add	r7, sp, #0
 800dcb0:	6078      	str	r0, [r7, #4]
 800dcb2:	460b      	mov	r3, r1
 800dcb4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800dcbc:	78fa      	ldrb	r2, [r7, #3]
 800dcbe:	6879      	ldr	r1, [r7, #4]
 800dcc0:	4613      	mov	r3, r2
 800dcc2:	00db      	lsls	r3, r3, #3
 800dcc4:	4413      	add	r3, r2
 800dcc6:	009b      	lsls	r3, r3, #2
 800dcc8:	440b      	add	r3, r1
 800dcca:	3320      	adds	r3, #32
 800dccc:	681a      	ldr	r2, [r3, #0]
 800dcce:	78fb      	ldrb	r3, [r7, #3]
 800dcd0:	4619      	mov	r1, r3
 800dcd2:	f7fe fbe8 	bl	800c4a6 <USBD_LL_DataInStage>
}
 800dcd6:	bf00      	nop
 800dcd8:	3708      	adds	r7, #8
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bd80      	pop	{r7, pc}

0800dcde <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dcde:	b580      	push	{r7, lr}
 800dce0:	b082      	sub	sp, #8
 800dce2:	af00      	add	r7, sp, #0
 800dce4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dcec:	4618      	mov	r0, r3
 800dcee:	f7fe fd22 	bl	800c736 <USBD_LL_SOF>
}
 800dcf2:	bf00      	nop
 800dcf4:	3708      	adds	r7, #8
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}

0800dcfa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dcfa:	b580      	push	{r7, lr}
 800dcfc:	b084      	sub	sp, #16
 800dcfe:	af00      	add	r7, sp, #0
 800dd00:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dd02:	2301      	movs	r3, #1
 800dd04:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	79db      	ldrb	r3, [r3, #7]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d102      	bne.n	800dd14 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	73fb      	strb	r3, [r7, #15]
 800dd12:	e008      	b.n	800dd26 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	79db      	ldrb	r3, [r3, #7]
 800dd18:	2b02      	cmp	r3, #2
 800dd1a:	d102      	bne.n	800dd22 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800dd1c:	2301      	movs	r3, #1
 800dd1e:	73fb      	strb	r3, [r7, #15]
 800dd20:	e001      	b.n	800dd26 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800dd22:	f7f2 ff1b 	bl	8000b5c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dd2c:	7bfa      	ldrb	r2, [r7, #15]
 800dd2e:	4611      	mov	r1, r2
 800dd30:	4618      	mov	r0, r3
 800dd32:	f7fe fcbc 	bl	800c6ae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	f7fe fc64 	bl	800c60a <USBD_LL_Reset>
}
 800dd42:	bf00      	nop
 800dd44:	3710      	adds	r7, #16
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bd80      	pop	{r7, pc}
	...

0800dd4c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b082      	sub	sp, #8
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f7fe fcb7 	bl	800c6ce <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	687a      	ldr	r2, [r7, #4]
 800dd6c:	6812      	ldr	r2, [r2, #0]
 800dd6e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800dd72:	f043 0301 	orr.w	r3, r3, #1
 800dd76:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	7adb      	ldrb	r3, [r3, #11]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d005      	beq.n	800dd8c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dd80:	4b04      	ldr	r3, [pc, #16]	@ (800dd94 <HAL_PCD_SuspendCallback+0x48>)
 800dd82:	691b      	ldr	r3, [r3, #16]
 800dd84:	4a03      	ldr	r2, [pc, #12]	@ (800dd94 <HAL_PCD_SuspendCallback+0x48>)
 800dd86:	f043 0306 	orr.w	r3, r3, #6
 800dd8a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800dd8c:	bf00      	nop
 800dd8e:	3708      	adds	r7, #8
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}
 800dd94:	e000ed00 	.word	0xe000ed00

0800dd98 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b082      	sub	sp, #8
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dda6:	4618      	mov	r0, r3
 800dda8:	f7fe fcad 	bl	800c706 <USBD_LL_Resume>
}
 800ddac:	bf00      	nop
 800ddae:	3708      	adds	r7, #8
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}

0800ddb4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b082      	sub	sp, #8
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
 800ddbc:	460b      	mov	r3, r1
 800ddbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ddc6:	78fa      	ldrb	r2, [r7, #3]
 800ddc8:	4611      	mov	r1, r2
 800ddca:	4618      	mov	r0, r3
 800ddcc:	f7fe fd05 	bl	800c7da <USBD_LL_IsoOUTIncomplete>
}
 800ddd0:	bf00      	nop
 800ddd2:	3708      	adds	r7, #8
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}

0800ddd8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b082      	sub	sp, #8
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
 800dde0:	460b      	mov	r3, r1
 800dde2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ddea:	78fa      	ldrb	r2, [r7, #3]
 800ddec:	4611      	mov	r1, r2
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f7fe fcc1 	bl	800c776 <USBD_LL_IsoINIncomplete>
}
 800ddf4:	bf00      	nop
 800ddf6:	3708      	adds	r7, #8
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	bd80      	pop	{r7, pc}

0800ddfc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b082      	sub	sp, #8
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800de0a:	4618      	mov	r0, r3
 800de0c:	f7fe fd17 	bl	800c83e <USBD_LL_DevConnected>
}
 800de10:	bf00      	nop
 800de12:	3708      	adds	r7, #8
 800de14:	46bd      	mov	sp, r7
 800de16:	bd80      	pop	{r7, pc}

0800de18 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b082      	sub	sp, #8
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800de26:	4618      	mov	r0, r3
 800de28:	f7fe fd14 	bl	800c854 <USBD_LL_DevDisconnected>
}
 800de2c:	bf00      	nop
 800de2e:	3708      	adds	r7, #8
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}

0800de34 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b082      	sub	sp, #8
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	781b      	ldrb	r3, [r3, #0]
 800de40:	2b01      	cmp	r3, #1
 800de42:	d140      	bne.n	800dec6 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800de44:	4a22      	ldr	r2, [pc, #136]	@ (800ded0 <USBD_LL_Init+0x9c>)
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	4a20      	ldr	r2, [pc, #128]	@ (800ded0 <USBD_LL_Init+0x9c>)
 800de50:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800de54:	4b1e      	ldr	r3, [pc, #120]	@ (800ded0 <USBD_LL_Init+0x9c>)
 800de56:	4a1f      	ldr	r2, [pc, #124]	@ (800ded4 <USBD_LL_Init+0xa0>)
 800de58:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800de5a:	4b1d      	ldr	r3, [pc, #116]	@ (800ded0 <USBD_LL_Init+0x9c>)
 800de5c:	2209      	movs	r2, #9
 800de5e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800de60:	4b1b      	ldr	r3, [pc, #108]	@ (800ded0 <USBD_LL_Init+0x9c>)
 800de62:	2202      	movs	r2, #2
 800de64:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800de66:	4b1a      	ldr	r3, [pc, #104]	@ (800ded0 <USBD_LL_Init+0x9c>)
 800de68:	2200      	movs	r2, #0
 800de6a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800de6c:	4b18      	ldr	r3, [pc, #96]	@ (800ded0 <USBD_LL_Init+0x9c>)
 800de6e:	2202      	movs	r2, #2
 800de70:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800de72:	4b17      	ldr	r3, [pc, #92]	@ (800ded0 <USBD_LL_Init+0x9c>)
 800de74:	2200      	movs	r2, #0
 800de76:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800de78:	4b15      	ldr	r3, [pc, #84]	@ (800ded0 <USBD_LL_Init+0x9c>)
 800de7a:	2200      	movs	r2, #0
 800de7c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800de7e:	4b14      	ldr	r3, [pc, #80]	@ (800ded0 <USBD_LL_Init+0x9c>)
 800de80:	2200      	movs	r2, #0
 800de82:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 800de84:	4b12      	ldr	r3, [pc, #72]	@ (800ded0 <USBD_LL_Init+0x9c>)
 800de86:	2201      	movs	r2, #1
 800de88:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800de8a:	4b11      	ldr	r3, [pc, #68]	@ (800ded0 <USBD_LL_Init+0x9c>)
 800de8c:	2200      	movs	r2, #0
 800de8e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800de90:	4b0f      	ldr	r3, [pc, #60]	@ (800ded0 <USBD_LL_Init+0x9c>)
 800de92:	2200      	movs	r2, #0
 800de94:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800de96:	480e      	ldr	r0, [pc, #56]	@ (800ded0 <USBD_LL_Init+0x9c>)
 800de98:	f7f5 fab7 	bl	800340a <HAL_PCD_Init>
 800de9c:	4603      	mov	r3, r0
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d001      	beq.n	800dea6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800dea2:	f7f2 fe5b 	bl	8000b5c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800dea6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800deaa:	4809      	ldr	r0, [pc, #36]	@ (800ded0 <USBD_LL_Init+0x9c>)
 800deac:	f7f6 fd0b 	bl	80048c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800deb0:	2280      	movs	r2, #128	@ 0x80
 800deb2:	2100      	movs	r1, #0
 800deb4:	4806      	ldr	r0, [pc, #24]	@ (800ded0 <USBD_LL_Init+0x9c>)
 800deb6:	f7f6 fcbf 	bl	8004838 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800deba:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800debe:	2101      	movs	r1, #1
 800dec0:	4803      	ldr	r0, [pc, #12]	@ (800ded0 <USBD_LL_Init+0x9c>)
 800dec2:	f7f6 fcb9 	bl	8004838 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 800dec6:	2300      	movs	r3, #0
}
 800dec8:	4618      	mov	r0, r3
 800deca:	3708      	adds	r7, #8
 800decc:	46bd      	mov	sp, r7
 800dece:	bd80      	pop	{r7, pc}
 800ded0:	24001818 	.word	0x24001818
 800ded4:	40040000 	.word	0x40040000

0800ded8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b084      	sub	sp, #16
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dee0:	2300      	movs	r3, #0
 800dee2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dee4:	2300      	movs	r3, #0
 800dee6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800deee:	4618      	mov	r0, r3
 800def0:	f7f5 fb97 	bl	8003622 <HAL_PCD_Start>
 800def4:	4603      	mov	r3, r0
 800def6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800def8:	7bfb      	ldrb	r3, [r7, #15]
 800defa:	4618      	mov	r0, r3
 800defc:	f000 f942 	bl	800e184 <USBD_Get_USB_Status>
 800df00:	4603      	mov	r3, r0
 800df02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df04:	7bbb      	ldrb	r3, [r7, #14]
}
 800df06:	4618      	mov	r0, r3
 800df08:	3710      	adds	r7, #16
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}

0800df0e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800df0e:	b580      	push	{r7, lr}
 800df10:	b084      	sub	sp, #16
 800df12:	af00      	add	r7, sp, #0
 800df14:	6078      	str	r0, [r7, #4]
 800df16:	4608      	mov	r0, r1
 800df18:	4611      	mov	r1, r2
 800df1a:	461a      	mov	r2, r3
 800df1c:	4603      	mov	r3, r0
 800df1e:	70fb      	strb	r3, [r7, #3]
 800df20:	460b      	mov	r3, r1
 800df22:	70bb      	strb	r3, [r7, #2]
 800df24:	4613      	mov	r3, r2
 800df26:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df28:	2300      	movs	r3, #0
 800df2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df2c:	2300      	movs	r3, #0
 800df2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800df36:	78bb      	ldrb	r3, [r7, #2]
 800df38:	883a      	ldrh	r2, [r7, #0]
 800df3a:	78f9      	ldrb	r1, [r7, #3]
 800df3c:	f7f6 f898 	bl	8004070 <HAL_PCD_EP_Open>
 800df40:	4603      	mov	r3, r0
 800df42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df44:	7bfb      	ldrb	r3, [r7, #15]
 800df46:	4618      	mov	r0, r3
 800df48:	f000 f91c 	bl	800e184 <USBD_Get_USB_Status>
 800df4c:	4603      	mov	r3, r0
 800df4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df50:	7bbb      	ldrb	r3, [r7, #14]
}
 800df52:	4618      	mov	r0, r3
 800df54:	3710      	adds	r7, #16
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}

0800df5a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800df5a:	b580      	push	{r7, lr}
 800df5c:	b084      	sub	sp, #16
 800df5e:	af00      	add	r7, sp, #0
 800df60:	6078      	str	r0, [r7, #4]
 800df62:	460b      	mov	r3, r1
 800df64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df66:	2300      	movs	r3, #0
 800df68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df6a:	2300      	movs	r3, #0
 800df6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800df74:	78fa      	ldrb	r2, [r7, #3]
 800df76:	4611      	mov	r1, r2
 800df78:	4618      	mov	r0, r3
 800df7a:	f7f6 f8e1 	bl	8004140 <HAL_PCD_EP_Close>
 800df7e:	4603      	mov	r3, r0
 800df80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df82:	7bfb      	ldrb	r3, [r7, #15]
 800df84:	4618      	mov	r0, r3
 800df86:	f000 f8fd 	bl	800e184 <USBD_Get_USB_Status>
 800df8a:	4603      	mov	r3, r0
 800df8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df8e:	7bbb      	ldrb	r3, [r7, #14]
}
 800df90:	4618      	mov	r0, r3
 800df92:	3710      	adds	r7, #16
 800df94:	46bd      	mov	sp, r7
 800df96:	bd80      	pop	{r7, pc}

0800df98 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b084      	sub	sp, #16
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
 800dfa0:	460b      	mov	r3, r1
 800dfa2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dfb2:	78fa      	ldrb	r2, [r7, #3]
 800dfb4:	4611      	mov	r1, r2
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	f7f6 f999 	bl	80042ee <HAL_PCD_EP_SetStall>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dfc0:	7bfb      	ldrb	r3, [r7, #15]
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f000 f8de 	bl	800e184 <USBD_Get_USB_Status>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dfcc:	7bbb      	ldrb	r3, [r7, #14]
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3710      	adds	r7, #16
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}

0800dfd6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dfd6:	b580      	push	{r7, lr}
 800dfd8:	b084      	sub	sp, #16
 800dfda:	af00      	add	r7, sp, #0
 800dfdc:	6078      	str	r0, [r7, #4]
 800dfde:	460b      	mov	r3, r1
 800dfe0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dff0:	78fa      	ldrb	r2, [r7, #3]
 800dff2:	4611      	mov	r1, r2
 800dff4:	4618      	mov	r0, r3
 800dff6:	f7f6 f9dd 	bl	80043b4 <HAL_PCD_EP_ClrStall>
 800dffa:	4603      	mov	r3, r0
 800dffc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dffe:	7bfb      	ldrb	r3, [r7, #15]
 800e000:	4618      	mov	r0, r3
 800e002:	f000 f8bf 	bl	800e184 <USBD_Get_USB_Status>
 800e006:	4603      	mov	r3, r0
 800e008:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e00a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e00c:	4618      	mov	r0, r3
 800e00e:	3710      	adds	r7, #16
 800e010:	46bd      	mov	sp, r7
 800e012:	bd80      	pop	{r7, pc}

0800e014 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e014:	b480      	push	{r7}
 800e016:	b085      	sub	sp, #20
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
 800e01c:	460b      	mov	r3, r1
 800e01e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e026:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e028:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	da0b      	bge.n	800e048 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e030:	78fb      	ldrb	r3, [r7, #3]
 800e032:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e036:	68f9      	ldr	r1, [r7, #12]
 800e038:	4613      	mov	r3, r2
 800e03a:	00db      	lsls	r3, r3, #3
 800e03c:	4413      	add	r3, r2
 800e03e:	009b      	lsls	r3, r3, #2
 800e040:	440b      	add	r3, r1
 800e042:	3316      	adds	r3, #22
 800e044:	781b      	ldrb	r3, [r3, #0]
 800e046:	e00b      	b.n	800e060 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e048:	78fb      	ldrb	r3, [r7, #3]
 800e04a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e04e:	68f9      	ldr	r1, [r7, #12]
 800e050:	4613      	mov	r3, r2
 800e052:	00db      	lsls	r3, r3, #3
 800e054:	4413      	add	r3, r2
 800e056:	009b      	lsls	r3, r3, #2
 800e058:	440b      	add	r3, r1
 800e05a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800e05e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e060:	4618      	mov	r0, r3
 800e062:	3714      	adds	r7, #20
 800e064:	46bd      	mov	sp, r7
 800e066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06a:	4770      	bx	lr

0800e06c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b084      	sub	sp, #16
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
 800e074:	460b      	mov	r3, r1
 800e076:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e078:	2300      	movs	r3, #0
 800e07a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e07c:	2300      	movs	r3, #0
 800e07e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e086:	78fa      	ldrb	r2, [r7, #3]
 800e088:	4611      	mov	r1, r2
 800e08a:	4618      	mov	r0, r3
 800e08c:	f7f5 ffcc 	bl	8004028 <HAL_PCD_SetAddress>
 800e090:	4603      	mov	r3, r0
 800e092:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e094:	7bfb      	ldrb	r3, [r7, #15]
 800e096:	4618      	mov	r0, r3
 800e098:	f000 f874 	bl	800e184 <USBD_Get_USB_Status>
 800e09c:	4603      	mov	r3, r0
 800e09e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e0a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	3710      	adds	r7, #16
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bd80      	pop	{r7, pc}

0800e0aa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e0aa:	b580      	push	{r7, lr}
 800e0ac:	b086      	sub	sp, #24
 800e0ae:	af00      	add	r7, sp, #0
 800e0b0:	60f8      	str	r0, [r7, #12]
 800e0b2:	607a      	str	r2, [r7, #4]
 800e0b4:	603b      	str	r3, [r7, #0]
 800e0b6:	460b      	mov	r3, r1
 800e0b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0be:	2300      	movs	r3, #0
 800e0c0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e0c8:	7af9      	ldrb	r1, [r7, #11]
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	687a      	ldr	r2, [r7, #4]
 800e0ce:	f7f6 f8d4 	bl	800427a <HAL_PCD_EP_Transmit>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e0d6:	7dfb      	ldrb	r3, [r7, #23]
 800e0d8:	4618      	mov	r0, r3
 800e0da:	f000 f853 	bl	800e184 <USBD_Get_USB_Status>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e0e2:	7dbb      	ldrb	r3, [r7, #22]
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3718      	adds	r7, #24
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}

0800e0ec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b086      	sub	sp, #24
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	60f8      	str	r0, [r7, #12]
 800e0f4:	607a      	str	r2, [r7, #4]
 800e0f6:	603b      	str	r3, [r7, #0]
 800e0f8:	460b      	mov	r3, r1
 800e0fa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e100:	2300      	movs	r3, #0
 800e102:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e10a:	7af9      	ldrb	r1, [r7, #11]
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	687a      	ldr	r2, [r7, #4]
 800e110:	f7f6 f860 	bl	80041d4 <HAL_PCD_EP_Receive>
 800e114:	4603      	mov	r3, r0
 800e116:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e118:	7dfb      	ldrb	r3, [r7, #23]
 800e11a:	4618      	mov	r0, r3
 800e11c:	f000 f832 	bl	800e184 <USBD_Get_USB_Status>
 800e120:	4603      	mov	r3, r0
 800e122:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e124:	7dbb      	ldrb	r3, [r7, #22]
}
 800e126:	4618      	mov	r0, r3
 800e128:	3718      	adds	r7, #24
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}

0800e12e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e12e:	b580      	push	{r7, lr}
 800e130:	b082      	sub	sp, #8
 800e132:	af00      	add	r7, sp, #0
 800e134:	6078      	str	r0, [r7, #4]
 800e136:	460b      	mov	r3, r1
 800e138:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e140:	78fa      	ldrb	r2, [r7, #3]
 800e142:	4611      	mov	r1, r2
 800e144:	4618      	mov	r0, r3
 800e146:	f7f6 f880 	bl	800424a <HAL_PCD_EP_GetRxCount>
 800e14a:	4603      	mov	r3, r0
}
 800e14c:	4618      	mov	r0, r3
 800e14e:	3708      	adds	r7, #8
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}

0800e154 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e154:	b480      	push	{r7}
 800e156:	b083      	sub	sp, #12
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e15c:	4b03      	ldr	r3, [pc, #12]	@ (800e16c <USBD_static_malloc+0x18>)
}
 800e15e:	4618      	mov	r0, r3
 800e160:	370c      	adds	r7, #12
 800e162:	46bd      	mov	sp, r7
 800e164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e168:	4770      	bx	lr
 800e16a:	bf00      	nop
 800e16c:	24001cfc 	.word	0x24001cfc

0800e170 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e170:	b480      	push	{r7}
 800e172:	b083      	sub	sp, #12
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800e178:	bf00      	nop
 800e17a:	370c      	adds	r7, #12
 800e17c:	46bd      	mov	sp, r7
 800e17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e182:	4770      	bx	lr

0800e184 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e184:	b480      	push	{r7}
 800e186:	b085      	sub	sp, #20
 800e188:	af00      	add	r7, sp, #0
 800e18a:	4603      	mov	r3, r0
 800e18c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e18e:	2300      	movs	r3, #0
 800e190:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e192:	79fb      	ldrb	r3, [r7, #7]
 800e194:	2b03      	cmp	r3, #3
 800e196:	d817      	bhi.n	800e1c8 <USBD_Get_USB_Status+0x44>
 800e198:	a201      	add	r2, pc, #4	@ (adr r2, 800e1a0 <USBD_Get_USB_Status+0x1c>)
 800e19a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e19e:	bf00      	nop
 800e1a0:	0800e1b1 	.word	0x0800e1b1
 800e1a4:	0800e1b7 	.word	0x0800e1b7
 800e1a8:	0800e1bd 	.word	0x0800e1bd
 800e1ac:	0800e1c3 	.word	0x0800e1c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	73fb      	strb	r3, [r7, #15]
    break;
 800e1b4:	e00b      	b.n	800e1ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e1b6:	2303      	movs	r3, #3
 800e1b8:	73fb      	strb	r3, [r7, #15]
    break;
 800e1ba:	e008      	b.n	800e1ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e1bc:	2301      	movs	r3, #1
 800e1be:	73fb      	strb	r3, [r7, #15]
    break;
 800e1c0:	e005      	b.n	800e1ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e1c2:	2303      	movs	r3, #3
 800e1c4:	73fb      	strb	r3, [r7, #15]
    break;
 800e1c6:	e002      	b.n	800e1ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e1c8:	2303      	movs	r3, #3
 800e1ca:	73fb      	strb	r3, [r7, #15]
    break;
 800e1cc:	bf00      	nop
  }
  return usb_status;
 800e1ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	3714      	adds	r7, #20
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1da:	4770      	bx	lr

0800e1dc <memset>:
 800e1dc:	4402      	add	r2, r0
 800e1de:	4603      	mov	r3, r0
 800e1e0:	4293      	cmp	r3, r2
 800e1e2:	d100      	bne.n	800e1e6 <memset+0xa>
 800e1e4:	4770      	bx	lr
 800e1e6:	f803 1b01 	strb.w	r1, [r3], #1
 800e1ea:	e7f9      	b.n	800e1e0 <memset+0x4>

0800e1ec <__libc_init_array>:
 800e1ec:	b570      	push	{r4, r5, r6, lr}
 800e1ee:	4d0d      	ldr	r5, [pc, #52]	@ (800e224 <__libc_init_array+0x38>)
 800e1f0:	4c0d      	ldr	r4, [pc, #52]	@ (800e228 <__libc_init_array+0x3c>)
 800e1f2:	1b64      	subs	r4, r4, r5
 800e1f4:	10a4      	asrs	r4, r4, #2
 800e1f6:	2600      	movs	r6, #0
 800e1f8:	42a6      	cmp	r6, r4
 800e1fa:	d109      	bne.n	800e210 <__libc_init_array+0x24>
 800e1fc:	4d0b      	ldr	r5, [pc, #44]	@ (800e22c <__libc_init_array+0x40>)
 800e1fe:	4c0c      	ldr	r4, [pc, #48]	@ (800e230 <__libc_init_array+0x44>)
 800e200:	f000 f818 	bl	800e234 <_init>
 800e204:	1b64      	subs	r4, r4, r5
 800e206:	10a4      	asrs	r4, r4, #2
 800e208:	2600      	movs	r6, #0
 800e20a:	42a6      	cmp	r6, r4
 800e20c:	d105      	bne.n	800e21a <__libc_init_array+0x2e>
 800e20e:	bd70      	pop	{r4, r5, r6, pc}
 800e210:	f855 3b04 	ldr.w	r3, [r5], #4
 800e214:	4798      	blx	r3
 800e216:	3601      	adds	r6, #1
 800e218:	e7ee      	b.n	800e1f8 <__libc_init_array+0xc>
 800e21a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e21e:	4798      	blx	r3
 800e220:	3601      	adds	r6, #1
 800e222:	e7f2      	b.n	800e20a <__libc_init_array+0x1e>
 800e224:	0800e2d4 	.word	0x0800e2d4
 800e228:	0800e2d4 	.word	0x0800e2d4
 800e22c:	0800e2d4 	.word	0x0800e2d4
 800e230:	0800e2d8 	.word	0x0800e2d8

0800e234 <_init>:
 800e234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e236:	bf00      	nop
 800e238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e23a:	bc08      	pop	{r3}
 800e23c:	469e      	mov	lr, r3
 800e23e:	4770      	bx	lr

0800e240 <_fini>:
 800e240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e242:	bf00      	nop
 800e244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e246:	bc08      	pop	{r3}
 800e248:	469e      	mov	lr, r3
 800e24a:	4770      	bx	lr
